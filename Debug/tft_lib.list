
tft_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc8  08008fc8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000878  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccd1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f37  00000000  00000000  0003cd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00040cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00041ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243d8  00000000  00000000  00042f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018619  00000000  00000000  00067338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc0b5  00000000  00000000  0007f951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ba06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c80  00000000  00000000  0014ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f8c 	.word	0x08008f8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008f8c 	.word	0x08008f8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 fbc1 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f835 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f967 	bl	80007a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f89b 	bl	800060c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8c7 	bl	8000668 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8f5 	bl	80006c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f008 f943 	bl	8008768 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004e2:	f000 f927 	bl	8000734 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  tft_init(&hspi2,
 80004e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004ea:	9304      	str	r3, [sp, #16]
 80004ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004f0:	9303      	str	r3, [sp, #12]
 80004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <main+0x6c>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <main+0x6c>)
 8000504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000508:	4909      	ldr	r1, [pc, #36]	; (8000530 <main+0x70>)
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x74>)
 800050c:	f000 fc5a 	bl	8000dc4 <tft_init>
		  LCD_CS_GPIO_Port,  LCD_CS_Pin,
		  LCD_DC_GPIO_Port,  LCD_DC_Pin,
		  LCD_RST_GPIO_Port, LCD_RST_Pin,
		  480, 320);
  tft_set_rotation(2);
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fe2f 	bl	8001174 <tft_set_rotation>

//  test_fill_rects(COLOR_GREEN, COLOR_ORANGE);
//  test_rects(COLOR_DGREEN);

//  test_circles(50, COLOR_CYAN);
  test_triangles(COLOR_CYAN);
 8000516:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800051a:	f001 fa11 	bl	8001940 <test_triangles>
  test_fill_triangles(COLOR_BLUE2);
 800051e:	f240 501d 	movw	r0, #1309	; 0x51d
 8000522:	f001 fa65 	bl	80019f0 <test_fill_triangles>
  while (1)
  {
//	  test_fill_screen();
//	  test_lines2(COLOR_WHITE, COLOR_ORANGE);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000526:	f008 f945 	bl	80087b4 <MX_USB_HOST_Process>
 800052a:	e7fc      	b.n	8000526 <main+0x66>
 800052c:	40021000 	.word	0x40021000
 8000530:	40020400 	.word	0x40020400
 8000534:	200000d0 	.word	0x200000d0

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fc50 	bl	8008dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f9f6 	bl	80049b0 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ca:	f000 fa0b 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2105      	movs	r1, #5
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fc57 	bl	8004ea0 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f9f4 	bl	80009e4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C1_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_I2C1_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x50>)
 8000618:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_I2C1_Init+0x58>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_I2C1_Init+0x50>)
 800062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_I2C1_Init+0x50>)
 800064a:	f003 fbcd 	bl	8003de8 <HAL_I2C_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f9c6 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000128 	.word	0x20000128
 8000660:	40005400 	.word	0x40005400
 8000664:	000186a0 	.word	0x000186a0

08000668 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_I2S3_Init+0x54>)
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <MX_I2S3_Init+0x58>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_I2S3_Init+0x54>)
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <MX_I2S3_Init+0x5c>)
 8000692:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2S3_Init+0x54>)
 80006a8:	f003 fce2 	bl	8004070 <HAL_I2S_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006b2:	f000 f997 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200001d4 	.word	0x200001d4
 80006c0:	40003c00 	.word	0x40003c00
 80006c4:	00017700 	.word	0x00017700

080006c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_SPI1_Init+0x64>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_SPI1_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI1_Init+0x64>)
 8000714:	220a      	movs	r2, #10
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_SPI1_Init+0x64>)
 800071a:	f004 fee9 	bl	80054f0 <HAL_SPI_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 f95e 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000017c 	.word	0x2000017c
 8000730:	40013000 	.word	0x40013000

08000734 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI2_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI2_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI2_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI2_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI2_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI2_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI2_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI2_Init+0x64>)
 8000768:	2228      	movs	r2, #40	; 0x28
 800076a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI2_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI2_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI2_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI2_Init+0x64>)
 8000786:	f004 feb3 	bl	80054f0 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f928 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000d0 	.word	0x200000d0
 800079c:	40003800 	.word	0x40003800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b84      	ldr	r3, [pc, #528]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a83      	ldr	r2, [pc, #524]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b81      	ldr	r3, [pc, #516]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b7d      	ldr	r3, [pc, #500]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b7a      	ldr	r3, [pc, #488]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b76      	ldr	r3, [pc, #472]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a75      	ldr	r2, [pc, #468]	; (80009cc <MX_GPIO_Init+0x22c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b73      	ldr	r3, [pc, #460]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a6e      	ldr	r2, [pc, #440]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <MX_GPIO_Init+0x22c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b68      	ldr	r3, [pc, #416]	; (80009cc <MX_GPIO_Init+0x22c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a67      	ldr	r2, [pc, #412]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b61      	ldr	r3, [pc, #388]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a60      	ldr	r2, [pc, #384]	; (80009cc <MX_GPIO_Init+0x22c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b5e      	ldr	r3, [pc, #376]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000864:	485a      	ldr	r0, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x230>)
 8000866:	f001 fd35 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2101      	movs	r1, #1
 800086e:	4859      	ldr	r0, [pc, #356]	; (80009d4 <MX_GPIO_Init+0x234>)
 8000870:	f001 fd30 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800087a:	4857      	ldr	r0, [pc, #348]	; (80009d8 <MX_GPIO_Init+0x238>)
 800087c:	f001 fd2a 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000880:	2200      	movs	r2, #0
 8000882:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000886:	4855      	ldr	r0, [pc, #340]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000888:	f001 fd24 	bl	80022d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin;
 800088c:	f24a 0308 	movw	r3, #40968	; 0xa008
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	484a      	ldr	r0, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x230>)
 80008a6:	f001 fb79 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4844      	ldr	r0, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x234>)
 80008c2:	f001 fb6b 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x234>)
 80008e2:	f001 fb5b 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4839      	ldr	r0, [pc, #228]	; (80009e0 <MX_GPIO_Init+0x240>)
 80008fc:	f001 fb4e 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4831      	ldr	r0, [pc, #196]	; (80009d8 <MX_GPIO_Init+0x238>)
 8000914:	f001 fb42 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800091e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4828      	ldr	r0, [pc, #160]	; (80009d0 <MX_GPIO_Init+0x230>)
 8000930:	f001 fb34 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x238>)
 8000952:	f001 fb23 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|LCD_CS_Pin;
 8000956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x238>)
 8000970:	f001 fb14 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000974:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000978:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x23c>)
 800098e:	f001 fb05 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000992:	2320      	movs	r3, #32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x23c>)
 80009a6:	f001 faf9 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x230>)
 80009c0:	f001 faec 	bl	8001f9c <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f001 fa72 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_I2C_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a90:	2304      	movs	r3, #4
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <HAL_I2C_MspInit+0x8c>)
 8000a9c:	f001 fa7e 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <HAL_I2S_MspInit+0xf0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d15a      	bne.n	8000bb6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b04:	23c0      	movs	r3, #192	; 0xc0
 8000b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 fbad 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b1c:	f7ff ff62 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b84:	2306      	movs	r3, #6
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <HAL_I2S_MspInit+0xf8>)
 8000b90:	f001 fa04 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_I2S_MspInit+0xfc>)
 8000bb2:	f001 f9f3 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40003c00 	.word	0x40003c00
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_SPI_MspInit+0xe8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a29      	ldr	r2, [pc, #164]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <HAL_SPI_MspInit+0xf0>)
 8000c46:	f001 f9a9 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c4a:	e031      	b.n	8000cb0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_SPI_MspInit+0xf4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12c      	bne.n	8000cb0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_SPI_MspInit+0xec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000c8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <HAL_SPI_MspInit+0xf8>)
 8000cac:	f001 f976 	bl	8001f9c <HAL_GPIO_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40003800 	.word	0x40003800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 ffea 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <OTG_FS_IRQHandler+0x10>)
 8000d26:	f001 fd59 	bl	80027dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200005f8 	.word	0x200005f8

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f008 f808 	bl	8008d78 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200000b0 	.word	0x200000b0
 8000d9c:	20000910 	.word	0x20000910

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <tft_init>:

void tft_init(SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin,
		uint32_t width, uint32_t height) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	80fb      	strh	r3, [r7, #6]


	tft_width = width;
 8000dd4:	4ab7      	ldr	r2, [pc, #732]	; (80010b4 <tft_init+0x2f0>)
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	6013      	str	r3, [r2, #0]
	tft_height = height;
 8000dda:	4ab7      	ldr	r2, [pc, #732]	; (80010b8 <tft_init+0x2f4>)
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	6013      	str	r3, [r2, #0]
	tft_pixel_count = width * height;
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	4ab4      	ldr	r2, [pc, #720]	; (80010bc <tft_init+0x2f8>)
 8000dea:	6013      	str	r3, [r2, #0]

	tft = tft_interface_init(spi, cs_port, cs_pin, dc_port, dc_pin, rst_port, rst_pin);
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	8c3b      	ldrh	r3, [r7, #32]
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	8b3b      	ldrh	r3, [r7, #24]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 feca 	bl	8001b98 <tft_interface_init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4aae      	ldr	r2, [pc, #696]	; (80010c0 <tft_init+0x2fc>)
 8000e08:	6013      	str	r3, [r2, #0]

	tft_rst_off(tft);
 8000e0a:	4bad      	ldr	r3, [pc, #692]	; (80010c0 <tft_init+0x2fc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68d8      	ldr	r0, [r3, #12]
 8000e10:	4bab      	ldr	r3, [pc, #684]	; (80010c0 <tft_init+0x2fc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	8a9b      	ldrh	r3, [r3, #20]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f001 fa5b 	bl	80022d4 <HAL_GPIO_WritePin>
	tft_rst_on(tft);
 8000e1e:	4ba8      	ldr	r3, [pc, #672]	; (80010c0 <tft_init+0x2fc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68d8      	ldr	r0, [r3, #12]
 8000e24:	4ba6      	ldr	r3, [pc, #664]	; (80010c0 <tft_init+0x2fc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	8a9b      	ldrh	r3, [r3, #20]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f001 fa51 	bl	80022d4 <HAL_GPIO_WritePin>
	tft_rst_off(tft);
 8000e32:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <tft_init+0x2fc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68d8      	ldr	r0, [r3, #12]
 8000e38:	4ba1      	ldr	r3, [pc, #644]	; (80010c0 <tft_init+0x2fc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	8a9b      	ldrh	r3, [r3, #20]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	f001 fa47 	bl	80022d4 <HAL_GPIO_WritePin>

	tft_send_cmd(tft, TFTCMD_NOP);
 8000e46:	4b9e      	ldr	r3, [pc, #632]	; (80010c0 <tft_init+0x2fc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fe51 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x00);
 8000e52:	4b9b      	ldr	r3, [pc, #620]	; (80010c0 <tft_init+0x2fc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fe74 	bl	8001b46 <tft_send_data>
	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8000e5e:	4b98      	ldr	r3, [pc, #608]	; (80010c0 <tft_init+0x2fc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2111      	movs	r1, #17
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fe45 	bl	8001af4 <tft_send_cmd>

	tft_delay(150);
 8000e6a:	2096      	movs	r0, #150	; 0x96
 8000e6c:	f000 ff60 	bl	8001d30 <HAL_Delay>

	tft_send_cmd(tft, TFTCMD_PIXEL_FORMAT);
 8000e70:	4b93      	ldr	r3, [pc, #588]	; (80010c0 <tft_init+0x2fc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	213a      	movs	r1, #58	; 0x3a
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fe3c 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x55);
 8000e7c:	4b90      	ldr	r3, [pc, #576]	; (80010c0 <tft_init+0x2fc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2155      	movs	r1, #85	; 0x55
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fe5f 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_MAC);
 8000e88:	4b8d      	ldr	r3, [pc, #564]	; (80010c0 <tft_init+0x2fc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2136      	movs	r1, #54	; 0x36
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fe30 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x48);
 8000e94:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <tft_init+0x2fc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2148      	movs	r1, #72	; 0x48
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fe53 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_POWER3);
 8000ea0:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <tft_init+0x2fc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	21c2      	movs	r1, #194	; 0xc2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fe24 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x44);
 8000eac:	4b84      	ldr	r3, [pc, #528]	; (80010c0 <tft_init+0x2fc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2144      	movs	r1, #68	; 0x44
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fe47 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_VCOM1);
 8000eb8:	4b81      	ldr	r3, [pc, #516]	; (80010c0 <tft_init+0x2fc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	21c5      	movs	r1, #197	; 0xc5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fe18 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x00); tft_send_data(tft, 0x00);
 8000ec4:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <tft_init+0x2fc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fe3b 	bl	8001b46 <tft_send_data>
 8000ed0:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <tft_init+0x2fc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fe35 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x00); tft_send_data(tft, 0x00);
 8000edc:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <tft_init+0x2fc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fe2f 	bl	8001b46 <tft_send_data>
 8000ee8:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <tft_init+0x2fc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fe29 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_PGAMMA);
 8000ef4:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <tft_init+0x2fc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	21e0      	movs	r1, #224	; 0xe0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fdfa 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x1f);
 8000f00:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <tft_init+0x2fc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fe1d 	bl	8001b46 <tft_send_data>
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <tft_init+0x2fc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	211f      	movs	r1, #31
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fe17 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x1c); tft_send_data(tft, 0x0c);
 8000f18:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <tft_init+0x2fc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	211c      	movs	r1, #28
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fe11 	bl	8001b46 <tft_send_data>
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <tft_init+0x2fc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	210c      	movs	r1, #12
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fe0b 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x08);
 8000f30:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <tft_init+0x2fc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	210f      	movs	r1, #15
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fe05 	bl	8001b46 <tft_send_data>
 8000f3c:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <tft_init+0x2fc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2108      	movs	r1, #8
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fdff 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x48); tft_send_data(tft, 0x98);
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <tft_init+0x2fc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2148      	movs	r1, #72	; 0x48
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fdf9 	bl	8001b46 <tft_send_data>
 8000f54:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <tft_init+0x2fc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2198      	movs	r1, #152	; 0x98
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fdf3 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x0a);
 8000f60:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <tft_init+0x2fc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2137      	movs	r1, #55	; 0x37
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fded 	bl	8001b46 <tft_send_data>
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <tft_init+0x2fc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	210a      	movs	r1, #10
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fde7 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x13); tft_send_data(tft, 0x04);
 8000f78:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <tft_init+0x2fc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2113      	movs	r1, #19
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fde1 	bl	8001b46 <tft_send_data>
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <tft_init+0x2fc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fddb 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x11); tft_send_data(tft, 0x0d);
 8000f90:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <tft_init+0x2fc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2111      	movs	r1, #17
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fdd5 	bl	8001b46 <tft_send_data>
 8000f9c:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <tft_init+0x2fc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	210d      	movs	r1, #13
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fdcf 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <tft_init+0x2fc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fdc9 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_NGAMMA);
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <tft_init+0x2fc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	21e1      	movs	r1, #225	; 0xe1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd9a 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x32);
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <tft_init+0x2fc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fdbd 	bl	8001b46 <tft_send_data>
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <tft_init+0x2fc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2132      	movs	r1, #50	; 0x32
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fdb7 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x2e); tft_send_data(tft, 0x0b);
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <tft_init+0x2fc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	212e      	movs	r1, #46	; 0x2e
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fdb1 	bl	8001b46 <tft_send_data>
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <tft_init+0x2fc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	210b      	movs	r1, #11
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fdab 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x0d); tft_send_data(tft, 0x05);
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <tft_init+0x2fc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	210d      	movs	r1, #13
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fda5 	bl	8001b46 <tft_send_data>
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <tft_init+0x2fc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2105      	movs	r1, #5
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fd9f 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x47); tft_send_data(tft, 0x75);
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <tft_init+0x2fc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2147      	movs	r1, #71	; 0x47
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd99 	bl	8001b46 <tft_send_data>
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <tft_init+0x2fc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2175      	movs	r1, #117	; 0x75
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fd93 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x06);
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <tft_init+0x2fc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2137      	movs	r1, #55	; 0x37
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fd8d 	bl	8001b46 <tft_send_data>
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <tft_init+0x2fc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2106      	movs	r1, #6
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd87 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x10); tft_send_data(tft, 0x03);
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <tft_init+0x2fc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2110      	movs	r1, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fd81 	bl	8001b46 <tft_send_data>
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <tft_init+0x2fc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2103      	movs	r1, #3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fd7b 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x24); tft_send_data(tft, 0x20);
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <tft_init+0x2fc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2124      	movs	r1, #36	; 0x24
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fd75 	bl	8001b46 <tft_send_data>
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <tft_init+0x2fc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2120      	movs	r1, #32
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fd6f 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x00);
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <tft_init+0x2fc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fd69 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_GAMMA_CTRL1);
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <tft_init+0x2fc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	21e2      	movs	r1, #226	; 0xe2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fd3a 	bl	8001af4 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x32);
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <tft_init+0x2fc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	210f      	movs	r1, #15
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fd5d 	bl	8001b46 <tft_send_data>
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <tft_init+0x2fc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2132      	movs	r1, #50	; 0x32
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fd57 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x2e); tft_send_data(tft, 0x0b);
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <tft_init+0x2fc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	212e      	movs	r1, #46	; 0x2e
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd51 	bl	8001b46 <tft_send_data>
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <tft_init+0x2fc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	210b      	movs	r1, #11
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd4b 	bl	8001b46 <tft_send_data>
 80010b0:	e008      	b.n	80010c4 <tft_init+0x300>
 80010b2:	bf00      	nop
 80010b4:	200000b8 	.word	0x200000b8
 80010b8:	200000bc 	.word	0x200000bc
 80010bc:	200000c0 	.word	0x200000c0
 80010c0:	200000b4 	.word	0x200000b4
	tft_send_data(tft, 0x0d); tft_send_data(tft, 0x05);
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <tft_init+0x3ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	210d      	movs	r1, #13
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd3b 	bl	8001b46 <tft_send_data>
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <tft_init+0x3ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2105      	movs	r1, #5
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd35 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x47); tft_send_data(tft, 0x75);
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <tft_init+0x3ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2147      	movs	r1, #71	; 0x47
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd2f 	bl	8001b46 <tft_send_data>
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <tft_init+0x3ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2175      	movs	r1, #117	; 0x75
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fd29 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x06);
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <tft_init+0x3ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2137      	movs	r1, #55	; 0x37
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fd23 	bl	8001b46 <tft_send_data>
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <tft_init+0x3ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2106      	movs	r1, #6
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd1d 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x10); tft_send_data(tft, 0x03);
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <tft_init+0x3ac>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2110      	movs	r1, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd17 	bl	8001b46 <tft_send_data>
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <tft_init+0x3ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2103      	movs	r1, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fd11 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x24); tft_send_data(tft, 0x20);
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <tft_init+0x3ac>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2124      	movs	r1, #36	; 0x24
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fd0b 	bl	8001b46 <tft_send_data>
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <tft_init+0x3ac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2120      	movs	r1, #32
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd05 	bl	8001b46 <tft_send_data>
	tft_send_data(tft, 0x00);
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <tft_init+0x3ac>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fcff 	bl	8001b46 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <tft_init+0x3ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2111      	movs	r1, #17
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fcd0 	bl	8001af4 <tft_send_cmd>
	tft_send_cmd(tft, TFTCMD_DISPLAY_ON);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <tft_init+0x3ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2129      	movs	r1, #41	; 0x29
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fcca 	bl	8001af4 <tft_send_cmd>

	tft_delay(150);
 8001160:	2096      	movs	r0, #150	; 0x96
 8001162:	f000 fde5 	bl	8001d30 <HAL_Delay>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000b4 	.word	0x200000b4

08001174 <tft_set_rotation>:

void tft_set_rotation(uint8_t rotate) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	tft_send_cmd(tft, MEMCONTROL);
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <tft_set_rotation+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2136      	movs	r1, #54	; 0x36
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fcb5 	bl	8001af4 <tft_send_cmd>
	switch(rotate)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	3b01      	subs	r3, #1
 800118e:	2b03      	cmp	r3, #3
 8001190:	d832      	bhi.n	80011f8 <tft_set_rotation+0x84>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <tft_set_rotation+0x24>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011bd 	.word	0x080011bd
 80011a0:	080011d1 	.word	0x080011d1
 80011a4:	080011e5 	.word	0x080011e5
	{
		case 1:
			rot_num = 1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <tft_set_rotation+0xa4>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <tft_set_rotation+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2188      	movs	r1, #136	; 0x88
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fcc6 	bl	8001b46 <tft_send_data>
					MADCTL_MY | MADCTL_BGR);
			break;
 80011ba:	e027      	b.n	800120c <tft_set_rotation+0x98>
		case 2:
			rot_num = 2;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <tft_set_rotation+0xa4>)
 80011be:	2202      	movs	r2, #2
 80011c0:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <tft_set_rotation+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2128      	movs	r1, #40	; 0x28
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fcbc 	bl	8001b46 <tft_send_data>
					MADCTL_MV | MADCTL_BGR);
			break;
 80011ce:	e01d      	b.n	800120c <tft_set_rotation+0x98>
		case 3:
			rot_num = 3;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <tft_set_rotation+0xa4>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <tft_set_rotation+0xa0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2148      	movs	r1, #72	; 0x48
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fcb2 	bl	8001b46 <tft_send_data>
					MADCTL_MX | MADCTL_BGR);
			break;
 80011e2:	e013      	b.n	800120c <tft_set_rotation+0x98>
		case 4:
			rot_num = 4;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <tft_set_rotation+0xa4>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <tft_set_rotation+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	21e8      	movs	r1, #232	; 0xe8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fca8 	bl	8001b46 <tft_send_data>
					MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
			break;
 80011f6:	e009      	b.n	800120c <tft_set_rotation+0x98>
		default:
			rot_num = 1;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <tft_set_rotation+0xa4>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <tft_set_rotation+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2188      	movs	r1, #136	; 0x88
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fc9e 	bl	8001b46 <tft_send_data>
					MADCTL_MY | MADCTL_BGR);
			break;
 800120a:	bf00      	nop
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000b4 	.word	0x200000b4
 8001218:	20000004 	.word	0x20000004

0800121c <tft_cursor_position>:
void tft_cursor_position(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4604      	mov	r4, r0
 8001224:	4608      	mov	r0, r1
 8001226:	4611      	mov	r1, r2
 8001228:	461a      	mov	r2, r3
 800122a:	4623      	mov	r3, r4
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	4603      	mov	r3, r0
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]
 8001236:	4613      	mov	r3, r2
 8001238:	803b      	strh	r3, [r7, #0]

  tft_send_cmd(tft, TFTCMD_COLUMN_ADDR);
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <tft_cursor_position+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	212a      	movs	r1, #42	; 0x2a
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fc57 	bl	8001af4 <tft_send_cmd>
  tft_send_data(tft, x0 >> 8);
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <tft_cursor_position+0xdc>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f000 fc76 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, x0 & 0xff);
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <tft_cursor_position+0xdc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	88fa      	ldrh	r2, [r7, #6]
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fc6e 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, x1 >> 8);
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <tft_cursor_position+0xdc>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	4610      	mov	r0, r2
 800127a:	f000 fc64 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, x1 & 0xff);
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <tft_cursor_position+0xdc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fc5c 	bl	8001b46 <tft_send_data>

  tft_send_cmd(tft, TFTCMD_PAGE_ADDR);
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <tft_cursor_position+0xdc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	212b      	movs	r1, #43	; 0x2b
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fc2d 	bl	8001af4 <tft_send_cmd>
  tft_send_data(tft, y0 >> 8);
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <tft_cursor_position+0xdc>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f000 fc4c 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, y0 & 0xff);
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <tft_cursor_position+0xdc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fc44 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, y1 >> 8);
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <tft_cursor_position+0xdc>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	883b      	ldrh	r3, [r7, #0]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	4610      	mov	r0, r2
 80012ce:	f000 fc3a 	bl	8001b46 <tft_send_data>
  tft_send_data(tft, y1 & 0xff);
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <tft_cursor_position+0xdc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	883a      	ldrh	r2, [r7, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc32 	bl	8001b46 <tft_send_data>

  tft_send_cmd(tft, TFTCMD_GRAM);
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <tft_cursor_position+0xdc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	212c      	movs	r1, #44	; 0x2c
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fc03 	bl	8001af4 <tft_send_cmd>
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000b4 	.word	0x200000b4

080012fc <tft_fill_rectxy>:

void tft_fill_rectxy(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4604      	mov	r4, r0
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	4623      	mov	r3, r4
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	4603      	mov	r3, r0
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]
 8001316:	4613      	mov	r3, r2
 8001318:	803b      	strh	r3, [r7, #0]
	uint32_t n =  ((x1+1)-x0)*((y1+1)-y0);
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	883a      	ldrh	r2, [r7, #0]
 8001324:	1c51      	adds	r1, r2, #1
 8001326:	88ba      	ldrh	r2, [r7, #4]
 8001328:	1a8a      	subs	r2, r1, r2
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	60fb      	str	r3, [r7, #12]

	if(n > tft_pixel_count)
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <tft_fill_rectxy+0x8c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d902      	bls.n	8001340 <tft_fill_rectxy+0x44>
		n = tft_pixel_count;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <tft_fill_rectxy+0x8c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]

	tft_cursor_position(x0, y0, x1, y1);
 8001340:	883b      	ldrh	r3, [r7, #0]
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	88b9      	ldrh	r1, [r7, #4]
 8001346:	88f8      	ldrh	r0, [r7, #6]
 8001348:	f7ff ff68 	bl	800121c <tft_cursor_position>
	for(;n > 0; n--) {
 800134c:	e014      	b.n	8001378 <tft_fill_rectxy+0x7c>
		tft_send_data(tft, color>>8);
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <tft_fill_rectxy+0x90>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	8c3b      	ldrh	r3, [r7, #32]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f000 fbf2 	bl	8001b46 <tft_send_data>
		tft_send_data(tft, color&0xff);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <tft_fill_rectxy+0x90>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	8c3a      	ldrh	r2, [r7, #32]
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fbea 	bl	8001b46 <tft_send_data>
	for(;n > 0; n--) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3b01      	subs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e7      	bne.n	800134e <tft_fill_rectxy+0x52>
	}
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	200000c0 	.word	0x200000c0
 800138c:	200000b4 	.word	0x200000b4

08001390 <tft_fill_rect>:

void tft_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b085      	sub	sp, #20
 8001394:	af02      	add	r7, sp, #8
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	4603      	mov	r3, r0
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	807b      	strh	r3, [r7, #2]
 80013aa:	4613      	mov	r3, r2
 80013ac:	803b      	strh	r3, [r7, #0]
	tft_fill_rectxy(x, y, x+w, y+h, color);
 80013ae:	88f8      	ldrh	r0, [r7, #6]
 80013b0:	88b9      	ldrh	r1, [r7, #4]
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4413      	add	r3, r2
 80013b8:	b29c      	uxth	r4, r3
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	883b      	ldrh	r3, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	8b3b      	ldrh	r3, [r7, #24]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	4622      	mov	r2, r4
 80013ca:	f7ff ff97 	bl	80012fc <tft_fill_rectxy>
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
	...

080013d8 <tft_fill_screen>:

void tft_fill_screen(uint16_t color) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]

	if(rot_num == 1 || rot_num==3)
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <tft_fill_screen+0x80>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d003      	beq.n	80013f2 <tft_fill_screen+0x1a>
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <tft_fill_screen+0x80>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d113      	bne.n	800141a <tft_fill_screen+0x42>
		tft_fill_rect(0, 0, tft_height-1, tft_width-1, color);
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <tft_fill_screen+0x84>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <tft_fill_screen+0x88>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29b      	uxth	r3, r3
 8001408:	b219      	sxth	r1, r3
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	460b      	mov	r3, r1
 8001410:	2100      	movs	r1, #0
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ffbc 	bl	8001390 <tft_fill_rect>
	else if(rot_num==2 || rot_num==4)
		tft_fill_rect(0, 0, tft_width-1, tft_height-1, color);

}
 8001418:	e01a      	b.n	8001450 <tft_fill_screen+0x78>
	else if(rot_num==2 || rot_num==4)
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <tft_fill_screen+0x80>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d003      	beq.n	800142a <tft_fill_screen+0x52>
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <tft_fill_screen+0x80>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d112      	bne.n	8001450 <tft_fill_screen+0x78>
		tft_fill_rect(0, 0, tft_width-1, tft_height-1, color);
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <tft_fill_screen+0x88>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <tft_fill_screen+0x84>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	3b01      	subs	r3, #1
 800143e:	b29b      	uxth	r3, r3
 8001440:	b219      	sxth	r1, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff ffa0 	bl	8001390 <tft_fill_rect>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004
 800145c:	200000bc 	.word	0x200000bc
 8001460:	200000b8 	.word	0x200000b8

08001464 <tft_draw_pixel>:

void tft_draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	460b      	mov	r3, r1
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	807b      	strh	r3, [r7, #2]
	tft_fill_rect(x, y, 0, 0, color);
 8001476:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800147a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	2200      	movs	r2, #0
 8001486:	f7ff ff83 	bl	8001390 <tft_fill_rect>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <tft_draw_horizontal_line>:

void tft_draw_horizontal_line(uint16_t x, uint16_t y, uint16_t w, uint16_t color) {
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b085      	sub	sp, #20
 8001496:	af02      	add	r7, sp, #8
 8001498:	4604      	mov	r4, r0
 800149a:	4608      	mov	r0, r1
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	4623      	mov	r3, r4
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4603      	mov	r3, r0
 80014a6:	80bb      	strh	r3, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	803b      	strh	r3, [r7, #0]
	tft_fill_rect(x, y, w, 0, color);
 80014b0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014bc:	883b      	ldrh	r3, [r7, #0]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	f7ff ff65 	bl	8001390 <tft_fill_rect>
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}

080014ce <tft_draw_line>:

    tft_draw_vertical_line(x  , y, h, color);
    tft_draw_vertical_line(x+w, y, h, color);
}

void tft_draw_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b08b      	sub	sp, #44	; 0x2c
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	4623      	mov	r3, r4
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	4603      	mov	r3, r0
 80014e2:	80bb      	strh	r3, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80014ec:	883a      	ldrh	r2, [r7, #0]
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014fa:	8879      	ldrh	r1, [r7, #2]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	1acb      	subs	r3, r1, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	bfb8      	it	lt
 8001504:	425b      	neglt	r3, r3
 8001506:	429a      	cmp	r2, r3
 8001508:	bfcc      	ite	gt
 800150a:	2301      	movgt	r3, #1
 800150c:	2300      	movle	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	847b      	strh	r3, [r7, #34]	; 0x22
	if (steep) {
 8001512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <tft_draw_line+0x64>
		swap(x0, y0);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	807b      	strh	r3, [r7, #2]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	803b      	strh	r3, [r7, #0]
	}
	if (x0 > x1) {
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	429a      	cmp	r2, r3
 8001538:	d90b      	bls.n	8001552 <tft_draw_line+0x84>
		swap(x0, x1);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	883b      	ldrh	r3, [r7, #0]
 800154c:	80bb      	strh	r3, [r7, #4]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	b29b      	uxth	r3, r3
 800155a:	81fb      	strh	r3, [r7, #14]
	dy = abs(y1 - y0);
 800155c:	883a      	ldrh	r2, [r7, #0]
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	bfb8      	it	lt
 8001566:	425b      	neglt	r3, r3
 8001568:	81bb      	strh	r3, [r7, #12]

	int16_t err = dx / 2;
 800156a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156e:	0fda      	lsrs	r2, r3, #31
 8001570:	4413      	add	r3, r2
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t ystep;

	if (y0 < y1)
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d202      	bcs.n	8001584 <tft_draw_line+0xb6>
		ystep = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001582:	e029      	b.n	80015d8 <tft_draw_line+0x10a>
	else
	    ystep = -1;
 8001584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001588:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (; x0<=x1; x0++) {
 800158a:	e025      	b.n	80015d8 <tft_draw_line+0x10a>
		if (steep)
 800158c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <tft_draw_line+0xd4>
	      tft_draw_pixel(y0, x0, color);
 8001594:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001596:	88f9      	ldrh	r1, [r7, #6]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff62 	bl	8001464 <tft_draw_pixel>
 80015a0:	e005      	b.n	80015ae <tft_draw_line+0xe0>
	     else
	      tft_draw_pixel(x0, y0, color);
 80015a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80015a4:	88b9      	ldrh	r1, [r7, #4]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5b 	bl	8001464 <tft_draw_pixel>

	    err -= dy;
 80015ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015b0:	89bb      	ldrh	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	    if (err < 0) {
 80015b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da08      	bge.n	80015d2 <tft_draw_line+0x104>
	      y0 += ystep;
 80015c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	80bb      	strh	r3, [r7, #4]
	      err += dx;
 80015c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	4413      	add	r3, r2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (; x0<=x1; x0++) {
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	3301      	adds	r3, #1
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d9d5      	bls.n	800158c <tft_draw_line+0xbe>
	    }
	}
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <tft_draw_triangle>:
        tft_draw_pixel(x0 - y, y0 + x, color);
        tft_draw_pixel(x0 + y, y0 - x, color);
        tft_draw_pixel(x0 - y, y0 - x, color);
    }
}
void tft_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	803b      	strh	r3, [r7, #0]
	tft_draw_line(x0, y0, x1, y1, color);
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	88b9      	ldrh	r1, [r7, #4]
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	883c      	ldrh	r4, [r7, #0]
 8001610:	8c3b      	ldrh	r3, [r7, #32]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4623      	mov	r3, r4
 8001616:	f7ff ff5a 	bl	80014ce <tft_draw_line>
	tft_draw_line(x1, y1, x2, y2, color);
 800161a:	8878      	ldrh	r0, [r7, #2]
 800161c:	8839      	ldrh	r1, [r7, #0]
 800161e:	8b3a      	ldrh	r2, [r7, #24]
 8001620:	8bbc      	ldrh	r4, [r7, #28]
 8001622:	8c3b      	ldrh	r3, [r7, #32]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4623      	mov	r3, r4
 8001628:	f7ff ff51 	bl	80014ce <tft_draw_line>
	tft_draw_line(x2, y2, x0, y0, color);
 800162c:	8b38      	ldrh	r0, [r7, #24]
 800162e:	8bb9      	ldrh	r1, [r7, #28]
 8001630:	88fa      	ldrh	r2, [r7, #6]
 8001632:	88bc      	ldrh	r4, [r7, #4]
 8001634:	8c3b      	ldrh	r3, [r7, #32]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4623      	mov	r3, r4
 800163a:	f7ff ff48 	bl	80014ce <tft_draw_line>
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bd90      	pop	{r4, r7, pc}

08001646 <tft_fill_triangle>:

void tft_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b093      	sub	sp, #76	; 0x4c
 800164a:	af00      	add	r7, sp, #0
 800164c:	4604      	mov	r4, r0
 800164e:	4608      	mov	r0, r1
 8001650:	4611      	mov	r1, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	80fb      	strh	r3, [r7, #6]
 8001658:	4603      	mov	r3, r0
 800165a:	80bb      	strh	r3, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	803b      	strh	r3, [r7, #0]
    int16_t a, b, y, last;

    if (y0 > y1) {
 8001664:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001668:	f9b7 3000 	ldrsh.w	r3, [r7]
 800166c:	429a      	cmp	r2, r3
 800166e:	dd0d      	ble.n	800168c <tft_fill_triangle+0x46>
        swap(y0, y1);
 8001670:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167c:	803b      	strh	r3, [r7, #0]
        swap(x0, x1);
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800168c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001690:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001694:	429a      	cmp	r2, r3
 8001696:	dd0f      	ble.n	80016b8 <tft_fill_triangle+0x72>
        swap(y2, y1);
 8001698:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169e:	883b      	ldrh	r3, [r7, #0]
 80016a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	803b      	strh	r3, [r7, #0]
        swap(x2, x1);
 80016a8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80016b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dd0d      	ble.n	80016e0 <tft_fill_triangle+0x9a>
        swap(y0, y1);
 80016c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	883b      	ldrh	r3, [r7, #0]
 80016cc:	80bb      	strh	r3, [r7, #4]
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	803b      	strh	r3, [r7, #0]
        swap(x0, x1);
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	80fb      	strh	r3, [r7, #6]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) {
 80016e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016e4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d13e      	bne.n	800176a <tft_fill_triangle+0x124>
        a = b = x0;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80016f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(x1 < a)
 80016fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016fe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001702:	429a      	cmp	r2, r3
 8001704:	da03      	bge.n	800170e <tft_fill_triangle+0xc8>
        	a = x1;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800170c:	e008      	b.n	8001720 <tft_fill_triangle+0xda>
        else if(x1 > b)
 800170e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001712:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001716:	429a      	cmp	r2, r3
 8001718:	dd02      	ble.n	8001720 <tft_fill_triangle+0xda>
        	b = x1;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        if(x2 < a)
 8001720:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8001724:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001728:	429a      	cmp	r2, r3
 800172a:	da04      	bge.n	8001736 <tft_fill_triangle+0xf0>
        	a = x2;
 800172c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001734:	e009      	b.n	800174a <tft_fill_triangle+0x104>
        else if(x2 > b)
 8001736:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800173a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800173e:	429a      	cmp	r2, r3
 8001740:	dd03      	ble.n	800174a <tft_fill_triangle+0x104>
        	b = x2;
 8001742:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001746:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        tft_draw_horizontal_line(a, y0, b-a+1, color);
 800174a:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001754:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001764:	f7ff fe95 	bl	8001492 <tft_draw_horizontal_line>
        return;
 8001768:	e0e7      	b.n	800193a <tft_fill_triangle+0x2f4>
    }

    int16_t
    dx01 = x1 - x0,
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	83fb      	strh	r3, [r7, #30]
    dy01 = y1 - y0,
 8001774:	883a      	ldrh	r2, [r7, #0]
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	83bb      	strh	r3, [r7, #28]
    dx02 = x2 - x0,
 800177e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	837b      	strh	r3, [r7, #26]
    dy02 = y2 - y0,
 800178a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	b29b      	uxth	r3, r3
 8001794:	833b      	strh	r3, [r7, #24]
    dx12 = x2 - x1,
 8001796:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
    dy12 = y2 - y1;
 80017a2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	82bb      	strh	r3, [r7, #20]
    int32_t
    sa = 0,
 80017ae:	2300      	movs	r3, #0
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sb = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38

    if(y1 == y2)
 80017b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017ba:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80017be:	429a      	cmp	r2, r3
 80017c0:	d103      	bne.n	80017ca <tft_fill_triangle+0x184>
    	last = y1;
 80017c2:	883b      	ldrh	r3, [r7, #0]
 80017c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80017c8:	e004      	b.n	80017d4 <tft_fill_triangle+0x18e>
    else
    	last = y1-1;
 80017ca:	883b      	ldrh	r3, [r7, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    for(y=y0; y<=last; y++) {
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80017da:	e046      	b.n	800186a <tft_fill_triangle+0x224>
        a = x0 + sa / dy01;
 80017dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4413      	add	r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        b = x0 + sb / dy02;
 80017f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        sa += dx01;
 8001808:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800180c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800180e:	4413      	add	r3, r2
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
        sb += dx02;
 8001812:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001818:	4413      	add	r3, r2
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38

        if(a > b) swap(a,b);
 800181c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8001820:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001824:	429a      	cmp	r2, r3
 8001826:	dd09      	ble.n	800183c <tft_fill_triangle+0x1f6>
 8001828:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001832:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        tft_draw_horizontal_line(a, y, b-a+1, color);
 800183c:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8001840:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001844:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001848:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001858:	f7ff fe1b 	bl	8001492 <tft_draw_horizontal_line>
    for(y=y0; y<=last; y++) {
 800185c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001860:	b29b      	uxth	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800186a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800186e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001872:	429a      	cmp	r2, r3
 8001874:	ddb2      	ble.n	80017dc <tft_fill_triangle+0x196>
    }

    sa = (int32_t)dx12 * (y - y1);
 8001876:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800187a:	f9b7 1042 	ldrsh.w	r1, [r7, #66]	; 0x42
 800187e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001882:	1a8a      	subs	r2, r1, r2
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
    sb = (int32_t)dx02 * (y - y0);
 800188a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800188e:	f9b7 1042 	ldrsh.w	r1, [r7, #66]	; 0x42
 8001892:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001896:	1a8a      	subs	r2, r1, r2
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
    for(; y<=y2; y++) {
 800189e:	e046      	b.n	800192e <tft_fill_triangle+0x2e8>
        a = x1 + sa / dy12;
 80018a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        b = x0 + sb / dy02;
 80018b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        sa += dx12;
 80018cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018d2:	4413      	add	r3, r2
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        sb += dx02;
 80018d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018dc:	4413      	add	r3, r2
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
        if(a > b)
 80018e0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80018e4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dd09      	ble.n	8001900 <tft_fill_triangle+0x2ba>
        	swap(a,b);
 80018ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        tft_draw_horizontal_line(a, y, b-a+1, color);
 8001900:	f8b7 0046 	ldrh.w	r0, [r7, #70]	; 0x46
 8001904:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001908:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800190c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800191c:	f7ff fdb9 	bl	8001492 <tft_draw_horizontal_line>
    for(; y<=y2; y++) {
 8001920:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001924:	b29b      	uxth	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	b29b      	uxth	r3, r3
 800192a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800192e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8001932:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001936:	429a      	cmp	r2, r3
 8001938:	ddb2      	ble.n	80018a0 <tft_fill_triangle+0x25a>
    }
}
 800193a:	374c      	adds	r7, #76	; 0x4c
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <test_triangles>:
        }
    }

}

void test_triangles(uint16_t color) {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b08b      	sub	sp, #44	; 0x2c
 8001944:	af04      	add	r7, sp, #16
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
    int n, i,
	cx = tft_width/2,
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <test_triangles+0xa8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	613b      	str	r3, [r7, #16]
    cy = tft_height/2;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <test_triangles+0xac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	60fb      	str	r3, [r7, #12]

    tft_fill_screen(COLOR_BLACK);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fd3c 	bl	80013d8 <tft_fill_screen>

    n = min(cx, cy);
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4293      	cmp	r3, r2
 8001966:	bfa8      	it	ge
 8001968:	4613      	movge	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < n; i += 5) {
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e030      	b.n	80019d4 <test_triangles+0x94>
        tft_draw_triangle(
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	b29a      	uxth	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	b29b      	uxth	r3, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29b      	uxth	r3, r3
        tft_draw_triangle(
 8001982:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	b29a      	uxth	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	b29b      	uxth	r3, r3
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b29b      	uxth	r3, r3
        tft_draw_triangle(
 8001990:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	b29a      	uxth	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
        tft_draw_triangle(
 800199e:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	b29b      	uxth	r3, r3
        tft_draw_triangle(
 80019ac:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	b291      	uxth	r1, r2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	b292      	uxth	r2, r2
 80019b6:	440a      	add	r2, r1
 80019b8:	b292      	uxth	r2, r2
        tft_draw_triangle(
 80019ba:	b212      	sxth	r2, r2
 80019bc:	88f9      	ldrh	r1, [r7, #6]
 80019be:	9102      	str	r1, [sp, #8]
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4633      	mov	r3, r6
 80019c6:	462a      	mov	r2, r5
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff fe0e 	bl	80015ea <tft_draw_triangle>
    for (i = 0; i < n; i += 5) {
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3305      	adds	r3, #5
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbca      	blt.n	8001972 <test_triangles+0x32>
            color);
    }

}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000b8 	.word	0x200000b8
 80019ec:	200000bc 	.word	0x200000bc

080019f0 <test_fill_triangles>:

void test_fill_triangles(uint16_t color) {
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b08b      	sub	sp, #44	; 0x2c
 80019f4:	af04      	add	r7, sp, #16
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
    int i,
	cx = tft_width /2,
 80019fa:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <test_fill_triangles+0xfc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
    cy = tft_height/2;
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <test_fill_triangles+0x100>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	085b      	lsrs	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]

    tft_fill_screen(COLOR_BLACK);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fce4 	bl	80013d8 <tft_fill_screen>

    for (i = min(cx, cy); i > 10; i -= 5) {
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4293      	cmp	r3, r2
 8001a16:	bfa8      	it	ge
 8001a18:	4613      	movge	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e05e      	b.n	8001adc <test_fill_triangles+0xec>
        tft_fill_triangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	b218      	sxth	r0, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21c      	sxth	r4, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b21d      	sxth	r5, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b21e      	sxth	r6, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	b291      	uxth	r1, r2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	b292      	uxth	r2, r2
 8001a62:	440a      	add	r2, r1
 8001a64:	b292      	uxth	r2, r2
 8001a66:	b212      	sxth	r2, r2
 8001a68:	88f9      	ldrh	r1, [r7, #6]
 8001a6a:	9102      	str	r1, [sp, #8]
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4633      	mov	r3, r6
 8001a72:	462a      	mov	r2, r5
 8001a74:	4621      	mov	r1, r4
 8001a76:	f7ff fde6 	bl	8001646 <tft_fill_triangle>
                         color);
        tft_draw_triangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	b218      	sxth	r0, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b21c      	sxth	r4, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21d      	sxth	r5, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b21e      	sxth	r6, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	b291      	uxth	r1, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	b292      	uxth	r2, r2
 8001abe:	440a      	add	r2, r1
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	b212      	sxth	r2, r2
 8001ac4:	88f9      	ldrh	r1, [r7, #6]
 8001ac6:	9102      	str	r1, [sp, #8]
 8001ac8:	9201      	str	r2, [sp, #4]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4633      	mov	r3, r6
 8001ace:	462a      	mov	r2, r5
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7ff fd8a 	bl	80015ea <tft_draw_triangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	dc9d      	bgt.n	8001a1e <test_fill_triangles+0x2e>
                         color);
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	200000b8 	.word	0x200000b8
 8001af0:	200000bc 	.word	0x200000bc

08001af4 <tft_send_cmd>:
 *      Author: alvenan
 */

#include "tft_spi.h"

void tft_send_cmd(TFT *tft, uint8_t cmd) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
	tft_dc_cmd(tft); tft_cs_on(tft);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6898      	ldr	r0, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	8a5b      	ldrh	r3, [r3, #18]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f000 fbe2 	bl	80022d4 <HAL_GPIO_WritePin>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	8a1b      	ldrh	r3, [r3, #16]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f000 fbda 	bl	80022d4 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, cmd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	1cf9      	adds	r1, r7, #3
 8001b26:	2305      	movs	r3, #5
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f003 fd6a 	bl	8005602 <HAL_SPI_Transmit>
	tft_cs_off(tft);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6858      	ldr	r0, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	8a1b      	ldrh	r3, [r3, #16]
 8001b36:	2201      	movs	r2, #1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f000 fbcb 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <tft_send_data>:

void tft_send_data(TFT *tft, uint8_t data) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
	tft_dc_data(tft); tft_cs_on(tft);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6898      	ldr	r0, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	8a5b      	ldrh	r3, [r3, #18]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f000 fbb9 	bl	80022d4 <HAL_GPIO_WritePin>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6858      	ldr	r0, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8a1b      	ldrh	r3, [r3, #16]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f000 fbb1 	bl	80022d4 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, data);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	1cf9      	adds	r1, r7, #3
 8001b78:	2305      	movs	r3, #5
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f003 fd41 	bl	8005602 <HAL_SPI_Transmit>
	tft_cs_off(tft);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6858      	ldr	r0, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8a1b      	ldrh	r3, [r3, #16]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f000 fba2 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <tft_interface_init>:

TFT* tft_interface_init(SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80fb      	strh	r3, [r7, #6]

	TFT *tft = (TFT*) malloc(sizeof(TFT));
 8001ba8:	2018      	movs	r0, #24
 8001baa:	f007 f90f 	bl	8008dcc <malloc>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	617b      	str	r3, [r7, #20]

	tft->spi_handler = spi;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
	tft->cs_port = cs_port;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	605a      	str	r2, [r3, #4]
	tft->cs_pin = cs_pin;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	821a      	strh	r2, [r3, #16]
	tft->dc_port = dc_port;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	609a      	str	r2, [r3, #8]
	tft->dc_pin = dc_pin;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	8c3a      	ldrh	r2, [r7, #32]
 8001bce:	825a      	strh	r2, [r3, #18]
	tft->rst_port = rst_port;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	60da      	str	r2, [r3, #12]
	tft->rst_pin = rst_pin;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bda:	829a      	strh	r2, [r3, #20]

	tft_cs_off(tft);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	6858      	ldr	r0, [r3, #4]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	8a1b      	ldrh	r3, [r3, #16]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	f000 fb74 	bl	80022d4 <HAL_GPIO_WritePin>

	return tft;
 8001bec:	697b      	ldr	r3, [r7, #20]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfe:	490e      	ldr	r1, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c14:	4c0b      	ldr	r4, [pc, #44]	; (8001c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c22:	f7ff f8bd 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f007 f8ad 	bl	8008d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7fe fc49 	bl	80004c0 <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c3c:	08008fd0 	.word	0x08008fd0
  ldr r2, =_sbss
 8001c40:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001c44:	2000090c 	.word	0x2000090c

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_Init+0x40>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_Init+0x40>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x40>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f94f 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7fe feb6 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f967 	bl	8001f82 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ccc:	f000 f92f 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	2000021c 	.word	0x2000021c

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000021c 	.word	0x2000021c

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e16b      	b.n	8002290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 815a 	bne.w	800228a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b4 	beq.w	800228a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae90 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002308:	b08f      	sub	sp, #60	; 0x3c
 800230a:	af0a      	add	r7, sp, #40	; 0x28
 800230c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e054      	b.n	80023c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f006 fa76 	bl	8008824 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2203      	movs	r2, #3
 800233c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fbcc 	bl	8005af4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	687e      	ldr	r6, [r7, #4]
 8002364:	466d      	mov	r5, sp
 8002366:	f106 0410 	add.w	r4, r6, #16
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002376:	e885 0003 	stmia.w	r5, {r0, r1}
 800237a:	1d33      	adds	r3, r6, #4
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	f003 fb46 	bl	8005a10 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fbc3 	bl	8005b16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	687e      	ldr	r6, [r7, #4]
 8002398:	466d      	mov	r5, sp
 800239a:	f106 0410 	add.w	r4, r6, #16
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ae:	1d33      	adds	r3, r6, #4
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f003 fd2a 	bl	8005e0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b089      	sub	sp, #36	; 0x24
 80023ce:	af04      	add	r7, sp, #16
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	70fb      	strb	r3, [r7, #3]
 80023dc:	460b      	mov	r3, r1
 80023de:	70bb      	strb	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_HCD_HC_Init+0x28>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e076      	b.n	80024e0 <HAL_HCD_HC_Init+0x116>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	333d      	adds	r3, #61	; 0x3d
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3338      	adds	r3, #56	; 0x38
 800241a:	787a      	ldrb	r2, [r7, #1]
 800241c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3340      	adds	r3, #64	; 0x40
 800242c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800242e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3339      	adds	r3, #57	; 0x39
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	333f      	adds	r3, #63	; 0x3f
 8002450:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002454:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	78ba      	ldrb	r2, [r7, #2]
 800245a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245e:	b2d0      	uxtb	r0, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	333a      	adds	r3, #58	; 0x3a
 800246c:	4602      	mov	r2, r0
 800246e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002474:	2b00      	cmp	r3, #0
 8002476:	da09      	bge.n	800248c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	333b      	adds	r3, #59	; 0x3b
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e008      	b.n	800249e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	333b      	adds	r3, #59	; 0x3b
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	333c      	adds	r3, #60	; 0x3c
 80024ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	787c      	ldrb	r4, [r7, #1]
 80024b8:	78ba      	ldrb	r2, [r7, #2]
 80024ba:	78f9      	ldrb	r1, [r7, #3]
 80024bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	4623      	mov	r3, r4
 80024ce:	f003 fe17 	bl	8006100 <USB_HC_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_HCD_HC_Halt+0x1e>
 8002502:	2302      	movs	r3, #2
 8002504:	e00f      	b.n	8002526 <HAL_HCD_HC_Halt+0x3e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f853 	bl	80065c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	460b      	mov	r3, r1
 8002544:	70bb      	strb	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	333b      	adds	r3, #59	; 0x3b
 8002558:	78ba      	ldrb	r2, [r7, #2]
 800255a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	787a      	ldrb	r2, [r7, #1]
 800256c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800256e:	7c3b      	ldrb	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d112      	bne.n	800259a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3342      	adds	r3, #66	; 0x42
 8002582:	2203      	movs	r2, #3
 8002584:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333d      	adds	r3, #61	; 0x3d
 8002594:	7f3a      	ldrb	r2, [r7, #28]
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e008      	b.n	80025ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	f200 80c6 	bhi.w	8002740 <HAL_HCD_HC_SubmitRequest+0x210>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	0800272d 	.word	0x0800272d
 80025c4:	08002631 	.word	0x08002631
 80025c8:	080026af 	.word	0x080026af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025cc:	7c3b      	ldrb	r3, [r7, #16]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f040 80b8 	bne.w	8002744 <HAL_HCD_HC_SubmitRequest+0x214>
 80025d4:	78bb      	ldrb	r3, [r7, #2]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80b4 	bne.w	8002744 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025dc:	8b3b      	ldrh	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3355      	adds	r3, #85	; 0x55
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3355      	adds	r3, #85	; 0x55
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3342      	adds	r3, #66	; 0x42
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800261a:	e093      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3342      	adds	r3, #66	; 0x42
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e089      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002630:	78bb      	ldrb	r3, [r7, #2]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11d      	bne.n	8002672 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3355      	adds	r3, #85	; 0x55
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3342      	adds	r3, #66	; 0x42
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800265c:	e073      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3342      	adds	r3, #66	; 0x42
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
      break;
 8002670:	e069      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3354      	adds	r3, #84	; 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3342      	adds	r3, #66	; 0x42
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
      break;
 8002698:	e055      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3342      	adds	r3, #66	; 0x42
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]
      break;
 80026ac:	e04b      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026ae:	78bb      	ldrb	r3, [r7, #2]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11d      	bne.n	80026f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3355      	adds	r3, #85	; 0x55
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3342      	adds	r3, #66	; 0x42
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026da:	e034      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3342      	adds	r3, #66	; 0x42
 80026ea:	2202      	movs	r2, #2
 80026ec:	701a      	strb	r2, [r3, #0]
      break;
 80026ee:	e02a      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3354      	adds	r3, #84	; 0x54
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3342      	adds	r3, #66	; 0x42
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
      break;
 8002716:	e016      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3342      	adds	r3, #66	; 0x42
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
      break;
 800272a:	e00c      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3342      	adds	r3, #66	; 0x42
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
      break;
 800273e:	e002      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002740:	bf00      	nop
 8002742:	e000      	b.n	8002746 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002744:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3344      	adds	r3, #68	; 0x44
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	8b3a      	ldrh	r2, [r7, #24]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	202c      	movs	r0, #44	; 0x2c
 8002760:	fb00 f303 	mul.w	r3, r0, r3
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	; 0x4c
 8002768:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3360      	adds	r3, #96	; 0x60
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3350      	adds	r3, #80	; 0x50
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3339      	adds	r3, #57	; 0x39
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3361      	adds	r3, #97	; 0x61
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	222c      	movs	r2, #44	; 0x2c
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	3338      	adds	r3, #56	; 0x38
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	18d1      	adds	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	f003 fda6 	bl	800631c <USB_HC_StartXfer>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop

080027dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fac9 	bl	8005d8a <USB_GetMode>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 80f6 	bne.w	80029ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 faad 	bl	8005d64 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80ec 	beq.w	80029ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 faa4 	bl	8005d64 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002826:	d104      	bne.n	8002832 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002830:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fa94 	bl	8005d64 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002846:	d104      	bne.n	8002852 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fa84 	bl	8005d64 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002866:	d104      	bne.n	8002872 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fa74 	bl	8005d64 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d103      	bne.n	800288e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2202      	movs	r2, #2
 800288c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fa66 	bl	8005d64 <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800289e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a2:	d11c      	bne.n	80028de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028be:	2110      	movs	r1, #16
 80028c0:	6938      	ldr	r0, [r7, #16]
 80028c2:	f003 f975 	bl	8005bb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028c6:	6938      	ldr	r0, [r7, #16]
 80028c8:	f003 f996 	bl	8005bf8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fb4e 	bl	8005f74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f006 f821 	bl	8008920 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fa3e 	bl	8005d64 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f2:	d102      	bne.n	80028fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 fa03 	bl	8003d00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fa30 	bl	8005d64 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d106      	bne.n	800291c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f005 ffea 	bl	80088e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2208      	movs	r2, #8
 800291a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fa1f 	bl	8005d64 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d101      	bne.n	8002934 <HAL_HCD_IRQHandler+0x158>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_HCD_IRQHandler+0x15a>
 8002934:	2300      	movs	r3, #0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0210 	bic.w	r2, r2, #16
 8002948:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f001 f906 	bl	8003b5c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0210 	orr.w	r2, r2, #16
 800295e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f003 f9fd 	bl	8005d64 <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002974:	d13a      	bne.n	80029ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fe10 	bl	80065a0 <USB_HC_ReadInterrupt>
 8002980:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e025      	b.n	80029d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d018      	beq.n	80029ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b2:	d106      	bne.n	80029c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8ab 	bl	8002b16 <HCD_HC_IN_IRQHandler>
 80029c0:	e005      	b.n	80029ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fcc6 	bl	800335a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3d4      	bcc.n	8002988 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	e000      	b.n	80029ec <HAL_HCD_IRQHandler+0x210>
      return;
 80029ea:	bf00      	nop
    }
  }
}
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_HCD_Start+0x16>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e013      	b.n	8002a30 <HAL_HCD_Start+0x3e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fb10 	bl	800603c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 f856 	bl	8005ad2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_HCD_Stop+0x16>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e00d      	b.n	8002a6a <HAL_HCD_Stop+0x32>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 ff0a 	bl	8006874 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fab2 	bl	8005fe8 <USB_ResetPort>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3360      	adds	r3, #96	; 0x60
 8002aa8:	781b      	ldrb	r3, [r3, #0]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3350      	adds	r3, #80	; 0x50
 8002ad0:	681b      	ldr	r3, [r3, #0]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 faf6 	bl	80060dc <USB_GetCurrentFrame>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 fad1 	bl	80060ae <USB_GetHostSpeed>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d119      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2304      	movs	r3, #4
 8002b56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	0151      	lsls	r1, r2, #5
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e101      	b.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b90:	d12b      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3361      	adds	r3, #97	; 0x61
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fced 	bl	80065c2 <USB_HC_Halt>
 8002be8:	e0c9      	b.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d109      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2320      	movs	r3, #32
 8002c10:	6093      	str	r3, [r2, #8]
 8002c12:	e0b4      	b.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d133      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	0151      	lsls	r1, r2, #5
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	440a      	add	r2, r1
 8002c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3361      	adds	r3, #97	; 0x61
 8002c58:	2205      	movs	r2, #5
 8002c5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fc99 	bl	80065c2 <USB_HC_Halt>
 8002c90:	e075      	b.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d134      	bne.n	8002d14 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	0151      	lsls	r1, r2, #5
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3361      	adds	r3, #97	; 0x61
 8002cd8:	2208      	movs	r2, #8
 8002cda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fc58 	bl	80065c2 <USB_HC_Halt>
 8002d12:	e034      	b.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d129      	bne.n	8002d7e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3361      	adds	r3, #97	; 0x61
 8002d58:	2206      	movs	r2, #6
 8002d5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 fc2b 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d94:	d122      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 fbfe 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002dda:	e2ba      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 811b 	bne.w	800302a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d019      	beq.n	8002e30 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3348      	adds	r3, #72	; 0x48
 8002e0a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e1e:	1ad2      	subs	r2, r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	335c      	adds	r3, #92	; 0x5c
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2301      	movs	r3, #1
 8002e64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333f      	adds	r3, #63	; 0x3f
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	333f      	adds	r3, #63	; 0x3f
 8002e88:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d121      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	0151      	lsls	r1, r2, #5
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	440a      	add	r2, r1
 8002ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fb82 	bl	80065c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2310      	movs	r3, #16
 8002ece:	6093      	str	r3, [r2, #8]
 8002ed0:	e066      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d127      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f04:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	; 0x60
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	b2d9      	uxtb	r1, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	202c      	movs	r0, #44	; 0x2c
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	; 0x60
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f005 fd04 	bl	800893c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f34:	e034      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	333f      	adds	r3, #63	; 0x3f
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d12a      	bne.n	8002fa0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3354      	adds	r3, #84	; 0x54
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2d8      	uxtb	r0, r3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3354      	adds	r3, #84	; 0x54
 8002f80:	4602      	mov	r2, r0
 8002f82:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	b2d9      	uxtb	r1, r3
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	202c      	movs	r0, #44	; 0x2c
 8002f8e:	fb00 f303 	mul.w	r3, r0, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3360      	adds	r3, #96	; 0x60
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f005 fcce 	bl	800893c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d12b      	bne.n	8003000 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3348      	adds	r3, #72	; 0x48
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	202c      	movs	r0, #44	; 0x2c
 8002fbe:	fb00 f202 	mul.w	r2, r0, r2
 8002fc2:	440a      	add	r2, r1
 8002fc4:	3240      	adds	r2, #64	; 0x40
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 81be 	beq.w	8003352 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3354      	adds	r3, #84	; 0x54
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3354      	adds	r3, #84	; 0x54
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
}
 8002ffe:	e1a8      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3354      	adds	r3, #84	; 0x54
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2d8      	uxtb	r0, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3354      	adds	r3, #84	; 0x54
 8003024:	4602      	mov	r2, r0
 8003026:	701a      	strb	r2, [r3, #0]
}
 8003028:	e193      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 8106 	bne.w	800324e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	440a      	add	r2, r1
 8003058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305c:	f023 0302 	bic.w	r3, r3, #2
 8003060:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3361      	adds	r3, #97	; 0x61
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d109      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3360      	adds	r3, #96	; 0x60
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e0c9      	b.n	800321e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3361      	adds	r3, #97	; 0x61
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d109      	bne.n	80030b2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2205      	movs	r2, #5
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e0b5      	b.n	800321e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3361      	adds	r3, #97	; 0x61
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d009      	beq.n	80030da <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d150      	bne.n	800317c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	335c      	adds	r3, #92	; 0x5c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	202c      	movs	r0, #44	; 0x2c
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	440b      	add	r3, r1
 80030f8:	335c      	adds	r3, #92	; 0x5c
 80030fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	335c      	adds	r3, #92	; 0x5c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d912      	bls.n	8003136 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	335c      	adds	r3, #92	; 0x5c
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3360      	adds	r3, #96	; 0x60
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003134:	e073      	b.n	800321e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3360      	adds	r3, #96	; 0x60
 8003144:	2202      	movs	r2, #2
 8003146:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800315e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003166:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800317a:	e050      	b.n	800321e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3361      	adds	r3, #97	; 0x61
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d122      	bne.n	80031d6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3360      	adds	r3, #96	; 0x60
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e023      	b.n	800321e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3361      	adds	r3, #97	; 0x61
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d119      	bne.n	800321e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	202c      	movs	r0, #44	; 0x2c
 8003202:	fb00 f303 	mul.w	r3, r0, r3
 8003206:	440b      	add	r3, r1
 8003208:	335c      	adds	r3, #92	; 0x5c
 800320a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	2204      	movs	r2, #4
 800321c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	461a      	mov	r2, r3
 800322c:	2302      	movs	r3, #2
 800322e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	b2d9      	uxtb	r1, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	202c      	movs	r0, #44	; 0x2c
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	4413      	add	r3, r2
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 fb78 	bl	800893c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800324c:	e081      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b10      	cmp	r3, #16
 8003262:	d176      	bne.n	8003352 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	333f      	adds	r3, #63	; 0x3f
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d121      	bne.n	80032bc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	0151      	lsls	r1, r2, #5
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	440a      	add	r2, r1
 80032a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f984 	bl	80065c2 <USB_HC_Halt>
 80032ba:	e041      	b.n	8003340 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	333f      	adds	r3, #63	; 0x3f
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	333f      	adds	r3, #63	; 0x3f
 80032de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d12d      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	335c      	adds	r3, #92	; 0x5c
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d120      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3361      	adds	r3, #97	; 0x61
 800330c:	2203      	movs	r2, #3
 800330e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f941 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	461a      	mov	r2, r3
 800334e:	2310      	movs	r3, #16
 8003350:	6093      	str	r3, [r2, #8]
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b088      	sub	sp, #32
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d119      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2304      	movs	r3, #4
 800339a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80033bc:	e3ca      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d13e      	bne.n	8003452 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	2320      	movs	r3, #32
 80033e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	333d      	adds	r3, #61	; 0x3d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	f040 83ac 	bne.w	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	333d      	adds	r3, #61	; 0x3d
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	440a      	add	r2, r1
 8003436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f003 f8b9 	bl	80065c2 <USB_HC_Halt>
}
 8003450:	e380      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003468:	d122      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	0151      	lsls	r1, r2, #5
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	440a      	add	r2, r1
 8003480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 f894 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ac:	6093      	str	r3, [r2, #8]
}
 80034ae:	e351      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d150      	bne.n	8003568 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d111      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	333d      	adds	r3, #61	; 0x3d
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	2340      	movs	r3, #64	; 0x40
 8003510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	0151      	lsls	r1, r2, #5
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	440a      	add	r2, r1
 8003528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f003 f840 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	2301      	movs	r3, #1
 8003552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3361      	adds	r3, #97	; 0x61
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
}
 8003566:	e2f5      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d13c      	bne.n	80035f8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3361      	adds	r3, #97	; 0x61
 800358c:	2204      	movs	r2, #4
 800358e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	333d      	adds	r3, #61	; 0x3d
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	335c      	adds	r3, #92	; 0x5c
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 ffef 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	461a      	mov	r2, r3
 80035f2:	2340      	movs	r3, #64	; 0x40
 80035f4:	6093      	str	r3, [r2, #8]
}
 80035f6:	e2ad      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b08      	cmp	r3, #8
 800360c:	d12a      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	461a      	mov	r2, r3
 800361c:	2308      	movs	r3, #8
 800361e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	440a      	add	r2, r1
 8003636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f002 ffb9 	bl	80065c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3361      	adds	r3, #97	; 0x61
 800365e:	2205      	movs	r2, #5
 8003660:	701a      	strb	r2, [r3, #0]
}
 8003662:	e277      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d150      	bne.n	800371c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	335c      	adds	r3, #92	; 0x5c
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3361      	adds	r3, #97	; 0x61
 800369a:	2203      	movs	r2, #3
 800369c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	333d      	adds	r3, #61	; 0x3d
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d112      	bne.n	80036d8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d108      	bne.n	80036d8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	333d      	adds	r3, #61	; 0x3d
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f002 ff5d 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	2310      	movs	r3, #16
 8003718:	6093      	str	r3, [r2, #8]
}
 800371a:	e21b      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d174      	bne.n	800381c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3361      	adds	r3, #97	; 0x61
 8003748:	2206      	movs	r2, #6
 800374a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	440a      	add	r2, r1
 8003762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f002 ff23 	bl	80065c2 <USB_HC_Halt>
 800377c:	e044      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	335c      	adds	r3, #92	; 0x5c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	202c      	movs	r0, #44	; 0x2c
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	440b      	add	r3, r1
 800379c:	335c      	adds	r3, #92	; 0x5c
 800379e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	335c      	adds	r3, #92	; 0x5c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d920      	bls.n	80037f6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	2204      	movs	r2, #4
 80037d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	202c      	movs	r0, #44	; 0x2c
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3360      	adds	r3, #96	; 0x60
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f005 f8a4 	bl	800893c <HAL_HCD_HC_NotifyURBChange_Callback>
 80037f4:	e008      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3360      	adds	r3, #96	; 0x60
 8003804:	2202      	movs	r2, #2
 8003806:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	6093      	str	r3, [r2, #8]
}
 800381a:	e19b      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d134      	bne.n	800389e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	440a      	add	r2, r1
 800384a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f002 feaf 	bl	80065c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	461a      	mov	r2, r3
 8003872:	2310      	movs	r3, #16
 8003874:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003888:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3361      	adds	r3, #97	; 0x61
 8003898:	2208      	movs	r2, #8
 800389a:	701a      	strb	r2, [r3, #0]
}
 800389c:	e15a      	b.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	f040 814f 	bne.w	8003b54 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	3361      	adds	r3, #97	; 0x61
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d17d      	bne.n	80039e6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3360      	adds	r3, #96	; 0x60
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	333f      	adds	r3, #63	; 0x3f
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d00a      	beq.n	8003926 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	333f      	adds	r3, #63	; 0x3f
 800391e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003920:	2b03      	cmp	r3, #3
 8003922:	f040 8100 	bne.w	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3355      	adds	r3, #85	; 0x55
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2d8      	uxtb	r0, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3355      	adds	r3, #85	; 0x55
 8003952:	4602      	mov	r2, r0
 8003954:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b01      	cmp	r3, #1
 800395c:	f040 80e3 	bne.w	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	334c      	adds	r3, #76	; 0x4c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80d8 	beq.w	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	334c      	adds	r3, #76	; 0x4c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	202c      	movs	r0, #44	; 0x2c
 800398c:	fb00 f202 	mul.w	r2, r0, r2
 8003990:	440a      	add	r2, r1
 8003992:	3240      	adds	r2, #64	; 0x40
 8003994:	8812      	ldrh	r2, [r2, #0]
 8003996:	4413      	add	r3, r2
 8003998:	3b01      	subs	r3, #1
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	202c      	movs	r0, #44	; 0x2c
 80039a0:	fb00 f202 	mul.w	r2, r0, r2
 80039a4:	440a      	add	r2, r1
 80039a6:	3240      	adds	r2, #64	; 0x40
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80b5 	beq.w	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3355      	adds	r3, #85	; 0x55
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f083 0301 	eor.w	r3, r3, #1
 80039d0:	b2d8      	uxtb	r0, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	3355      	adds	r3, #85	; 0x55
 80039e0:	4602      	mov	r2, r0
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e09f      	b.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3361      	adds	r3, #97	; 0x61
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d109      	bne.n	8003a0e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3360      	adds	r3, #96	; 0x60
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e08b      	b.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3361      	adds	r3, #97	; 0x61
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d109      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3360      	adds	r3, #96	; 0x60
 8003a30:	2202      	movs	r2, #2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e077      	b.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3361      	adds	r3, #97	; 0x61
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d109      	bne.n	8003a5e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3360      	adds	r3, #96	; 0x60
 8003a58:	2205      	movs	r2, #5
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e063      	b.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3361      	adds	r3, #97	; 0x61
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d009      	beq.n	8003a86 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3361      	adds	r3, #97	; 0x61
 8003a80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d14f      	bne.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	335c      	adds	r3, #92	; 0x5c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	202c      	movs	r0, #44	; 0x2c
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	335c      	adds	r3, #92	; 0x5c
 8003aa6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	335c      	adds	r3, #92	; 0x5c
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d912      	bls.n	8003ae2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3360      	adds	r3, #96	; 0x60
 8003adc:	2204      	movs	r2, #4
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e021      	b.n	8003b26 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	2202      	movs	r2, #2
 8003af2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b0a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b12:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b20:	461a      	mov	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	461a      	mov	r2, r3
 8003b34:	2302      	movs	r3, #2
 8003b36:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	b2d9      	uxtb	r1, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	202c      	movs	r0, #44	; 0x2c
 8003b42:	fb00 f303 	mul.w	r3, r0, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3360      	adds	r3, #96	; 0x60
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f004 fef4 	bl	800893c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	0c5b      	lsrs	r3, r3, #17
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b90:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d004      	beq.n	8003ba2 <HCD_RXQLVL_IRQHandler+0x46>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	f000 80a9 	beq.w	8003cf2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ba0:	e0aa      	b.n	8003cf8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a6 	beq.w	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3344      	adds	r3, #68	; 0x44
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 809b 	beq.w	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3350      	adds	r3, #80	; 0x50
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	202c      	movs	r0, #44	; 0x2c
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	440b      	add	r3, r1
 8003be0:	334c      	adds	r3, #76	; 0x4c
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d87a      	bhi.n	8003cde <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3344      	adds	r3, #68	; 0x44
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f002 f857 	bl	8005cb4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3344      	adds	r3, #68	; 0x44
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	441a      	add	r2, r3
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	202c      	movs	r0, #44	; 0x2c
 8003c20:	fb00 f303 	mul.w	r3, r0, r3
 8003c24:	440b      	add	r3, r1
 8003c26:	3344      	adds	r3, #68	; 0x44
 8003c28:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3350      	adds	r3, #80	; 0x50
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	202c      	movs	r0, #44	; 0x2c
 8003c44:	fb00 f303 	mul.w	r3, r0, r3
 8003c48:	440b      	add	r3, r1
 8003c4a:	3350      	adds	r3, #80	; 0x50
 8003c4c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	0cdb      	lsrs	r3, r3, #19
 8003c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c62:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3340      	adds	r3, #64	; 0x40
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d13c      	bne.n	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d039      	beq.n	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c98:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ca0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3354      	adds	r3, #84	; 0x54
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f083 0301 	eor.w	r3, r3, #1
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3354      	adds	r3, #84	; 0x54
 8003cd8:	4602      	mov	r2, r0
 8003cda:	701a      	strb	r2, [r3, #0]
      break;
 8003cdc:	e00b      	b.n	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3360      	adds	r3, #96	; 0x60
 8003cec:	2204      	movs	r2, #4
 8003cee:	701a      	strb	r2, [r3, #0]
      break;
 8003cf0:	e001      	b.n	8003cf6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003cf6:	bf00      	nop
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3728      	adds	r7, #40	; 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d10b      	bne.n	8003d50 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d102      	bne.n	8003d48 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f004 fdde 	bl	8008904 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d132      	bne.n	8003dc0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f043 0308 	orr.w	r3, r3, #8
 8003d60:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d126      	bne.n	8003dba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d113      	bne.n	8003d9c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d7e:	d106      	bne.n	8003d8e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 f8f4 	bl	8005f74 <USB_InitFSLSPClkSel>
 8003d8c:	e011      	b.n	8003db2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 f8ed 	bl	8005f74 <USB_InitFSLSPClkSel>
 8003d9a:	e00a      	b.n	8003db2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003daa:	461a      	mov	r2, r3
 8003dac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003db0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f004 fdd0 	bl	8008958 <HAL_HCD_PortEnabled_Callback>
 8003db8:	e002      	b.n	8003dc0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f004 fdda 	bl	8008974 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d103      	bne.n	8003dd2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f043 0320 	orr.w	r3, r3, #32
 8003dd0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6013      	str	r3, [r2, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e12b      	b.n	8004052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fe16 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	; 0x24
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f001 f9fc 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a81      	ldr	r2, [pc, #516]	; (800405c <HAL_I2C_Init+0x274>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d807      	bhi.n	8003e6c <HAL_I2C_Init+0x84>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a80      	ldr	r2, [pc, #512]	; (8004060 <HAL_I2C_Init+0x278>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e006      	b.n	8003e7a <HAL_I2C_Init+0x92>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a7d      	ldr	r2, [pc, #500]	; (8004064 <HAL_I2C_Init+0x27c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0e7      	b.n	8004052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a78      	ldr	r2, [pc, #480]	; (8004068 <HAL_I2C_Init+0x280>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0c9b      	lsrs	r3, r3, #18
 8003e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a6a      	ldr	r2, [pc, #424]	; (800405c <HAL_I2C_Init+0x274>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d802      	bhi.n	8003ebc <HAL_I2C_Init+0xd4>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	e009      	b.n	8003ed0 <HAL_I2C_Init+0xe8>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	4a69      	ldr	r2, [pc, #420]	; (800406c <HAL_I2C_Init+0x284>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	3301      	adds	r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	495c      	ldr	r1, [pc, #368]	; (800405c <HAL_I2C_Init+0x274>)
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d819      	bhi.n	8003f24 <HAL_I2C_Init+0x13c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e59      	subs	r1, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f04:	400b      	ands	r3, r1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_I2C_Init+0x138>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1e59      	subs	r1, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1e:	e051      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e04f      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d111      	bne.n	8003f50 <HAL_I2C_Init+0x168>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1e58      	subs	r0, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	440b      	add	r3, r1
 8003f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e012      	b.n	8003f76 <HAL_I2C_Init+0x18e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e58      	subs	r0, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	0099      	lsls	r1, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Init+0x196>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e022      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <HAL_I2C_Init+0x1bc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e58      	subs	r0, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	440b      	add	r3, r1
 8003f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa2:	e00f      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e58      	subs	r0, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	0099      	lsls	r1, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	6809      	ldr	r1, [r1, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6911      	ldr	r1, [r2, #16]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	430b      	orrs	r3, r1
 8004006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	000186a0 	.word	0x000186a0
 8004060:	001e847f 	.word	0x001e847f
 8004064:	003d08ff 	.word	0x003d08ff
 8004068:	431bde83 	.word	0x431bde83
 800406c:	10624dd3 	.word	0x10624dd3

08004070 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e128      	b.n	80042d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a90      	ldr	r2, [pc, #576]	; (80042dc <HAL_I2S_Init+0x26c>)
 800409a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc fd17 	bl	8000ad0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040b8:	f023 030f 	bic.w	r3, r3, #15
 80040bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2202      	movs	r2, #2
 80040c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d060      	beq.n	8004190 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80040d6:	2310      	movs	r3, #16
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e001      	b.n	80040e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80040dc:	2320      	movs	r3, #32
 80040de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d802      	bhi.n	80040ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f001 f9a0 	bl	8005434 <HAL_RCCEx_GetPeriphCLKFreq>
 80040f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fe:	d125      	bne.n	800414c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	3305      	adds	r3, #5
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e01f      	b.n	800416a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	3305      	adds	r3, #5
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e00e      	b.n	800416a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fbb2 f2f3 	udiv	r2, r2, r3
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	3305      	adds	r3, #5
 8004168:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <HAL_I2S_Init+0x270>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	08db      	lsrs	r3, r3, #3
 8004174:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e003      	b.n	8004198 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004190:	2302      	movs	r3, #2
 8004192:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d902      	bls.n	80041a4 <HAL_I2S_Init+0x134>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2bff      	cmp	r3, #255	; 0xff
 80041a2:	d907      	bls.n	80041b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e08f      	b.n	80042d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	ea42 0103 	orr.w	r1, r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041d2:	f023 030f 	bic.w	r3, r3, #15
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6851      	ldr	r1, [r2, #4]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68d2      	ldr	r2, [r2, #12]
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6992      	ldr	r2, [r2, #24]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d161      	bne.n	80042c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <HAL_I2S_Init+0x274>)
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a37      	ldr	r2, [pc, #220]	; (80042e8 <HAL_I2S_Init+0x278>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_I2S_Init+0x1a4>
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_I2S_Init+0x27c>)
 8004212:	e001      	b.n	8004218 <HAL_I2S_Init+0x1a8>
 8004214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4932      	ldr	r1, [pc, #200]	; (80042e8 <HAL_I2S_Init+0x278>)
 8004220:	428a      	cmp	r2, r1
 8004222:	d101      	bne.n	8004228 <HAL_I2S_Init+0x1b8>
 8004224:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_I2S_Init+0x27c>)
 8004226:	e001      	b.n	800422c <HAL_I2S_Init+0x1bc>
 8004228:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800422c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2b      	ldr	r2, [pc, #172]	; (80042e8 <HAL_I2S_Init+0x278>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_I2S_Init+0x1d4>
 8004240:	4b2a      	ldr	r3, [pc, #168]	; (80042ec <HAL_I2S_Init+0x27c>)
 8004242:	e001      	b.n	8004248 <HAL_I2S_Init+0x1d8>
 8004244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004248:	2202      	movs	r2, #2
 800424a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <HAL_I2S_Init+0x278>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_I2S_Init+0x1ea>
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_I2S_Init+0x27c>)
 8004258:	e001      	b.n	800425e <HAL_I2S_Init+0x1ee>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426a:	d003      	beq.n	8004274 <HAL_I2S_Init+0x204>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e001      	b.n	8004280 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800428a:	4313      	orrs	r3, r2
 800428c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004294:	4313      	orrs	r3, r2
 8004296:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800429e:	4313      	orrs	r3, r2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <HAL_I2S_Init+0x278>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_I2S_Init+0x24c>
 80042b8:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <HAL_I2S_Init+0x27c>)
 80042ba:	e001      	b.n	80042c0 <HAL_I2S_Init+0x250>
 80042bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c0:	897a      	ldrh	r2, [r7, #10]
 80042c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	080043e7 	.word	0x080043e7
 80042e0:	cccccccd 	.word	0xcccccccd
 80042e4:	080044fd 	.word	0x080044fd
 80042e8:	40003800 	.word	0x40003800
 80042ec:	40003400 	.word	0x40003400

080042f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	881a      	ldrh	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10e      	bne.n	8004380 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004370:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ffb8 	bl	80042f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	b292      	uxth	r2, r2
 800439c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10e      	bne.n	80043de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff93 	bl	8004304 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d13a      	bne.n	8004478 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d109      	bne.n	8004420 <I2S_IRQHandler+0x3a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d102      	bne.n	8004420 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffb4 	bl	8004388 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d126      	bne.n	8004478 <I2S_IRQHandler+0x92>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b20      	cmp	r3, #32
 8004436:	d11f      	bne.n	8004478 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004446:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f043 0202 	orr.w	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ff50 	bl	8004318 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b03      	cmp	r3, #3
 8004482:	d136      	bne.n	80044f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d109      	bne.n	80044a2 <I2S_IRQHandler+0xbc>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d102      	bne.n	80044a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff45 	bl	800432c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d122      	bne.n	80044f2 <I2S_IRQHandler+0x10c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d11b      	bne.n	80044f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff13 	bl	8004318 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4aa2      	ldr	r2, [pc, #648]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004516:	4ba2      	ldr	r3, [pc, #648]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004518:	e001      	b.n	800451e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800451a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a9b      	ldr	r2, [pc, #620]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004534:	4b9a      	ldr	r3, [pc, #616]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004536:	e001      	b.n	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d004      	beq.n	8004554 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 8099 	bne.w	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f925 	bl	80047b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9c8 	bl	8004918 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d13a      	bne.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d035      	beq.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7e      	ldr	r2, [pc, #504]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80045a6:	4b7e      	ldr	r3, [pc, #504]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045a8:	e001      	b.n	80045ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80045aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4979      	ldr	r1, [pc, #484]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045b6:	428b      	cmp	r3, r1
 80045b8:	d101      	bne.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80045ba:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045bc:	e001      	b.n	80045c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fe88 	bl	8004318 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b08      	cmp	r3, #8
 8004610:	f040 80be 	bne.w	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80b8 	beq.w	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800462e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a59      	ldr	r2, [pc, #356]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800463a:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800463c:	e001      	b.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800463e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4954      	ldr	r1, [pc, #336]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800464a:	428b      	cmp	r3, r1
 800464c:	d101      	bne.n	8004652 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800464e:	4b54      	ldr	r3, [pc, #336]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004650:	e001      	b.n	8004656 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004656:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800465a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f043 0204 	orr.w	r2, r3, #4
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe4a 	bl	8004318 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004684:	e084      	b.n	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b02      	cmp	r3, #2
 800468e:	d107      	bne.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8be 	bl	800481c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8fd 	bl	80048b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d12f      	bne.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02a      	beq.n	8004724 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2e      	ldr	r2, [pc, #184]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80046e8:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046ea:	e001      	b.n	80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4929      	ldr	r1, [pc, #164]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d101      	bne.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046fe:	e001      	b.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004708:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f043 0202 	orr.w	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fdfa 	bl	8004318 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d131      	bne.n	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02c      	beq.n	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004744:	e001      	b.n	800474a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4912      	ldr	r1, [pc, #72]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004752:	428b      	cmp	r3, r1
 8004754:	d101      	bne.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004758:	e001      	b.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800475a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004762:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004772:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fdc5 	bl	8004318 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800478e:	e000      	b.n	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004790:	bf00      	nop
}
 8004792:	bf00      	nop
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40003800 	.word	0x40003800
 80047a0:	40003400 	.word	0x40003400

080047a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c99      	adds	r1, r3, #2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6251      	str	r1, [r2, #36]	; 0x24
 80047ca:	881a      	ldrh	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d113      	bne.n	8004812 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ffc9 	bl	80047a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c99      	adds	r1, r3, #2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6251      	str	r1, [r2, #36]	; 0x24
 800482e:	8819      	ldrh	r1, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <I2SEx_TxISR_I2SExt+0x90>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <I2SEx_TxISR_I2SExt+0x22>
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <I2SEx_TxISR_I2SExt+0x94>)
 800483c:	e001      	b.n	8004842 <I2SEx_TxISR_I2SExt+0x26>
 800483e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004842:	460a      	mov	r2, r1
 8004844:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d121      	bne.n	80048a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <I2SEx_TxISR_I2SExt+0x90>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <I2SEx_TxISR_I2SExt+0x50>
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <I2SEx_TxISR_I2SExt+0x94>)
 800486a:	e001      	b.n	8004870 <I2SEx_TxISR_I2SExt+0x54>
 800486c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	490d      	ldr	r1, [pc, #52]	; (80048ac <I2SEx_TxISR_I2SExt+0x90>)
 8004878:	428b      	cmp	r3, r1
 800487a:	d101      	bne.n	8004880 <I2SEx_TxISR_I2SExt+0x64>
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <I2SEx_TxISR_I2SExt+0x94>)
 800487e:	e001      	b.n	8004884 <I2SEx_TxISR_I2SExt+0x68>
 8004880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004884:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004888:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff81 	bl	80047a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40003800 	.word	0x40003800
 80048b0:	40003400 	.word	0x40003400

080048b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68d8      	ldr	r0, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	1c99      	adds	r1, r3, #2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048cc:	b282      	uxth	r2, r0
 80048ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff4a 	bl	80047a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <I2SEx_RxISR_I2SExt+0x16>
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <I2SEx_RxISR_I2SExt+0x94>)
 800492c:	e001      	b.n	8004932 <I2SEx_RxISR_I2SExt+0x1a>
 800492e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004932:	68d8      	ldr	r0, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	1c99      	adds	r1, r3, #2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800493e:	b282      	uxth	r2, r0
 8004940:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d121      	bne.n	800499e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <I2SEx_RxISR_I2SExt+0x50>
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <I2SEx_RxISR_I2SExt+0x94>)
 8004966:	e001      	b.n	800496c <I2SEx_RxISR_I2SExt+0x54>
 8004968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	490d      	ldr	r1, [pc, #52]	; (80049a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004974:	428b      	cmp	r3, r1
 8004976:	d101      	bne.n	800497c <I2SEx_RxISR_I2SExt+0x64>
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <I2SEx_RxISR_I2SExt+0x94>)
 800497a:	e001      	b.n	8004980 <I2SEx_RxISR_I2SExt+0x68>
 800497c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004980:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004984:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff03 	bl	80047a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40003800 	.word	0x40003800
 80049ac:	40003400 	.word	0x40003400

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e264      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d075      	beq.n	8004aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ce:	4ba3      	ldr	r3, [pc, #652]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d00c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049da:	4ba0      	ldr	r3, [pc, #640]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d112      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e6:	4b9d      	ldr	r3, [pc, #628]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	4b99      	ldr	r3, [pc, #612]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05b      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x108>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d157      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e23f      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x74>
 8004a16:	4b91      	ldr	r3, [pc, #580]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a90      	ldr	r2, [pc, #576]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e01d      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a8a      	ldr	r2, [pc, #552]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b88      	ldr	r3, [pc, #544]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a87      	ldr	r2, [pc, #540]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e00b      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a48:	4b84      	ldr	r3, [pc, #528]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a83      	ldr	r2, [pc, #524]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a80      	ldr	r2, [pc, #512]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd f956 	bl	8001d18 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd f952 	bl	8001d18 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e204      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0xc0>
 8004a8e:	e014      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fd f942 	bl	8001d18 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fd f93e 	bl	8001d18 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e1f0      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	4b6c      	ldr	r3, [pc, #432]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0xe8>
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d063      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac6:	4b65      	ldr	r3, [pc, #404]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad2:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d11c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ade:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d116      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	4b5c      	ldr	r3, [pc, #368]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1c4      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4952      	ldr	r1, [pc, #328]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	e03a      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b20:	4b4f      	ldr	r3, [pc, #316]	; (8004c60 <HAL_RCC_OscConfig+0x2b0>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fd f8f7 	bl	8001d18 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2e:	f7fd f8f3 	bl	8001d18 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e1a5      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4940      	ldr	r1, [pc, #256]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
 8004b60:	e015      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x2b0>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fd f8d6 	bl	8001d18 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fd f8d2 	bl	8001d18 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e184      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d030      	beq.n	8004bfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba2:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <HAL_RCC_OscConfig+0x2b4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fd f8b6 	bl	8001d18 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fd f8b2 	bl	8001d18 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e164      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x200>
 8004bce:	e015      	b.n	8004bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd0:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <HAL_RCC_OscConfig+0x2b4>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd6:	f7fd f89f 	bl	8001d18 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bde:	f7fd f89b 	bl	8001d18 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e14d      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a0 	beq.w	8004d4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d121      	bne.n	8004c8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fd f861 	bl	8001d18 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	e011      	b.n	8004c7e <HAL_RCC_OscConfig+0x2ce>
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	42470000 	.word	0x42470000
 8004c64:	42470e80 	.word	0x42470e80
 8004c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fd f854 	bl	8001d18 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e106      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCC_OscConfig+0x4e4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
 8004c92:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a80      	ldr	r2, [pc, #512]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	e01c      	b.n	8004cda <HAL_RCC_OscConfig+0x32a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x312>
 8004ca8:	4b7b      	ldr	r3, [pc, #492]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a7a      	ldr	r2, [pc, #488]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cae:	f043 0304 	orr.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb4:	4b78      	ldr	r3, [pc, #480]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a77      	ldr	r2, [pc, #476]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc0:	e00b      	b.n	8004cda <HAL_RCC_OscConfig+0x32a>
 8004cc2:	4b75      	ldr	r3, [pc, #468]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a74      	ldr	r2, [pc, #464]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	4b72      	ldr	r3, [pc, #456]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a71      	ldr	r2, [pc, #452]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d015      	beq.n	8004d0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fd f819 	bl	8001d18 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fd f815 	bl	8001d18 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e0c5      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ee      	beq.n	8004cea <HAL_RCC_OscConfig+0x33a>
 8004d0c:	e014      	b.n	8004d38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f803 	bl	8001d18 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fc ffff 	bl	8001d18 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0af      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ee      	bne.n	8004d16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d105      	bne.n	8004d4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3e:	4b56      	ldr	r3, [pc, #344]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a55      	ldr	r2, [pc, #340]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 809b 	beq.w	8004e8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d54:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d05c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d141      	bne.n	8004dec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCC_OscConfig+0x4ec>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fc ffd3 	bl	8001d18 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d76:	f7fc ffcf 	bl	8001d18 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e081      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d88:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	019b      	lsls	r3, r3, #6
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	4937      	ldr	r1, [pc, #220]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x4ec>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fc ffa8 	bl	8001d18 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fc ffa4 	bl	8001d18 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e056      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x41c>
 8004dea:	e04e      	b.n	8004e8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_OscConfig+0x4ec>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fc ff91 	bl	8001d18 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fc ff8d 	bl	8001d18 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e03f      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0c:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x44a>
 8004e18:	e037      	b.n	8004e8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e032      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e26:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <HAL_RCC_OscConfig+0x4e8>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d028      	beq.n	8004e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d11a      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40007000 	.word	0x40007000
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	42470060 	.word	0x42470060

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0cc      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b68      	ldr	r3, [pc, #416]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d90c      	bls.n	8004edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b65      	ldr	r3, [pc, #404]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b63      	ldr	r3, [pc, #396]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0b8      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d020      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef4:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a58      	ldr	r2, [pc, #352]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	494d      	ldr	r1, [pc, #308]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d044      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d119      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e07f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d003      	beq.n	8004f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e06f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e067      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 0203 	bic.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4934      	ldr	r1, [pc, #208]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f90:	f7fc fec2 	bl	8001d18 <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f98:	f7fc febe 	bl	8001d18 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e04f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 020c 	and.w	r2, r3, #12
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d1eb      	bne.n	8004f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20c      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e032      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4916      	ldr	r1, [pc, #88]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	490e      	ldr	r1, [pc, #56]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005026:	f000 f821 	bl	800506c <HAL_RCC_GetSysClockFreq>
 800502a:	4602      	mov	r2, r0
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	490a      	ldr	r1, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	5ccb      	ldrb	r3, [r1, r3]
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7fc fe22 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023c00 	.word	0x40023c00
 800505c:	40023800 	.word	0x40023800
 8005060:	08008fa8 	.word	0x08008fa8
 8005064:	20000000 	.word	0x20000000
 8005068:	20000008 	.word	0x20000008

0800506c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800506c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	2300      	movs	r3, #0
 800507e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005084:	4b67      	ldr	r3, [pc, #412]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b08      	cmp	r3, #8
 800508e:	d00d      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x40>
 8005090:	2b08      	cmp	r3, #8
 8005092:	f200 80bd 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0x34>
 800509a:	2b04      	cmp	r3, #4
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800509e:	e0b7      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a0:	4b61      	ldr	r3, [pc, #388]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050a2:	60bb      	str	r3, [r7, #8]
       break;
 80050a4:	e0b7      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a6:	4b61      	ldr	r3, [pc, #388]	; (800522c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050a8:	60bb      	str	r3, [r7, #8]
      break;
 80050aa:	e0b4      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050ac:	4b5d      	ldr	r3, [pc, #372]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b6:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d04d      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c2:	4b58      	ldr	r3, [pc, #352]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	461a      	mov	r2, r3
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050d2:	f04f 0100 	mov.w	r1, #0
 80050d6:	ea02 0800 	and.w	r8, r2, r0
 80050da:	ea03 0901 	and.w	r9, r3, r1
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	014b      	lsls	r3, r1, #5
 80050ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050f0:	0142      	lsls	r2, r0, #5
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	ebb0 0008 	subs.w	r0, r0, r8
 80050fa:	eb61 0109 	sbc.w	r1, r1, r9
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	018b      	lsls	r3, r1, #6
 8005108:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800510c:	0182      	lsls	r2, r0, #6
 800510e:	1a12      	subs	r2, r2, r0
 8005110:	eb63 0301 	sbc.w	r3, r3, r1
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	00d9      	lsls	r1, r3, #3
 800511e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005122:	00d0      	lsls	r0, r2, #3
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	eb12 0208 	adds.w	r2, r2, r8
 800512c:	eb43 0309 	adc.w	r3, r3, r9
 8005130:	f04f 0000 	mov.w	r0, #0
 8005134:	f04f 0100 	mov.w	r1, #0
 8005138:	0259      	lsls	r1, r3, #9
 800513a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800513e:	0250      	lsls	r0, r2, #9
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f7fb f83a 	bl	80001c8 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e04a      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	ea02 0400 	and.w	r4, r2, r0
 8005176:	ea03 0501 	and.w	r5, r3, r1
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	014b      	lsls	r3, r1, #5
 8005188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800518c:	0142      	lsls	r2, r0, #5
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	1b00      	subs	r0, r0, r4
 8005194:	eb61 0105 	sbc.w	r1, r1, r5
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	018b      	lsls	r3, r1, #6
 80051a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051a6:	0182      	lsls	r2, r0, #6
 80051a8:	1a12      	subs	r2, r2, r0
 80051aa:	eb63 0301 	sbc.w	r3, r3, r1
 80051ae:	f04f 0000 	mov.w	r0, #0
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	00d9      	lsls	r1, r3, #3
 80051b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051bc:	00d0      	lsls	r0, r2, #3
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	1912      	adds	r2, r2, r4
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	0299      	lsls	r1, r3, #10
 80051d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051d6:	0290      	lsls	r0, r2, #10
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f7fa ffee 	bl	80001c8 <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4613      	mov	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005212:	60bb      	str	r3, [r7, #8]
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	68bb      	ldr	r3, [r7, #8]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	00f42400 	.word	0x00f42400
 800522c:	007a1200 	.word	0x007a1200

08005230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_RCC_GetHCLKFreq+0x14>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000000 	.word	0x20000000

08005248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800524c:	f7ff fff0 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0a9b      	lsrs	r3, r3, #10
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	; (800526c <HAL_RCC_GetPCLK1Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	08008fb8 	.word	0x08008fb8

08005270 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005294:	2b00      	cmp	r3, #0
 8005296:	d035      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005298:	4b62      	ldr	r3, [pc, #392]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800529e:	f7fc fd3b 	bl	8001d18 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052a6:	f7fc fd37 	bl	8001d18 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0b0      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b8:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	019a      	lsls	r2, r3, #6
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	071b      	lsls	r3, r3, #28
 80052d0:	4955      	ldr	r1, [pc, #340]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052d8:	4b52      	ldr	r3, [pc, #328]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052de:	f7fc fd1b 	bl	8001d18 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052e6:	f7fc fd17 	bl	8001d18 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e090      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f8:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8083 	beq.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b44      	ldr	r3, [pc, #272]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a43      	ldr	r2, [pc, #268]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800531c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3e      	ldr	r2, [pc, #248]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005338:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800533a:	f7fc fced 	bl	8001d18 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fc fce9 	bl	8001d18 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e062      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005354:	4b35      	ldr	r3, [pc, #212]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	429a      	cmp	r2, r3
 800537c:	d028      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537e:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005388:	4b29      	ldr	r3, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005394:	4a24      	ldr	r2, [pc, #144]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800539a:	4b23      	ldr	r3, [pc, #140]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d114      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fc fcb7 	bl	8001d18 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ac:	e00a      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fc fcb3 	bl	8001d18 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e02a      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ee      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053dc:	d10d      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	490d      	ldr	r1, [pc, #52]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	e005      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005400:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005404:	6093      	str	r3, [r2, #8]
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005412:	4905      	ldr	r1, [pc, #20]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	42470068 	.word	0x42470068
 8005428:	40023800 	.word	0x40023800
 800542c:	40007000 	.word	0x40007000
 8005430:	42470e40 	.word	0x42470e40

08005434 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d13e      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005452:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d12f      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800546a:	617b      	str	r3, [r7, #20]
          break;
 800546c:	e02f      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547a:	d108      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005484:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e007      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005496:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80054a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a4:	099b      	lsrs	r3, r3, #6
 80054a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b8:	0f1b      	lsrs	r3, r3, #28
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]
          break;
 80054c6:	e002      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
          break;
 80054cc:	bf00      	nop
        }
      }
      break;
 80054ce:	bf00      	nop
    }
  }
  return frequency;
 80054d0:	697b      	ldr	r3, [r7, #20]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
 80054e4:	00bb8000 	.word	0x00bb8000
 80054e8:	007a1200 	.word	0x007a1200
 80054ec:	00f42400 	.word	0x00f42400

080054f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07b      	b.n	80055fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005512:	d009      	beq.n	8005528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	61da      	str	r2, [r3, #28]
 800551a:	e005      	b.n	8005528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fb fb44 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ac:	ea42 0103 	orr.w	r1, r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	f003 0104 	and.w	r1, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f003 0210 	and.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b088      	sub	sp, #32
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_SPI_Transmit+0x22>
 8005620:	2302      	movs	r3, #2
 8005622:	e126      	b.n	8005872 <HAL_SPI_Transmit+0x270>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562c:	f7fc fb74 	bl	8001d18 <HAL_GetTick>
 8005630:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d002      	beq.n	8005648 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005642:	2302      	movs	r3, #2
 8005644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005646:	e10b      	b.n	8005860 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Transmit+0x52>
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005658:	e102      	b.n	8005860 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2203      	movs	r2, #3
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d10f      	bne.n	80056c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e8:	d14b      	bne.n	8005782 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_Transmit+0xf6>
 80056f2:	8afb      	ldrh	r3, [r7, #22]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d13e      	bne.n	8005776 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800571c:	e02b      	b.n	8005776 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d112      	bne.n	8005752 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	1c9a      	adds	r2, r3, #2
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005750:	e011      	b.n	8005776 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005752:	f7fc fae1 	bl	8001d18 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d803      	bhi.n	800576a <HAL_SPI_Transmit+0x168>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Transmit+0x16e>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005774:	e074      	b.n	8005860 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ce      	bne.n	800571e <HAL_SPI_Transmit+0x11c>
 8005780:	e04c      	b.n	800581c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_SPI_Transmit+0x18e>
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d140      	bne.n	8005812 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057b6:	e02c      	b.n	8005812 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d113      	bne.n	80057ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ec:	e011      	b.n	8005812 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ee:	f7fc fa93 	bl	8001d18 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d803      	bhi.n	8005806 <HAL_SPI_Transmit+0x204>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005804:	d102      	bne.n	800580c <HAL_SPI_Transmit+0x20a>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005810:	e026      	b.n	8005860 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1cd      	bne.n	80057b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f8b3 	bl	800598c <SPI_EndRxTxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e000      	b.n	8005860 <HAL_SPI_Transmit+0x25e>
  }

error:
 800585e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005870:	7ffb      	ldrb	r3, [r7, #31]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800588c:	f7fc fa44 	bl	8001d18 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4413      	add	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800589c:	f7fc fa3c 	bl	8001d18 <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	015b      	lsls	r3, r3, #5
 80058a8:	0d1b      	lsrs	r3, r3, #20
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b2:	e054      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ba:	d050      	beq.n	800595e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058bc:	f7fc fa2c 	bl	8001d18 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d13d      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d111      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	d004      	beq.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fe:	d107      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005918:	d10f      	bne.n	800593a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e017      	b.n	800597e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3b01      	subs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d19b      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000000 	.word	0x20000000

0800598c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <SPI_EndRxTxTransaction+0x7c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <SPI_EndRxTxTransaction+0x80>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	0d5b      	lsrs	r3, r3, #21
 80059a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b6:	d112      	bne.n	80059de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	2180      	movs	r1, #128	; 0x80
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff ff5a 	bl	800587c <SPI_WaitFlagStateUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e00f      	b.n	80059fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	d0f2      	beq.n	80059de <SPI_EndRxTxTransaction+0x52>
 80059f8:	e000      	b.n	80059fc <SPI_EndRxTxTransaction+0x70>
        break;
 80059fa:	bf00      	nop
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	165e9f81 	.word	0x165e9f81

08005a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a10:	b084      	sub	sp, #16
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	f107 001c 	add.w	r0, r7, #28
 8005a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d122      	bne.n	8005a6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d105      	bne.n	8005a62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9a0 	bl	8005da8 <USB_CoreReset>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
 8005a6c:	e01a      	b.n	8005aa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f994 	bl	8005da8 <USB_CoreReset>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
 8005a96:	e005      	b.n	8005aa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10b      	bne.n	8005ac2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f043 0206 	orr.w	r2, r3, #6
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ace:	b004      	add	sp, #16
 8005ad0:	4770      	bx	lr

08005ad2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 0201 	bic.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d115      	bne.n	8005b64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fc f8f3 	bl	8001d30 <HAL_Delay>
      ms++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f91a 	bl	8005d8a <USB_GetMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d01e      	beq.n	8005b9a <USB_SetCurrentMode+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b31      	cmp	r3, #49	; 0x31
 8005b60:	d9f0      	bls.n	8005b44 <USB_SetCurrentMode+0x2e>
 8005b62:	e01a      	b.n	8005b9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d115      	bne.n	8005b96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b76:	2001      	movs	r0, #1
 8005b78:	f7fc f8da 	bl	8001d30 <HAL_Delay>
      ms++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f901 	bl	8005d8a <USB_GetMode>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <USB_SetCurrentMode+0x84>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b31      	cmp	r3, #49	; 0x31
 8005b92:	d9f0      	bls.n	8005b76 <USB_SetCurrentMode+0x60>
 8005b94:	e001      	b.n	8005b9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e005      	b.n	8005ba6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b32      	cmp	r3, #50	; 0x32
 8005b9e:	d101      	bne.n	8005ba4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	019b      	lsls	r3, r3, #6
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <USB_FlushTxFifo+0x44>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e006      	b.n	8005be8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d0f1      	beq.n	8005bca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	00030d40 	.word	0x00030d40

08005bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2210      	movs	r2, #16
 8005c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <USB_FlushRxFifo+0x3c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e006      	b.n	8005c28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d0f1      	beq.n	8005c0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	00030d40 	.word	0x00030d40

08005c38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	460b      	mov	r3, r1
 8005c48:	71fb      	strb	r3, [r7, #7]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d123      	bne.n	8005ca6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c5e:	88bb      	ldrh	r3, [r7, #4]
 8005c60:	3303      	adds	r3, #3
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e018      	b.n	8005c9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	031a      	lsls	r2, r3, #12
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3301      	adds	r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3301      	adds	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3e2      	bcc.n	8005c6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3724      	adds	r7, #36	; 0x24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b08b      	sub	sp, #44	; 0x2c
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	e014      	b.n	8005d0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	3301      	adds	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	3301      	adds	r3, #1
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	3301      	adds	r3, #1
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3e6      	bcc.n	8005ce0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d12:	8bfb      	ldrh	r3, [r7, #30]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01e      	beq.n	8005d56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	461a      	mov	r2, r3
 8005d24:	f107 0310 	add.w	r3, r7, #16
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	3301      	adds	r3, #1
 8005d42:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	3301      	adds	r3, #1
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d4a:	8bfb      	ldrh	r3, [r7, #30]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d50:	8bfb      	ldrh	r3, [r7, #30]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ea      	bne.n	8005d2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	372c      	adds	r7, #44	; 0x2c
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0301 	and.w	r3, r3, #1
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <USB_CoreReset+0x60>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e01a      	b.n	8005dfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	daf3      	bge.n	8005db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <USB_CoreReset+0x60>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e006      	b.n	8005dfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d0f1      	beq.n	8005ddc <USB_CoreReset+0x34>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	00030d40 	.word	0x00030d40

08005e0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	f107 001c 	add.w	r0, r7, #28
 8005e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10a      	bne.n	8005e7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e72:	f043 0304 	orr.w	r3, r3, #4
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e014      	b.n	8005ea4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e009      	b.n	8005ea4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e9e:	f023 0304 	bic.w	r3, r3, #4
 8005ea2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005ea4:	2110      	movs	r1, #16
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fe82 	bl	8005bb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fea3 	bl	8005bf8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	e015      	b.n	8005ee4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d3e5      	bcc.n	8005eb8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <USB_HostInit+0x154>)
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <USB_HostInit+0x158>)
 8005f18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f1c:	e009      	b.n	8005f32 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <USB_HostInit+0x15c>)
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <USB_HostInit+0x160>)
 8005f2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f043 0210 	orr.w	r2, r3, #16
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <USB_HostInit+0x164>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f5c:	b004      	add	sp, #16
 8005f5e:	4770      	bx	lr
 8005f60:	01000200 	.word	0x01000200
 8005f64:	00e00300 	.word	0x00e00300
 8005f68:	00600080 	.word	0x00600080
 8005f6c:	004000e0 	.word	0x004000e0
 8005f70:	a3200008 	.word	0xa3200008

08005f74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fc2:	6053      	str	r3, [r2, #4]
 8005fc4:	e009      	b.n	8005fda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d106      	bne.n	8005fda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005fd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006008:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006016:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	f7fb fe89 	bl	8001d30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800602c:	200a      	movs	r0, #10
 800602e:	f7fb fe7f 	bl	8001d30 <HAL_Delay>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006060:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <USB_DriveVbus+0x44>
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d106      	bne.n	8006080 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800607a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800607e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608a:	d109      	bne.n	80060a0 <USB_DriveVbus+0x64>
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800609a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	0c5b      	lsrs	r3, r3, #17
 80060cc:	f003 0303 	and.w	r3, r3, #3
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	b29b      	uxth	r3, r3
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	4608      	mov	r0, r1
 800610a:	4611      	mov	r1, r2
 800610c:	461a      	mov	r2, r3
 800610e:	4603      	mov	r3, r0
 8006110:	70fb      	strb	r3, [r7, #3]
 8006112:	460b      	mov	r3, r1
 8006114:	70bb      	strb	r3, [r7, #2]
 8006116:	4613      	mov	r3, r2
 8006118:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	461a      	mov	r2, r3
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006134:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800613a:	2b03      	cmp	r3, #3
 800613c:	d87e      	bhi.n	800623c <USB_HC_Init+0x13c>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <USB_HC_Init+0x44>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006155 	.word	0x08006155
 8006148:	080061ff 	.word	0x080061ff
 800614c:	08006155 	.word	0x08006155
 8006150:	080061c1 	.word	0x080061c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	461a      	mov	r2, r3
 8006162:	f240 439d 	movw	r3, #1181	; 0x49d
 8006166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da10      	bge.n	8006192 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006190:	e057      	b.n	8006242 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d051      	beq.n	8006242 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061bc:	60d3      	str	r3, [r2, #12]
      break;
 80061be:	e040      	b.n	8006242 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	461a      	mov	r2, r3
 80061ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80061d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da34      	bge.n	8006246 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061fc:	e023      	b.n	8006246 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	f240 2325 	movw	r3, #549	; 0x225
 8006210:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006212:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da17      	bge.n	800624a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006238:	60d3      	str	r3, [r2, #12]
      }
      break;
 800623a:	e006      	b.n	800624a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
      break;
 8006240:	e004      	b.n	800624c <USB_HC_Init+0x14c>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <USB_HC_Init+0x14c>
      break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <USB_HC_Init+0x14c>
      break;
 800624a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	2101      	movs	r1, #1
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006266:	4313      	orrs	r3, r2
 8006268:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da03      	bge.n	8006286 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e001      	b.n	800628a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff0f 	bl	80060ae <USB_GetHostSpeed>
 8006290:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006292:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006296:	2b02      	cmp	r3, #2
 8006298:	d106      	bne.n	80062a8 <USB_HC_Init+0x1a8>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d003      	beq.n	80062a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e001      	b.n	80062ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ac:	787b      	ldrb	r3, [r7, #1]
 80062ae:	059b      	lsls	r3, r3, #22
 80062b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062b4:	78bb      	ldrb	r3, [r7, #2]
 80062b6:	02db      	lsls	r3, r3, #11
 80062b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062c2:	049b      	lsls	r3, r3, #18
 80062c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	0159      	lsls	r1, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	440b      	add	r3, r1
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80062ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d10f      	bne.n	8006312 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006310:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006312:	7ffb      	ldrb	r3, [r7, #31]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	; 0x30
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006338:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02d      	beq.n	80063a2 <USB_HC_StartXfer+0x86>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	791b      	ldrb	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d129      	bne.n	80063a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d117      	bne.n	8006384 <USB_HC_StartXfer+0x68>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	79db      	ldrb	r3, [r3, #7]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <USB_HC_StartXfer+0x48>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	79db      	ldrb	r3, [r3, #7]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d10f      	bne.n	8006384 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <USB_HC_StartXfer+0x86>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	795b      	ldrb	r3, [r3, #5]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d107      	bne.n	80063a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fa2f 	bl	80067fc <USB_DoPing>
      return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e0f8      	b.n	8006594 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	8912      	ldrh	r2, [r2, #8]
 80063b2:	4413      	add	r3, r2
 80063b4:	3b01      	subs	r3, #1
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	8912      	ldrh	r2, [r2, #8]
 80063ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80063be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063c2:	8b7b      	ldrh	r3, [r7, #26]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d90b      	bls.n	80063e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063c8:	8b7b      	ldrh	r3, [r7, #26]
 80063ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	8912      	ldrh	r2, [r2, #8]
 80063d2:	fb02 f203 	mul.w	r2, r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	611a      	str	r2, [r3, #16]
 80063da:	e001      	b.n	80063e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063dc:	2301      	movs	r3, #1
 80063de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	78db      	ldrb	r3, [r3, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	8912      	ldrh	r2, [r2, #8]
 80063ee:	fb02 f203 	mul.w	r2, r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	e003      	b.n	8006400 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800640a:	04d9      	lsls	r1, r3, #19
 800640c:	4b63      	ldr	r3, [pc, #396]	; (800659c <USB_HC_StartXfer+0x280>)
 800640e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006410:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	7a9b      	ldrb	r3, [r3, #10]
 8006416:	075b      	lsls	r3, r3, #29
 8006418:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	0148      	lsls	r0, r1, #5
 8006420:	6a39      	ldr	r1, [r7, #32]
 8006422:	4401      	add	r1, r0
 8006424:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006428:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800642a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68d9      	ldr	r1, [r3, #12]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	460a      	mov	r2, r1
 8006444:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	440a      	add	r2, r1
 8006474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006478:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800647c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	7e7b      	ldrb	r3, [r7, #25]
 800648e:	075b      	lsls	r3, r3, #29
 8006490:	69f9      	ldr	r1, [r7, #28]
 8006492:	0148      	lsls	r0, r1, #5
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	4401      	add	r1, r0
 8006498:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800649c:	4313      	orrs	r3, r2
 800649e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	78db      	ldrb	r3, [r3, #3]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e003      	b.n	80064d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	461a      	mov	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e04e      	b.n	8006594 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	78db      	ldrb	r3, [r3, #3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d149      	bne.n	8006592 <USB_HC_StartXfer+0x276>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d045      	beq.n	8006592 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	79db      	ldrb	r3, [r3, #7]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d830      	bhi.n	8006570 <USB_HC_StartXfer+0x254>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <USB_HC_StartXfer+0x1f8>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006525 	.word	0x08006525
 8006518:	08006549 	.word	0x08006549
 800651c:	08006525 	.word	0x08006525
 8006520:	08006549 	.word	0x08006549
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	3303      	adds	r3, #3
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800652e:	8afa      	ldrh	r2, [r7, #22]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	b29b      	uxth	r3, r3
 8006536:	429a      	cmp	r2, r3
 8006538:	d91c      	bls.n	8006574 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	619a      	str	r2, [r3, #24]
        }
        break;
 8006546:	e015      	b.n	8006574 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	3303      	adds	r3, #3
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006552:	8afa      	ldrh	r2, [r7, #22]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	b29b      	uxth	r3, r3
 800655e:	429a      	cmp	r2, r3
 8006560:	d90a      	bls.n	8006578 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	619a      	str	r2, [r3, #24]
        }
        break;
 800656e:	e003      	b.n	8006578 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006570:	bf00      	nop
 8006572:	e002      	b.n	800657a <USB_HC_StartXfer+0x25e>
        break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <USB_HC_StartXfer+0x25e>
        break;
 8006578:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	785a      	ldrb	r2, [r3, #1]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	b29b      	uxth	r3, r3
 8006588:	2000      	movs	r0, #0
 800658a:	9000      	str	r0, [sp, #0]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fb53 	bl	8005c38 <USB_WritePacket>
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3728      	adds	r7, #40	; 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	1ff80000 	.word	0x1ff80000

080065a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	b29b      	uxth	r3, r3
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b089      	sub	sp, #36	; 0x24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0c9b      	lsrs	r3, r3, #18
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	0fdb      	lsrs	r3, r3, #31
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b20      	cmp	r3, #32
 8006610:	d104      	bne.n	800661c <USB_HC_Halt+0x5a>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e0e8      	b.n	80067ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <USB_HC_Halt+0x66>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d173      	bne.n	8006710 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	4413      	add	r3, r2
 8006630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	440a      	add	r2, r1
 800663e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006646:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 80cb 	bne.w	80067ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d143      	bne.n	80066ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006680:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	440a      	add	r2, r1
 8006698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800669c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ce:	d81d      	bhi.n	800670c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e6:	d0ec      	beq.n	80066c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e8:	e080      	b.n	80067ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006708:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800670a:	e06f      	b.n	80067ec <USB_HC_Halt+0x22a>
            break;
 800670c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800670e:	e06d      	b.n	80067ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800672e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d143      	bne.n	80067c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	4413      	add	r3, r2
 8006748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	440a      	add	r2, r1
 8006756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800675a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800675e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	440a      	add	r2, r1
 8006796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800679a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	3301      	adds	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ac:	d81d      	bhi.n	80067ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c4:	d0ec      	beq.n	80067a0 <USB_HC_Halt+0x1de>
 80067c6:	e011      	b.n	80067ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e000      	b.n	80067ec <USB_HC_Halt+0x22a>
          break;
 80067ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3724      	adds	r7, #36	; 0x24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006810:	2301      	movs	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	04da      	lsls	r2, r3, #19
 8006818:	4b15      	ldr	r3, [pc, #84]	; (8006870 <USB_DoPing+0x74>)
 800681a:	4013      	ands	r3, r2
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	440a      	add	r2, r1
 8006824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006844:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685a:	461a      	mov	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	1ff80000 	.word	0x1ff80000

08006874 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff f935 	bl	8005af4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff f98f 	bl	8005bb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff f9b0 	bl	8005bf8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	e01f      	b.n	80068de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3301      	adds	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b0f      	cmp	r3, #15
 80068e2:	d9dc      	bls.n	800689e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	e034      	b.n	8006954 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006900:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006908:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006910:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3301      	adds	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006930:	d80c      	bhi.n	800694c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006948:	d0ec      	beq.n	8006924 <USB_StopHost+0xb0>
 800694a:	e000      	b.n	800694e <USB_StopHost+0xda>
        break;
 800694c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	3301      	adds	r3, #1
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d9c7      	bls.n	80068ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006966:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800696e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f8ae 	bl	8005ad2 <USB_EnableGlobalInt>

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b089      	sub	sp, #36	; 0x24
 8006984:	af04      	add	r7, sp, #16
 8006986:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006988:	2301      	movs	r3, #1
 800698a:	2202      	movs	r2, #2
 800698c:	2102      	movs	r1, #2
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc66 	bl	8007260 <USBH_FindInterface>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2bff      	cmp	r3, #255	; 0xff
 800699c:	d002      	beq.n	80069a4 <USBH_CDC_InterfaceInit+0x24>
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d901      	bls.n	80069a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e13d      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc3b 	bl	8007228 <USBH_SelectInterface>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069bc:	2302      	movs	r3, #2
 80069be:	e131      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069c6:	2050      	movs	r0, #80	; 0x50
 80069c8:	f002 fa00 	bl	8008dcc <malloc>
 80069cc:	4603      	mov	r3, r0
 80069ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e11f      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069e4:	2250      	movs	r2, #80	; 0x50
 80069e6:	2100      	movs	r1, #0
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	f002 f9ff 	bl	8008dec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	211a      	movs	r1, #26
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da15      	bge.n	8006a32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	211a      	movs	r1, #26
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	211a      	movs	r1, #26
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fe32 	bl	80086a2 <USBH_AllocPipe>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	7819      	ldrb	r1, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	7858      	ldrb	r0, [r3, #1]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	8952      	ldrh	r2, [r2, #10]
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	2203      	movs	r2, #3
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4623      	mov	r3, r4
 8006a68:	4602      	mov	r2, r0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fdea 	bl	8008644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2200      	movs	r2, #0
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 f8f9 	bl	8008c70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2200      	movs	r2, #0
 8006a82:	210a      	movs	r1, #10
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fbeb 	bl	8007260 <USBH_FindInterface>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2bff      	cmp	r3, #255	; 0xff
 8006a92:	d002      	beq.n	8006a9a <USBH_CDC_InterfaceInit+0x11a>
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d901      	bls.n	8006a9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0c2      	b.n	8006c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	211a      	movs	r1, #26
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da16      	bge.n	8006ae4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	211a      	movs	r1, #26
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	211a      	movs	r1, #26
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	835a      	strh	r2, [r3, #26]
 8006ae2:	e015      	b.n	8006b10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	211a      	movs	r1, #26
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	211a      	movs	r1, #26
 8006b00:	fb01 f303 	mul.w	r3, r1, r3
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b0a:	881a      	ldrh	r2, [r3, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	211a      	movs	r1, #26
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b25b      	sxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da16      	bge.n	8006b56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	211a      	movs	r1, #26
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	211a      	movs	r1, #26
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	835a      	strh	r2, [r3, #26]
 8006b54:	e015      	b.n	8006b82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	211a      	movs	r1, #26
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	211a      	movs	r1, #26
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	7b9b      	ldrb	r3, [r3, #14]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fd8a 	bl	80086a2 <USBH_AllocPipe>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	7bdb      	ldrb	r3, [r3, #15]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fd80 	bl	80086a2 <USBH_AllocPipe>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7b59      	ldrb	r1, [r3, #13]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	7b98      	ldrb	r0, [r3, #14]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	8b12      	ldrh	r2, [r2, #24]
 8006bc2:	9202      	str	r2, [sp, #8]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	4623      	mov	r3, r4
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fd38 	bl	8008644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7b19      	ldrb	r1, [r3, #12]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	7bd8      	ldrb	r0, [r3, #15]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	8b52      	ldrh	r2, [r2, #26]
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	9201      	str	r2, [sp, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fd23 	bl	8008644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	7b5b      	ldrb	r3, [r3, #13]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 f82e 	bl	8008c70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7b1b      	ldrb	r3, [r3, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 f827 	bl	8008c70 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd90      	pop	{r4, r7, pc}

08006c2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00e      	beq.n	8006c64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fd18 	bl	8008682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fd43 	bl	80086e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7b1b      	ldrb	r3, [r3, #12]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fd05 	bl	8008682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fd30 	bl	80086e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7b5b      	ldrb	r3, [r3, #13]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	7b5b      	ldrb	r3, [r3, #13]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fcf2 	bl	8008682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fd1d 	bl	80086e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f002 f889 	bl	8008ddc <free>
    phost->pActiveClass->pData = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3340      	adds	r3, #64	; 0x40
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8b1 	bl	8006e5e <GetLineCoding>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d12:	7afb      	ldrb	r3, [r7, #11]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d877      	bhi.n	8006e30 <USBH_CDC_Process+0x114>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBH_CDC_Process+0x2c>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d5d 	.word	0x08006d5d
 8006d4c:	08006d63 	.word	0x08006d63
 8006d50:	08006d93 	.word	0x08006d93
 8006d54:	08006e07 	.word	0x08006e07
 8006d58:	08006e15 	.word	0x08006e15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e06d      	b.n	8006e3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f897 	bl	8006e9c <SetLineCoding>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d80:	e058      	b.n	8006e34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d055      	beq.n	8006e34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d90:	e050      	b.n	8006e34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3340      	adds	r3, #64	; 0x40
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f860 	bl	8006e5e <GetLineCoding>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d126      	bne.n	8006df6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	791b      	ldrb	r3, [r3, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d13b      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d133      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d12b      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d124      	bne.n	8006e38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f958 	bl	80070a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006df4:	e020      	b.n	8006e38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d01d      	beq.n	8006e38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e04:	e018      	b.n	8006e38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f867 	bl	8006eda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8da 	bl	8006fc6 <CDC_ProcessReception>
      break;
 8006e12:	e014      	b.n	8006e3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 ffe3 	bl	8007de2 <USBH_ClrFeature>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e2e:	e005      	b.n	8006e3c <USBH_CDC_Process+0x120>

    default:
      break;
 8006e30:	bf00      	nop
 8006e32:	e004      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e34:	bf00      	nop
 8006e36:	e002      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e000      	b.n	8006e3e <USBH_CDC_Process+0x122>
      break;
 8006e3c:	bf00      	nop

  }

  return status;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22a1      	movs	r2, #161	; 0xa1
 8006e6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2221      	movs	r2, #33	; 0x21
 8006e72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2207      	movs	r2, #7
 8006e84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2207      	movs	r2, #7
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f988 	bl	80081a2 <USBH_CtlReq>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2221      	movs	r2, #33	; 0x21
 8006eaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2207      	movs	r2, #7
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f969 	bl	80081a2 <USBH_CtlReq>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af02      	add	r7, sp, #8
 8006ee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d002      	beq.n	8006f00 <CDC_ProcessTransmission+0x26>
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d023      	beq.n	8006f46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006efe:	e05e      	b.n	8006fbe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	8b12      	ldrh	r2, [r2, #24]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d90b      	bls.n	8006f24 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	69d9      	ldr	r1, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8b1a      	ldrh	r2, [r3, #24]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	7b5b      	ldrb	r3, [r3, #13]
 8006f18:	2001      	movs	r0, #1
 8006f1a:	9000      	str	r0, [sp, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fb4e 	bl	80085be <USBH_BulkSendData>
 8006f22:	e00b      	b.n	8006f3c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	7b5b      	ldrb	r3, [r3, #13]
 8006f32:	2001      	movs	r0, #1
 8006f34:	9000      	str	r0, [sp, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 fb41 	bl	80085be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f44:	e03b      	b.n	8006fbe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	7b5b      	ldrb	r3, [r3, #13]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fe65 	bl	8008c1c <USBH_LL_GetURBState>
 8006f52:	4603      	mov	r3, r0
 8006f54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d128      	bne.n	8006fae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	8b12      	ldrh	r2, [r2, #24]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d90e      	bls.n	8006f86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	8b12      	ldrh	r2, [r2, #24]
 8006f70:	1a9a      	subs	r2, r3, r2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	8b12      	ldrh	r2, [r2, #24]
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	61da      	str	r2, [r3, #28]
 8006f84:	e002      	b.n	8006f8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f9c:	e00e      	b.n	8006fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f868 	bl	800707c <USBH_CDC_TransmitCallback>
      break;
 8006fac:	e006      	b.n	8006fbc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d103      	bne.n	8006fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fbc:	bf00      	nop
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d002      	beq.n	8006fec <CDC_ProcessReception+0x26>
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d00e      	beq.n	8007008 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fea:	e043      	b.n	8007074 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	6a19      	ldr	r1, [r3, #32]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	8b5a      	ldrh	r2, [r3, #26]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fb05 	bl	8008608 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2204      	movs	r2, #4
 8007002:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007006:	e035      	b.n	8007074 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	7b1b      	ldrb	r3, [r3, #12]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fe04 	bl	8008c1c <USBH_LL_GetURBState>
 8007014:	4603      	mov	r3, r0
 8007016:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007018:	7cfb      	ldrb	r3, [r7, #19]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d129      	bne.n	8007072 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	7b1b      	ldrb	r3, [r3, #12]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fd67 	bl	8008af8 <USBH_LL_GetLastXferSize>
 800702a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d016      	beq.n	8007064 <CDC_ProcessReception+0x9e>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	8b5b      	ldrh	r3, [r3, #26]
 800703a:	461a      	mov	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4293      	cmp	r3, r2
 8007040:	d910      	bls.n	8007064 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad2      	subs	r2, r2, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a1a      	ldr	r2, [r3, #32]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	441a      	add	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007062:	e006      	b.n	8007072 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f80f 	bl	8007090 <USBH_CDC_ReceiveCallback>
      break;
 8007072:	bf00      	nop
  }
}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e029      	b.n	8007124 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	79fa      	ldrb	r2, [r7, #7]
 80070d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f81f 	bl	800712c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 fc37 	bl	8008990 <USBH_LL_Init>

  return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e009      	b.n	8007152 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	33e0      	adds	r3, #224	; 0xe0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	2200      	movs	r2, #0
 800714a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b0e      	cmp	r3, #14
 8007156:	d9f2      	bls.n	800713e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e009      	b.n	8007172 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007178:	d3f1      	bcc.n	800715e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2240      	movs	r2, #64	; 0x40
 800719e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d016      	beq.n	8007216 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10e      	bne.n	8007210 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071f8:	1c59      	adds	r1, r3, #1
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	33de      	adds	r3, #222	; 0xde
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
 800720e:	e004      	b.n	800721a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007210:	2302      	movs	r3, #2
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	e001      	b.n	800721a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007216:	2302      	movs	r3, #2
 8007218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	429a      	cmp	r2, r3
 8007242:	d204      	bcs.n	800724e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800724c:	e001      	b.n	8007252 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800724e:	2302      	movs	r3, #2
 8007250:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	4603      	mov	r3, r0
 8007270:	70fb      	strb	r3, [r7, #3]
 8007272:	460b      	mov	r3, r1
 8007274:	70bb      	strb	r3, [r7, #2]
 8007276:	4613      	mov	r3, r2
 8007278:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007288:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800728a:	e025      	b.n	80072d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	221a      	movs	r2, #26
 8007290:	fb02 f303 	mul.w	r3, r2, r3
 8007294:	3308      	adds	r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	3302      	adds	r3, #2
 800729c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	795b      	ldrb	r3, [r3, #5]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d002      	beq.n	80072ae <USBH_FindInterface+0x4e>
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	2bff      	cmp	r3, #255	; 0xff
 80072ac:	d111      	bne.n	80072d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072b2:	78ba      	ldrb	r2, [r7, #2]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d002      	beq.n	80072be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072b8:	78bb      	ldrb	r3, [r7, #2]
 80072ba:	2bff      	cmp	r3, #255	; 0xff
 80072bc:	d109      	bne.n	80072d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072c2:	787a      	ldrb	r2, [r7, #1]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d002      	beq.n	80072ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072c8:	787b      	ldrb	r3, [r7, #1]
 80072ca:	2bff      	cmp	r3, #255	; 0xff
 80072cc:	d101      	bne.n	80072d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	e006      	b.n	80072e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	3301      	adds	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d9d6      	bls.n	800728c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072de:	23ff      	movs	r3, #255	; 0xff
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fb87 	bl	8008a08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fca0 	bl	8008c42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af04      	add	r7, sp, #16
 8007312:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007314:	2302      	movs	r3, #2
 8007316:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2203      	movs	r2, #3
 800732c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b0b      	cmp	r3, #11
 8007336:	f200 81b3 	bhi.w	80076a0 <USBH_Process+0x394>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <USBH_Process+0x34>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007371 	.word	0x08007371
 8007344:	080073a3 	.word	0x080073a3
 8007348:	0800740b 	.word	0x0800740b
 800734c:	0800763b 	.word	0x0800763b
 8007350:	080076a1 	.word	0x080076a1
 8007354:	080074af 	.word	0x080074af
 8007358:	080075e1 	.word	0x080075e1
 800735c:	080074e5 	.word	0x080074e5
 8007360:	08007505 	.word	0x08007505
 8007364:	08007525 	.word	0x08007525
 8007368:	08007553 	.word	0x08007553
 800736c:	08007623 	.word	0x08007623
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8193 	beq.w	80076a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007384:	20c8      	movs	r0, #200	; 0xc8
 8007386:	f001 fca3 	bl	8008cd0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fb99 	bl	8008ac2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073a0:	e180      	b.n	80076a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d107      	bne.n	80073bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073ba:	e182      	b.n	80076c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c6:	d914      	bls.n	80073f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d903      	bls.n	80073ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	220d      	movs	r2, #13
 80073e6:	701a      	strb	r2, [r3, #0]
      break;
 80073e8:	e16b      	b.n	80076c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]
      break;
 80073f0:	e167      	b.n	80076c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073f8:	f103 020a 	add.w	r2, r3, #10
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007402:	200a      	movs	r0, #10
 8007404:	f001 fc64 	bl	8008cd0 <USBH_Delay>
      break;
 8007408:	e15b      	b.n	80076c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800741a:	2104      	movs	r1, #4
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007420:	2064      	movs	r0, #100	; 0x64
 8007422:	f001 fc55 	bl	8008cd0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fb24 	bl	8008a74 <USBH_LL_GetSpeed>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2205      	movs	r2, #5
 800743a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800743c:	2100      	movs	r1, #0
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 f92f 	bl	80086a2 <USBH_AllocPipe>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800744c:	2180      	movs	r1, #128	; 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 f927 	bl	80086a2 <USBH_AllocPipe>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7919      	ldrb	r1, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007470:	b292      	uxth	r2, r2
 8007472:	9202      	str	r2, [sp, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	9201      	str	r2, [sp, #4]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4603      	mov	r3, r0
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 f8e0 	bl	8008644 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7959      	ldrb	r1, [r3, #5]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007498:	b292      	uxth	r2, r2
 800749a:	9202      	str	r2, [sp, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	9201      	str	r2, [sp, #4]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	4603      	mov	r3, r0
 80074a4:	2200      	movs	r2, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f8cc 	bl	8008644 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ac:	e109      	b.n	80076c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f90c 	bl	80076cc <USBH_HandleEnum>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 80f3 	bne.w	80076a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d103      	bne.n	80074dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2208      	movs	r2, #8
 80074d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074da:	e0e5      	b.n	80076a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2207      	movs	r2, #7
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	e0e1      	b.n	80076a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80de 	beq.w	80076ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f6:	2101      	movs	r1, #1
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2208      	movs	r2, #8
 8007500:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007502:	e0d3      	b.n	80076ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800750a:	b29b      	uxth	r3, r3
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc20 	bl	8007d54 <USBH_SetCfg>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	f040 80ca 	bne.w	80076b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2209      	movs	r2, #9
 8007520:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007522:	e0c5      	b.n	80076b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc30 	bl	8007d9a <USBH_SetFeature>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 80b9 	bne.w	80076b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220a      	movs	r2, #10
 8007546:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007548:	e0b4      	b.n	80076b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220a      	movs	r2, #10
 800754e:	701a      	strb	r2, [r3, #0]
      break;
 8007550:	e0b0      	b.n	80076b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80ad 	beq.w	80076b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	e016      	b.n	800759a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800756c:	7bfa      	ldrb	r2, [r7, #15]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32de      	adds	r2, #222	; 0xde
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	791a      	ldrb	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800757e:	429a      	cmp	r2, r3
 8007580:	d108      	bne.n	8007594 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	32de      	adds	r2, #222	; 0xde
 8007588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007592:	e005      	b.n	80075a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	3301      	adds	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0e5      	beq.n	800756c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2206      	movs	r2, #6
 80075c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c8:	2103      	movs	r1, #3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075ce:	e073      	b.n	80076b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	220d      	movs	r2, #13
 80075d4:	701a      	strb	r2, [r3, #0]
      break;
 80075d6:	e06f      	b.n	80076b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	220d      	movs	r2, #13
 80075dc:	701a      	strb	r2, [r3, #0]
      break;
 80075de:	e06b      	b.n	80076b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	220b      	movs	r2, #11
 8007606:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007608:	e058      	b.n	80076bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d154      	bne.n	80076bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	220d      	movs	r2, #13
 8007616:	701a      	strb	r2, [r3, #0]
      break;
 8007618:	e050      	b.n	80076bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	220d      	movs	r2, #13
 800761e:	701a      	strb	r2, [r3, #0]
      break;
 8007620:	e04c      	b.n	80076bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d049      	beq.n	80076c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
      }
      break;
 8007638:	e042      	b.n	80076c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff fd72 	bl	800712c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007676:	2105      	movs	r1, #5
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d107      	bne.n	8007698 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fe2b 	bl	80072ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007696:	e014      	b.n	80076c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f9b5 	bl	8008a08 <USBH_LL_Start>
      break;
 800769e:	e010      	b.n	80076c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076a0:	bf00      	nop
 80076a2:	e00e      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076a4:	bf00      	nop
 80076a6:	e00c      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076a8:	bf00      	nop
 80076aa:	e00a      	b.n	80076c2 <USBH_Process+0x3b6>
    break;
 80076ac:	bf00      	nop
 80076ae:	e008      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076b0:	bf00      	nop
 80076b2:	e006      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <USBH_Process+0x3b6>
      break;
 80076c0:	bf00      	nop
  }
  return USBH_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af04      	add	r7, sp, #16
 80076d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076d8:	2301      	movs	r3, #1
 80076da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	2b07      	cmp	r3, #7
 80076e2:	f200 81c1 	bhi.w	8007a68 <USBH_HandleEnum+0x39c>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBH_HandleEnum+0x20>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	080077cb 	.word	0x080077cb
 80076f4:	08007835 	.word	0x08007835
 80076f8:	080078c3 	.word	0x080078c3
 80076fc:	0800792d 	.word	0x0800792d
 8007700:	0800799d 	.word	0x0800799d
 8007704:	080079e3 	.word	0x080079e3
 8007708:	08007a29 	.word	0x08007a29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800770c:	2108      	movs	r1, #8
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa50 	bl	8007bb4 <USBH_Get_DevDesc>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d130      	bne.n	8007780 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7919      	ldrb	r1, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007742:	b292      	uxth	r2, r2
 8007744:	9202      	str	r2, [sp, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4603      	mov	r3, r0
 800774e:	2280      	movs	r2, #128	; 0x80
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff77 	bl	8008644 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7959      	ldrb	r1, [r3, #5]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776a:	b292      	uxth	r2, r2
 800776c:	9202      	str	r2, [sp, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	9201      	str	r2, [sp, #4]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	4603      	mov	r3, r0
 8007776:	2200      	movs	r2, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 ff63 	bl	8008644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800777e:	e175      	b.n	8007a6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b03      	cmp	r3, #3
 8007784:	f040 8172 	bne.w	8007a6c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800778e:	3301      	adds	r3, #1
 8007790:	b2da      	uxtb	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d903      	bls.n	80077aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	220d      	movs	r2, #13
 80077a6:	701a      	strb	r2, [r3, #0]
      break;
 80077a8:	e160      	b.n	8007a6c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	795b      	ldrb	r3, [r3, #5]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 ff97 	bl	80086e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ff91 	bl	80086e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	701a      	strb	r2, [r3, #0]
      break;
 80077c8:	e150      	b.n	8007a6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077ca:	2112      	movs	r1, #18
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9f1 	bl	8007bb4 <USBH_Get_DevDesc>
 80077d2:	4603      	mov	r3, r0
 80077d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077e2:	e145      	b.n	8007a70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	f040 8142 	bne.w	8007a70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f2:	3301      	adds	r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007802:	2b03      	cmp	r3, #3
 8007804:	d903      	bls.n	800780e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220d      	movs	r2, #13
 800780a:	701a      	strb	r2, [r3, #0]
      break;
 800780c:	e130      	b.n	8007a70 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	795b      	ldrb	r3, [r3, #5]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 ff65 	bl	80086e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	791b      	ldrb	r3, [r3, #4]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 ff5f 	bl	80086e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
      break;
 8007832:	e11d      	b.n	8007a70 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007834:	2101      	movs	r1, #1
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa68 	bl	8007d0c <USBH_SetAddress>
 800783c:	4603      	mov	r3, r0
 800783e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d132      	bne.n	80078ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007846:	2002      	movs	r0, #2
 8007848:	f001 fa42 	bl	8008cd0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7919      	ldrb	r1, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800786e:	b292      	uxth	r2, r2
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4603      	mov	r3, r0
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fee1 	bl	8008644 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7959      	ldrb	r1, [r3, #5]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007896:	b292      	uxth	r2, r2
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4603      	mov	r3, r0
 80078a2:	2200      	movs	r2, #0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fecd 	bl	8008644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078aa:	e0e3      	b.n	8007a74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	f040 80e0 	bne.w	8007a74 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	220d      	movs	r2, #13
 80078b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	705a      	strb	r2, [r3, #1]
      break;
 80078c0:	e0d8      	b.n	8007a74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078c2:	2109      	movs	r1, #9
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f99d 	bl	8007c04 <USBH_Get_CfgDesc>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078da:	e0cd      	b.n	8007a78 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	f040 80ca 	bne.w	8007a78 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ea:	3301      	adds	r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d903      	bls.n	8007906 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220d      	movs	r2, #13
 8007902:	701a      	strb	r2, [r3, #0]
      break;
 8007904:	e0b8      	b.n	8007a78 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fee9 	bl	80086e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	791b      	ldrb	r3, [r3, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fee3 	bl	80086e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	e0a5      	b.n	8007a78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f965 	bl	8007c04 <USBH_Get_CfgDesc>
 800793a:	4603      	mov	r3, r0
 800793c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2205      	movs	r2, #5
 8007948:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800794a:	e097      	b.n	8007a7c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b03      	cmp	r3, #3
 8007950:	f040 8094 	bne.w	8007a7c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800795a:	3301      	adds	r3, #1
 800795c:	b2da      	uxtb	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796a:	2b03      	cmp	r3, #3
 800796c:	d903      	bls.n	8007976 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220d      	movs	r2, #13
 8007972:	701a      	strb	r2, [r3, #0]
      break;
 8007974:	e082      	b.n	8007a7c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 feb1 	bl	80086e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 feab 	bl	80086e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e06f      	b.n	8007a7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d019      	beq.n	80079da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079b2:	23ff      	movs	r3, #255	; 0xff
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f949 	bl	8007c4c <USBH_Get_StringDesc>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d103      	bne.n	80079cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2206      	movs	r2, #6
 80079c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079ca:	e059      	b.n	8007a80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d156      	bne.n	8007a80 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2206      	movs	r2, #6
 80079d6:	705a      	strb	r2, [r3, #1]
      break;
 80079d8:	e052      	b.n	8007a80 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2206      	movs	r2, #6
 80079de:	705a      	strb	r2, [r3, #1]
      break;
 80079e0:	e04e      	b.n	8007a80 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d019      	beq.n	8007a20 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079f8:	23ff      	movs	r3, #255	; 0xff
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f926 	bl	8007c4c <USBH_Get_StringDesc>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a10:	e038      	b.n	8007a84 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d135      	bne.n	8007a84 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	705a      	strb	r2, [r3, #1]
      break;
 8007a1e:	e031      	b.n	8007a84 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2207      	movs	r2, #7
 8007a24:	705a      	strb	r2, [r3, #1]
      break;
 8007a26:	e02d      	b.n	8007a84 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d017      	beq.n	8007a62 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a3e:	23ff      	movs	r3, #255	; 0xff
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f903 	bl	8007c4c <USBH_Get_StringDesc>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a54:	e018      	b.n	8007a88 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d115      	bne.n	8007a88 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e012      	b.n	8007a88 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	e00f      	b.n	8007a88 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a68:	bf00      	nop
 8007a6a:	e00e      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e00c      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a70:	bf00      	nop
 8007a72:	e00a      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a74:	bf00      	nop
 8007a76:	e008      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e006      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e004      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a80:	bf00      	nop
 8007a82:	e002      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a84:	bf00      	nop
 8007a86:	e000      	b.n	8007a8a <USBH_HandleEnum+0x3be>
      break;
 8007a88:	bf00      	nop
  }
  return Status;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f804 	bl	8007ad6 <USBH_HandleSof>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b0b      	cmp	r3, #11
 8007ae6:	d10a      	bne.n	8007afe <USBH_HandleSof+0x28>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
  }
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007b16:	bf00      	nop
}
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b32:	bf00      	nop
}
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 ff56 	bl	8008a3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fda3 	bl	80086e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	795b      	ldrb	r3, [r3, #5]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fd9d 	bl	80086e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f864 	bl	8007ca2 <USBH_GetDescriptor>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f000 f918 	bl	8007e2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	331c      	adds	r3, #28
 8007c14:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f83d 	bl	8007ca2 <USBH_GetDescriptor>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	72fb      	strb	r3, [r7, #11]
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f964 	bl	8007f0a <USBH_ParseCfgDesc>
  }

  return status;
 8007c42:	7afb      	ldrb	r3, [r7, #11]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	461a      	mov	r2, r3
 8007c58:	460b      	mov	r3, r1
 8007c5a:	72fb      	strb	r3, [r7, #11]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c68:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c70:	893b      	ldrh	r3, [r7, #8]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	2100      	movs	r1, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f812 	bl	8007ca2 <USBH_GetDescriptor>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c8e:	893a      	ldrh	r2, [r7, #8]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fa37 	bl	8008106 <USBH_ParseStringDesc>
  }

  return status;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	72fb      	strb	r3, [r7, #11]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d11c      	bne.n	8007cf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cbc:	7afb      	ldrb	r3, [r7, #11]
 8007cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2206      	movs	r2, #6
 8007ccc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	893a      	ldrh	r2, [r7, #8]
 8007cd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cde:	d104      	bne.n	8007cea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ce6:	829a      	strh	r2, [r3, #20]
 8007ce8:	e002      	b.n	8007cf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8b3a      	ldrh	r2, [r7, #24]
 8007cf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cf6:	8b3b      	ldrh	r3, [r7, #24]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa50 	bl	80081a2 <USBH_CtlReq>
 8007d02:	4603      	mov	r3, r0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	789b      	ldrb	r3, [r3, #2]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d10f      	bne.n	8007d40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2205      	movs	r2, #5
 8007d2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d40:	2200      	movs	r2, #0
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa2c 	bl	80081a2 <USBH_CtlReq>
 8007d4a:	4603      	mov	r3, r0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	789b      	ldrb	r3, [r3, #2]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10e      	bne.n	8007d86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2209      	movs	r2, #9
 8007d72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	887a      	ldrh	r2, [r7, #2]
 8007d78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa09 	bl	80081a2 <USBH_CtlReq>
 8007d90:	4603      	mov	r3, r0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10f      	bne.n	8007dce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2203      	movs	r2, #3
 8007db8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9e5 	bl	80081a2 <USBH_CtlReq>
 8007dd8:	4603      	mov	r3, r0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	789b      	ldrb	r3, [r3, #2]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d10f      	bne.n	8007e16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9c1 	bl	80081a2 <USBH_CtlReq>
 8007e20:	4603      	mov	r3, r0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	4613      	mov	r3, r2
 8007e36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	785a      	ldrb	r2, [r3, #1]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	3302      	adds	r3, #2
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3303      	adds	r3, #3
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	791a      	ldrb	r2, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	795a      	ldrb	r2, [r3, #5]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	799a      	ldrb	r2, [r3, #6]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	79da      	ldrb	r2, [r3, #7]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d939      	bls.n	8007efe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3309      	adds	r3, #9
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	330a      	adds	r3, #10
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	330b      	adds	r3, #11
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	330d      	adds	r3, #13
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	7b9a      	ldrb	r2, [r3, #14]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	7bda      	ldrb	r2, [r3, #15]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	7c1a      	ldrb	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7c5a      	ldrb	r2, [r3, #17]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	745a      	strb	r2, [r3, #17]
  }
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b08a      	sub	sp, #40	; 0x28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4613      	mov	r3, r2
 8007f16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	785a      	ldrb	r2, [r3, #1]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	3302      	adds	r3, #2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3303      	adds	r3, #3
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	791a      	ldrb	r2, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	795a      	ldrb	r2, [r3, #5]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	799a      	ldrb	r2, [r3, #6]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	79da      	ldrb	r2, [r3, #7]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	7a1a      	ldrb	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d95f      	bls.n	8008046 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f86:	2309      	movs	r3, #9
 8007f88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f8e:	e051      	b.n	8008034 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f90:	f107 0316 	add.w	r3, r7, #22
 8007f94:	4619      	mov	r1, r3
 8007f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f98:	f000 f8e8 	bl	800816c <USBH_GetNextDesc>
 8007f9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d146      	bne.n	8008034 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007faa:	221a      	movs	r2, #26
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fbc:	69f8      	ldr	r0, [r7, #28]
 8007fbe:	f000 f846 	bl	800804e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fcc:	e022      	b.n	8008014 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fce:	f107 0316 	add.w	r3, r7, #22
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fd6:	f000 f8c9 	bl	800816c <USBH_GetNextDesc>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d117      	bne.n	8008014 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fe8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007fec:	3201      	adds	r2, #1
 8007fee:	00d2      	lsls	r2, r2, #3
 8007ff0:	211a      	movs	r1, #26
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3304      	adds	r3, #4
 8008000:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008004:	69b8      	ldr	r0, [r7, #24]
 8008006:	f000 f851 	bl	80080ac <USBH_ParseEPDesc>
            ep_ix++;
 800800a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800800e:	3301      	adds	r3, #1
 8008010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800801c:	429a      	cmp	r2, r3
 800801e:	d204      	bcs.n	800802a <USBH_ParseCfgDesc+0x120>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	885a      	ldrh	r2, [r3, #2]
 8008024:	8afb      	ldrh	r3, [r7, #22]
 8008026:	429a      	cmp	r2, r3
 8008028:	d8d1      	bhi.n	8007fce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800802a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800802e:	3301      	adds	r3, #1
 8008030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008038:	2b01      	cmp	r3, #1
 800803a:	d804      	bhi.n	8008046 <USBH_ParseCfgDesc+0x13c>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	885a      	ldrh	r2, [r3, #2]
 8008040:	8afb      	ldrh	r3, [r7, #22]
 8008042:	429a      	cmp	r2, r3
 8008044:	d8a4      	bhi.n	8007f90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008046:	bf00      	nop
 8008048:	3728      	adds	r7, #40	; 0x28
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	785a      	ldrb	r2, [r3, #1]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	789a      	ldrb	r2, [r3, #2]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	78da      	ldrb	r2, [r3, #3]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	791a      	ldrb	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	795a      	ldrb	r2, [r3, #5]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	799a      	ldrb	r2, [r3, #6]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	79da      	ldrb	r2, [r3, #7]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	7a1a      	ldrb	r2, [r3, #8]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	721a      	strb	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	785a      	ldrb	r2, [r3, #1]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	789a      	ldrb	r2, [r3, #2]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	78da      	ldrb	r2, [r3, #3]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	3304      	adds	r3, #4
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	3305      	adds	r3, #5
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	799a      	ldrb	r2, [r3, #6]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	719a      	strb	r2, [r3, #6]
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008106:	b480      	push	{r7}
 8008108:	b087      	sub	sp, #28
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d120      	bne.n	8008160 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	1e9a      	subs	r2, r3, #2
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	4293      	cmp	r3, r2
 8008128:	bf28      	it	cs
 800812a:	4613      	movcs	r3, r2
 800812c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3302      	adds	r3, #2
 8008132:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008134:	2300      	movs	r3, #0
 8008136:	82fb      	strh	r3, [r7, #22]
 8008138:	e00b      	b.n	8008152 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800813a:	8afb      	ldrh	r3, [r7, #22]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	781a      	ldrb	r2, [r3, #0]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3301      	adds	r3, #1
 800814a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800814c:	8afb      	ldrh	r3, [r7, #22]
 800814e:	3302      	adds	r3, #2
 8008150:	82fb      	strh	r3, [r7, #22]
 8008152:	8afa      	ldrh	r2, [r7, #22]
 8008154:	8abb      	ldrh	r3, [r7, #20]
 8008156:	429a      	cmp	r2, r3
 8008158:	d3ef      	bcc.n	800813a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
  }
}
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	881a      	ldrh	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	4413      	add	r3, r2
 8008182:	b29a      	uxth	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	789b      	ldrb	r3, [r3, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d002      	beq.n	80081c2 <USBH_CtlReq+0x20>
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d00f      	beq.n	80081e0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081c0:	e027      	b.n	8008212 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081da:	2301      	movs	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
      break;
 80081de:	e018      	b.n	8008212 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f81b 	bl	800821c <USBH_HandleControl>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <USBH_CtlReq+0x54>
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d106      	bne.n	8008204 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	761a      	strb	r2, [r3, #24]
      break;
 8008202:	e005      	b.n	8008210 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d102      	bne.n	8008210 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	709a      	strb	r2, [r3, #2]
      break;
 8008210:	bf00      	nop
  }
  return status;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008228:	2300      	movs	r3, #0
 800822a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7e1b      	ldrb	r3, [r3, #24]
 8008230:	3b01      	subs	r3, #1
 8008232:	2b0a      	cmp	r3, #10
 8008234:	f200 8156 	bhi.w	80084e4 <USBH_HandleControl+0x2c8>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USBH_HandleControl+0x24>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	0800826d 	.word	0x0800826d
 8008244:	08008287 	.word	0x08008287
 8008248:	080082f1 	.word	0x080082f1
 800824c:	08008317 	.word	0x08008317
 8008250:	0800834f 	.word	0x0800834f
 8008254:	08008379 	.word	0x08008379
 8008258:	080083cb 	.word	0x080083cb
 800825c:	080083ed 	.word	0x080083ed
 8008260:	08008429 	.word	0x08008429
 8008264:	0800844f 	.word	0x0800844f
 8008268:	0800848d 	.word	0x0800848d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f103 0110 	add.w	r1, r3, #16
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	461a      	mov	r2, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f943 	bl	8008504 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	761a      	strb	r2, [r3, #24]
      break;
 8008284:	e139      	b.n	80084fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	795b      	ldrb	r3, [r3, #5]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcc5 	bl	8008c1c <USBH_LL_GetURBState>
 8008292:	4603      	mov	r3, r0
 8008294:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d11e      	bne.n	80082da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7c1b      	ldrb	r3, [r3, #16]
 80082a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8adb      	ldrh	r3, [r3, #22]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ae:	7b7b      	ldrb	r3, [r7, #13]
 80082b0:	2b80      	cmp	r3, #128	; 0x80
 80082b2:	d103      	bne.n	80082bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082ba:	e115      	b.n	80084e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2205      	movs	r2, #5
 80082c0:	761a      	strb	r2, [r3, #24]
      break;
 80082c2:	e111      	b.n	80084e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082c4:	7b7b      	ldrb	r3, [r7, #13]
 80082c6:	2b80      	cmp	r3, #128	; 0x80
 80082c8:	d103      	bne.n	80082d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2209      	movs	r2, #9
 80082ce:	761a      	strb	r2, [r3, #24]
      break;
 80082d0:	e10a      	b.n	80084e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2207      	movs	r2, #7
 80082d6:	761a      	strb	r2, [r3, #24]
      break;
 80082d8:	e106      	b.n	80084e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d003      	beq.n	80082e8 <USBH_HandleControl+0xcc>
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	f040 8100 	bne.w	80084e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220b      	movs	r2, #11
 80082ec:	761a      	strb	r2, [r3, #24]
      break;
 80082ee:	e0fb      	b.n	80084e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6899      	ldr	r1, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	899a      	ldrh	r2, [r3, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	791b      	ldrb	r3, [r3, #4]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f93a 	bl	8008582 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2204      	movs	r2, #4
 8008312:	761a      	strb	r2, [r3, #24]
      break;
 8008314:	e0f1      	b.n	80084fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	791b      	ldrb	r3, [r3, #4]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc7d 	bl	8008c1c <USBH_LL_GetURBState>
 8008322:	4603      	mov	r3, r0
 8008324:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d102      	bne.n	8008332 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2209      	movs	r2, #9
 8008330:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b05      	cmp	r3, #5
 8008336:	d102      	bne.n	800833e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008338:	2303      	movs	r3, #3
 800833a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800833c:	e0d6      	b.n	80084ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b04      	cmp	r3, #4
 8008342:	f040 80d3 	bne.w	80084ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220b      	movs	r2, #11
 800834a:	761a      	strb	r2, [r3, #24]
      break;
 800834c:	e0ce      	b.n	80084ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6899      	ldr	r1, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	899a      	ldrh	r2, [r3, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	795b      	ldrb	r3, [r3, #5]
 800835a:	2001      	movs	r0, #1
 800835c:	9000      	str	r0, [sp, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8ea 	bl	8008538 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2206      	movs	r2, #6
 8008374:	761a      	strb	r2, [r3, #24]
      break;
 8008376:	e0c0      	b.n	80084fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	795b      	ldrb	r3, [r3, #5]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fc4c 	bl	8008c1c <USBH_LL_GetURBState>
 8008384:	4603      	mov	r3, r0
 8008386:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d103      	bne.n	8008396 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2207      	movs	r2, #7
 8008392:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008394:	e0ac      	b.n	80084f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b05      	cmp	r3, #5
 800839a:	d105      	bne.n	80083a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	220c      	movs	r2, #12
 80083a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083a2:	2303      	movs	r3, #3
 80083a4:	73fb      	strb	r3, [r7, #15]
      break;
 80083a6:	e0a3      	b.n	80084f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d103      	bne.n	80083b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2205      	movs	r2, #5
 80083b2:	761a      	strb	r2, [r3, #24]
      break;
 80083b4:	e09c      	b.n	80084f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	f040 8099 	bne.w	80084f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	220b      	movs	r2, #11
 80083c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	73fb      	strb	r3, [r7, #15]
      break;
 80083c8:	e092      	b.n	80084f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	2100      	movs	r1, #0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8d5 	bl	8008582 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2208      	movs	r2, #8
 80083e8:	761a      	strb	r2, [r3, #24]

      break;
 80083ea:	e086      	b.n	80084fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fc12 	bl	8008c1c <USBH_LL_GetURBState>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d105      	bne.n	800840e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	220d      	movs	r2, #13
 8008406:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800840c:	e072      	b.n	80084f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b04      	cmp	r3, #4
 8008412:	d103      	bne.n	800841c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220b      	movs	r2, #11
 8008418:	761a      	strb	r2, [r3, #24]
      break;
 800841a:	e06b      	b.n	80084f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b05      	cmp	r3, #5
 8008420:	d168      	bne.n	80084f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008422:	2303      	movs	r3, #3
 8008424:	73fb      	strb	r3, [r7, #15]
      break;
 8008426:	e065      	b.n	80084f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	795b      	ldrb	r3, [r3, #5]
 800842c:	2201      	movs	r2, #1
 800842e:	9200      	str	r2, [sp, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f87f 	bl	8008538 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008440:	b29a      	uxth	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	220a      	movs	r2, #10
 800844a:	761a      	strb	r2, [r3, #24]
      break;
 800844c:	e055      	b.n	80084fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fbe1 	bl	8008c1c <USBH_LL_GetURBState>
 800845a:	4603      	mov	r3, r0
 800845c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d105      	bne.n	8008470 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220d      	movs	r2, #13
 800846c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800846e:	e043      	b.n	80084f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d103      	bne.n	800847e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2209      	movs	r2, #9
 800847a:	761a      	strb	r2, [r3, #24]
      break;
 800847c:	e03c      	b.n	80084f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d139      	bne.n	80084f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	220b      	movs	r2, #11
 8008488:	761a      	strb	r2, [r3, #24]
      break;
 800848a:	e035      	b.n	80084f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7e5b      	ldrb	r3, [r3, #25]
 8008490:	3301      	adds	r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	765a      	strb	r2, [r3, #25]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7e5b      	ldrb	r3, [r3, #25]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d806      	bhi.n	80084ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084ac:	e025      	b.n	80084fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084b4:	2106      	movs	r1, #6
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	795b      	ldrb	r3, [r3, #5]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f90c 	bl	80086e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	791b      	ldrb	r3, [r3, #4]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f906 	bl	80086e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084de:	2302      	movs	r3, #2
 80084e0:	73fb      	strb	r3, [r7, #15]
      break;
 80084e2:	e00a      	b.n	80084fa <USBH_HandleControl+0x2de>

    default:
      break;
 80084e4:	bf00      	nop
 80084e6:	e008      	b.n	80084fa <USBH_HandleControl+0x2de>
      break;
 80084e8:	bf00      	nop
 80084ea:	e006      	b.n	80084fa <USBH_HandleControl+0x2de>
      break;
 80084ec:	bf00      	nop
 80084ee:	e004      	b.n	80084fa <USBH_HandleControl+0x2de>
      break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <USBH_HandleControl+0x2de>
      break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <USBH_HandleControl+0x2de>
      break;
 80084f8:	bf00      	nop
  }

  return status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af04      	add	r7, sp, #16
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008512:	79f9      	ldrb	r1, [r7, #7]
 8008514:	2300      	movs	r3, #0
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	2308      	movs	r3, #8
 800851a:	9302      	str	r3, [sp, #8]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	2300      	movs	r3, #0
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fb46 	bl	8008bba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af04      	add	r7, sp, #16
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	460b      	mov	r3, r1
 8008548:	80fb      	strh	r3, [r7, #6]
 800854a:	4613      	mov	r3, r2
 800854c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800855c:	7979      	ldrb	r1, [r7, #5]
 800855e:	7e3b      	ldrb	r3, [r7, #24]
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	2301      	movs	r3, #1
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	2300      	movs	r3, #0
 8008570:	2200      	movs	r2, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fb21 	bl	8008bba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b088      	sub	sp, #32
 8008586:	af04      	add	r7, sp, #16
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	4611      	mov	r1, r2
 800858e:	461a      	mov	r2, r3
 8008590:	460b      	mov	r3, r1
 8008592:	80fb      	strh	r3, [r7, #6]
 8008594:	4613      	mov	r3, r2
 8008596:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008598:	7979      	ldrb	r1, [r7, #5]
 800859a:	2300      	movs	r3, #0
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	9302      	str	r3, [sp, #8]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	2301      	movs	r3, #1
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	2201      	movs	r2, #1
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fb03 	bl	8008bba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80085b4:	2300      	movs	r3, #0

}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b088      	sub	sp, #32
 80085c2:	af04      	add	r7, sp, #16
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4611      	mov	r1, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	460b      	mov	r3, r1
 80085ce:	80fb      	strh	r3, [r7, #6]
 80085d0:	4613      	mov	r3, r2
 80085d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085e2:	7979      	ldrb	r1, [r7, #5]
 80085e4:	7e3b      	ldrb	r3, [r7, #24]
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	9302      	str	r3, [sp, #8]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	2301      	movs	r3, #1
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2302      	movs	r3, #2
 80085f6:	2200      	movs	r2, #0
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fade 	bl	8008bba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af04      	add	r7, sp, #16
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4611      	mov	r1, r2
 8008614:	461a      	mov	r2, r3
 8008616:	460b      	mov	r3, r1
 8008618:	80fb      	strh	r3, [r7, #6]
 800861a:	4613      	mov	r3, r2
 800861c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800861e:	7979      	ldrb	r1, [r7, #5]
 8008620:	2300      	movs	r3, #0
 8008622:	9303      	str	r3, [sp, #12]
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	9302      	str	r3, [sp, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	2301      	movs	r3, #1
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	2302      	movs	r3, #2
 8008632:	2201      	movs	r2, #1
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fac0 	bl	8008bba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af04      	add	r7, sp, #16
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	4603      	mov	r3, r0
 8008654:	70fb      	strb	r3, [r7, #3]
 8008656:	460b      	mov	r3, r1
 8008658:	70bb      	strb	r3, [r7, #2]
 800865a:	4613      	mov	r3, r2
 800865c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800865e:	7878      	ldrb	r0, [r7, #1]
 8008660:	78ba      	ldrb	r2, [r7, #2]
 8008662:	78f9      	ldrb	r1, [r7, #3]
 8008664:	8b3b      	ldrh	r3, [r7, #24]
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	7d3b      	ldrb	r3, [r7, #20]
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	7c3b      	ldrb	r3, [r7, #16]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4603      	mov	r3, r0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa53 	bl	8008b1e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa72 	bl	8008b7c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f836 	bl	8008720 <USBH_GetFreePipe>
 80086b4:	4603      	mov	r3, r0
 80086b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086b8:	89fb      	ldrh	r3, [r7, #14]
 80086ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00a      	beq.n	80086d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	33e0      	adds	r3, #224	; 0xe0
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	b2db      	uxtb	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	2b0a      	cmp	r3, #10
 80086f4:	d80d      	bhi.n	8008712 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	33e0      	adds	r3, #224	; 0xe0
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	33e0      	adds	r3, #224	; 0xe0
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e00f      	b.n	8008752 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	33e0      	adds	r3, #224	; 0xe0
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	b29b      	uxth	r3, r3
 800874a:	e007      	b.n	800875c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	3301      	adds	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b0a      	cmp	r3, #10
 8008756:	d9ec      	bls.n	8008732 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008758:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800876c:	2201      	movs	r2, #1
 800876e:	490e      	ldr	r1, [pc, #56]	; (80087a8 <MX_USB_HOST_Init+0x40>)
 8008770:	480e      	ldr	r0, [pc, #56]	; (80087ac <MX_USB_HOST_Init+0x44>)
 8008772:	f7fe fca1 	bl	80070b8 <USBH_Init>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800877c:	f7f8 f932 	bl	80009e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008780:	490b      	ldr	r1, [pc, #44]	; (80087b0 <MX_USB_HOST_Init+0x48>)
 8008782:	480a      	ldr	r0, [pc, #40]	; (80087ac <MX_USB_HOST_Init+0x44>)
 8008784:	f7fe fd26 	bl	80071d4 <USBH_RegisterClass>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800878e:	f7f8 f929 	bl	80009e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008792:	4806      	ldr	r0, [pc, #24]	; (80087ac <MX_USB_HOST_Init+0x44>)
 8008794:	f7fe fdaa 	bl	80072ec <USBH_Start>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800879e:	f7f8 f921 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087a2:	bf00      	nop
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	080087c9 	.word	0x080087c9
 80087ac:	20000220 	.word	0x20000220
 80087b0:	20000010 	.word	0x20000010

080087b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087b8:	4802      	ldr	r0, [pc, #8]	; (80087c4 <MX_USB_HOST_Process+0x10>)
 80087ba:	f7fe fda7 	bl	800730c <USBH_Process>
}
 80087be:	bf00      	nop
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000220 	.word	0x20000220

080087c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d819      	bhi.n	8008810 <USBH_UserProcess+0x48>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <USBH_UserProcess+0x1c>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008811 	.word	0x08008811
 80087e8:	08008801 	.word	0x08008801
 80087ec:	08008811 	.word	0x08008811
 80087f0:	08008809 	.word	0x08008809
 80087f4:	080087f9 	.word	0x080087f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087f8:	4b09      	ldr	r3, [pc, #36]	; (8008820 <USBH_UserProcess+0x58>)
 80087fa:	2203      	movs	r2, #3
 80087fc:	701a      	strb	r2, [r3, #0]
  break;
 80087fe:	e008      	b.n	8008812 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <USBH_UserProcess+0x58>)
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
  break;
 8008806:	e004      	b.n	8008812 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <USBH_UserProcess+0x58>)
 800880a:	2201      	movs	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
  break;
 800880e:	e000      	b.n	8008812 <USBH_UserProcess+0x4a>

  default:
  break;
 8008810:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	200000c4 	.word	0x200000c4

08008824 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08a      	sub	sp, #40	; 0x28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	609a      	str	r2, [r3, #8]
 8008838:	60da      	str	r2, [r3, #12]
 800883a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008844:	d147      	bne.n	80088d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008846:	2300      	movs	r3, #0
 8008848:	613b      	str	r3, [r7, #16]
 800884a:	4b25      	ldr	r3, [pc, #148]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	4a24      	ldr	r2, [pc, #144]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	6313      	str	r3, [r2, #48]	; 0x30
 8008856:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008868:	2300      	movs	r3, #0
 800886a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886c:	2300      	movs	r3, #0
 800886e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008870:	f107 0314 	add.w	r3, r7, #20
 8008874:	4619      	mov	r1, r3
 8008876:	481b      	ldr	r0, [pc, #108]	; (80088e4 <HAL_HCD_MspInit+0xc0>)
 8008878:	f7f9 fb90 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800887c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008882:	2302      	movs	r3, #2
 8008884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800888a:	2300      	movs	r3, #0
 800888c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800888e:	230a      	movs	r3, #10
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008892:	f107 0314 	add.w	r3, r7, #20
 8008896:	4619      	mov	r1, r3
 8008898:	4812      	ldr	r0, [pc, #72]	; (80088e4 <HAL_HCD_MspInit+0xc0>)
 800889a:	f7f9 fb7f 	bl	8001f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	4a0f      	ldr	r2, [pc, #60]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 80088a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a8:	6353      	str	r3, [r2, #52]	; 0x34
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 80088b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b2:	4a0b      	ldr	r2, [pc, #44]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 80088b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b8:	6453      	str	r3, [r2, #68]	; 0x44
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <HAL_HCD_MspInit+0xbc>)
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088c6:	2200      	movs	r2, #0
 80088c8:	2100      	movs	r1, #0
 80088ca:	2043      	movs	r0, #67	; 0x43
 80088cc:	f7f9 fb2f 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088d0:	2043      	movs	r0, #67	; 0x43
 80088d2:	f7f9 fb48 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088d6:	bf00      	nop
 80088d8:	3728      	adds	r7, #40	; 0x28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40023800 	.word	0x40023800
 80088e4:	40020000 	.word	0x40020000

080088e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f8db 	bl	8007ab2 <USBH_LL_IncTimer>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f913 	bl	8007b3e <USBH_LL_Connect>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f91c 	bl	8007b6c <USBH_LL_Disconnect>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
 8008948:	4613      	mov	r3, r2
 800894a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff f8cd 	bl	8007b06 <USBH_LL_PortEnabled>
}
 800896c:	bf00      	nop
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff f8cd 	bl	8007b22 <USBH_LL_PortDisabled>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d12a      	bne.n	80089f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089a2:	4a18      	ldr	r2, [pc, #96]	; (8008a04 <USBH_LL_Init+0x74>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a15      	ldr	r2, [pc, #84]	; (8008a04 <USBH_LL_Init+0x74>)
 80089ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <USBH_LL_Init+0x74>)
 80089b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <USBH_LL_Init+0x74>)
 80089bc:	2208      	movs	r2, #8
 80089be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <USBH_LL_Init+0x74>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089c6:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <USBH_LL_Init+0x74>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <USBH_LL_Init+0x74>)
 80089ce:	2202      	movs	r2, #2
 80089d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089d2:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <USBH_LL_Init+0x74>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089d8:	480a      	ldr	r0, [pc, #40]	; (8008a04 <USBH_LL_Init+0x74>)
 80089da:	f7f9 fc94 	bl	8002306 <HAL_HCD_Init>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089e4:	f7f7 fffe 	bl	80009e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089e8:	4806      	ldr	r0, [pc, #24]	; (8008a04 <USBH_LL_Init+0x74>)
 80089ea:	f7fa f878 	bl	8002ade <HAL_HCD_GetCurrentFrame>
 80089ee:	4603      	mov	r3, r0
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff f84e 	bl	8007a94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200005f8 	.word	0x200005f8

08008a08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f9 ffe7 	bl	80029f2 <HAL_HCD_Start>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f95c 	bl	8008ce8 <USBH_Get_USB_Status>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7f9 ffef 	bl	8002a38 <HAL_HCD_Stop>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f941 	bl	8008ce8 <USBH_Get_USB_Status>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fa f837 	bl	8002afa <HAL_HCD_GetCurrentSpeed>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d00c      	beq.n	8008aac <USBH_LL_GetSpeed+0x38>
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d80d      	bhi.n	8008ab2 <USBH_LL_GetSpeed+0x3e>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <USBH_LL_GetSpeed+0x2c>
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d003      	beq.n	8008aa6 <USBH_LL_GetSpeed+0x32>
 8008a9e:	e008      	b.n	8008ab2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa4:	e008      	b.n	8008ab8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aaa:	e005      	b.n	8008ab8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008aac:	2302      	movs	r3, #2
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e002      	b.n	8008ab8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	bf00      	nop
  }
  return  speed;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7f9 ffca 	bl	8002a72 <HAL_HCD_ResetPort>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 f8ff 	bl	8008ce8 <USBH_Get_USB_Status>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f9 ffd1 	bl	8002ab6 <HAL_HCD_HC_GetXferCount>
 8008b14:	4603      	mov	r3, r0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b1e:	b590      	push	{r4, r7, lr}
 8008b20:	b089      	sub	sp, #36	; 0x24
 8008b22:	af04      	add	r7, sp, #16
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	4608      	mov	r0, r1
 8008b28:	4611      	mov	r1, r2
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	70fb      	strb	r3, [r7, #3]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70bb      	strb	r3, [r7, #2]
 8008b34:	4613      	mov	r3, r2
 8008b36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b46:	787c      	ldrb	r4, [r7, #1]
 8008b48:	78ba      	ldrb	r2, [r7, #2]
 8008b4a:	78f9      	ldrb	r1, [r7, #3]
 8008b4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	f7f9 fc34 	bl	80023ca <HAL_HCD_HC_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f8bd 	bl	8008ce8 <USBH_Get_USB_Status>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd90      	pop	{r4, r7, pc}

08008b7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f9 fca4 	bl	80024e8 <HAL_HCD_HC_Halt>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f89e 	bl	8008ce8 <USBH_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bba:	b590      	push	{r4, r7, lr}
 8008bbc:	b089      	sub	sp, #36	; 0x24
 8008bbe:	af04      	add	r7, sp, #16
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70bb      	strb	r3, [r7, #2]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008be2:	787c      	ldrb	r4, [r7, #1]
 8008be4:	78ba      	ldrb	r2, [r7, #2]
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bf0:	9302      	str	r3, [sp, #8]
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	f7f9 fc97 	bl	8002530 <HAL_HCD_HC_SubmitRequest>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f86d 	bl	8008ce8 <USBH_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}

08008c1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7f9 ff2b 	bl	8002a8e <HAL_HCD_HC_GetURBState>
 8008c38:	4603      	mov	r3, r0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d103      	bne.n	8008c60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f870 	bl	8008d40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c60:	20c8      	movs	r0, #200	; 0xc8
 8008c62:	f7f9 f865 	bl	8001d30 <HAL_Delay>
  return USBH_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	212c      	movs	r1, #44	; 0x2c
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	333b      	adds	r3, #59	; 0x3b
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	212c      	movs	r1, #44	; 0x2c
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3354      	adds	r3, #84	; 0x54
 8008caa:	78ba      	ldrb	r2, [r7, #2]
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e008      	b.n	8008cc2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	212c      	movs	r1, #44	; 0x2c
 8008cb6:	fb01 f303 	mul.w	r3, r1, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	3355      	adds	r3, #85	; 0x55
 8008cbe:	78ba      	ldrb	r2, [r7, #2]
 8008cc0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f9 f829 	bl	8001d30 <HAL_Delay>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d817      	bhi.n	8008d2c <USBH_Get_USB_Status+0x44>
 8008cfc:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <USBH_Get_USB_Status+0x1c>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d1b 	.word	0x08008d1b
 8008d0c:	08008d21 	.word	0x08008d21
 8008d10:	08008d27 	.word	0x08008d27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
    break;
 8008d18:	e00b      	b.n	8008d32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1e:	e008      	b.n	8008d32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d20:	2301      	movs	r3, #1
 8008d22:	73fb      	strb	r3, [r7, #15]
    break;
 8008d24:	e005      	b.n	8008d32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d26:	2302      	movs	r3, #2
 8008d28:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2a:	e002      	b.n	8008d32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	bf00      	nop
  }
  return usb_status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e001      	b.n	8008d5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	461a      	mov	r2, r3
 8008d62:	2101      	movs	r1, #1
 8008d64:	4803      	ldr	r0, [pc, #12]	; (8008d74 <MX_DriverVbusFS+0x34>)
 8008d66:	f7f9 fab5 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40020800 	.word	0x40020800

08008d78 <__errno>:
 8008d78:	4b01      	ldr	r3, [pc, #4]	; (8008d80 <__errno+0x8>)
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000030 	.word	0x20000030

08008d84 <__libc_init_array>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4d0d      	ldr	r5, [pc, #52]	; (8008dbc <__libc_init_array+0x38>)
 8008d88:	4c0d      	ldr	r4, [pc, #52]	; (8008dc0 <__libc_init_array+0x3c>)
 8008d8a:	1b64      	subs	r4, r4, r5
 8008d8c:	10a4      	asrs	r4, r4, #2
 8008d8e:	2600      	movs	r6, #0
 8008d90:	42a6      	cmp	r6, r4
 8008d92:	d109      	bne.n	8008da8 <__libc_init_array+0x24>
 8008d94:	4d0b      	ldr	r5, [pc, #44]	; (8008dc4 <__libc_init_array+0x40>)
 8008d96:	4c0c      	ldr	r4, [pc, #48]	; (8008dc8 <__libc_init_array+0x44>)
 8008d98:	f000 f8f8 	bl	8008f8c <_init>
 8008d9c:	1b64      	subs	r4, r4, r5
 8008d9e:	10a4      	asrs	r4, r4, #2
 8008da0:	2600      	movs	r6, #0
 8008da2:	42a6      	cmp	r6, r4
 8008da4:	d105      	bne.n	8008db2 <__libc_init_array+0x2e>
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dac:	4798      	blx	r3
 8008dae:	3601      	adds	r6, #1
 8008db0:	e7ee      	b.n	8008d90 <__libc_init_array+0xc>
 8008db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db6:	4798      	blx	r3
 8008db8:	3601      	adds	r6, #1
 8008dba:	e7f2      	b.n	8008da2 <__libc_init_array+0x1e>
 8008dbc:	08008fc8 	.word	0x08008fc8
 8008dc0:	08008fc8 	.word	0x08008fc8
 8008dc4:	08008fc8 	.word	0x08008fc8
 8008dc8:	08008fcc 	.word	0x08008fcc

08008dcc <malloc>:
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <malloc+0xc>)
 8008dce:	4601      	mov	r1, r0
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	f000 b863 	b.w	8008e9c <_malloc_r>
 8008dd6:	bf00      	nop
 8008dd8:	20000030 	.word	0x20000030

08008ddc <free>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <free+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f000 b80b 	b.w	8008dfc <_free_r>
 8008de6:	bf00      	nop
 8008de8:	20000030 	.word	0x20000030

08008dec <memset>:
 8008dec:	4402      	add	r2, r0
 8008dee:	4603      	mov	r3, r0
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d100      	bne.n	8008df6 <memset+0xa>
 8008df4:	4770      	bx	lr
 8008df6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dfa:	e7f9      	b.n	8008df0 <memset+0x4>

08008dfc <_free_r>:
 8008dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d048      	beq.n	8008e94 <_free_r+0x98>
 8008e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e06:	9001      	str	r0, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0e:	bfb8      	it	lt
 8008e10:	18e4      	addlt	r4, r4, r3
 8008e12:	f000 f8ad 	bl	8008f70 <__malloc_lock>
 8008e16:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <_free_r+0x9c>)
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	b933      	cbnz	r3, 8008e2e <_free_r+0x32>
 8008e20:	6063      	str	r3, [r4, #4]
 8008e22:	6014      	str	r4, [r2, #0]
 8008e24:	b003      	add	sp, #12
 8008e26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e2a:	f000 b8a7 	b.w	8008f7c <__malloc_unlock>
 8008e2e:	42a3      	cmp	r3, r4
 8008e30:	d90b      	bls.n	8008e4a <_free_r+0x4e>
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	1862      	adds	r2, r4, r1
 8008e36:	4293      	cmp	r3, r2
 8008e38:	bf04      	itt	eq
 8008e3a:	681a      	ldreq	r2, [r3, #0]
 8008e3c:	685b      	ldreq	r3, [r3, #4]
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	bf04      	itt	eq
 8008e42:	1852      	addeq	r2, r2, r1
 8008e44:	6022      	streq	r2, [r4, #0]
 8008e46:	602c      	str	r4, [r5, #0]
 8008e48:	e7ec      	b.n	8008e24 <_free_r+0x28>
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b10b      	cbz	r3, 8008e54 <_free_r+0x58>
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d9fa      	bls.n	8008e4a <_free_r+0x4e>
 8008e54:	6811      	ldr	r1, [r2, #0]
 8008e56:	1855      	adds	r5, r2, r1
 8008e58:	42a5      	cmp	r5, r4
 8008e5a:	d10b      	bne.n	8008e74 <_free_r+0x78>
 8008e5c:	6824      	ldr	r4, [r4, #0]
 8008e5e:	4421      	add	r1, r4
 8008e60:	1854      	adds	r4, r2, r1
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	d1dd      	bne.n	8008e24 <_free_r+0x28>
 8008e68:	681c      	ldr	r4, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	6053      	str	r3, [r2, #4]
 8008e6e:	4421      	add	r1, r4
 8008e70:	6011      	str	r1, [r2, #0]
 8008e72:	e7d7      	b.n	8008e24 <_free_r+0x28>
 8008e74:	d902      	bls.n	8008e7c <_free_r+0x80>
 8008e76:	230c      	movs	r3, #12
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	e7d3      	b.n	8008e24 <_free_r+0x28>
 8008e7c:	6825      	ldr	r5, [r4, #0]
 8008e7e:	1961      	adds	r1, r4, r5
 8008e80:	428b      	cmp	r3, r1
 8008e82:	bf04      	itt	eq
 8008e84:	6819      	ldreq	r1, [r3, #0]
 8008e86:	685b      	ldreq	r3, [r3, #4]
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	bf04      	itt	eq
 8008e8c:	1949      	addeq	r1, r1, r5
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	6054      	str	r4, [r2, #4]
 8008e92:	e7c7      	b.n	8008e24 <_free_r+0x28>
 8008e94:	b003      	add	sp, #12
 8008e96:	bd30      	pop	{r4, r5, pc}
 8008e98:	200000c8 	.word	0x200000c8

08008e9c <_malloc_r>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	1ccd      	adds	r5, r1, #3
 8008ea0:	f025 0503 	bic.w	r5, r5, #3
 8008ea4:	3508      	adds	r5, #8
 8008ea6:	2d0c      	cmp	r5, #12
 8008ea8:	bf38      	it	cc
 8008eaa:	250c      	movcc	r5, #12
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	4606      	mov	r6, r0
 8008eb0:	db01      	blt.n	8008eb6 <_malloc_r+0x1a>
 8008eb2:	42a9      	cmp	r1, r5
 8008eb4:	d903      	bls.n	8008ebe <_malloc_r+0x22>
 8008eb6:	230c      	movs	r3, #12
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	2000      	movs	r0, #0
 8008ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebe:	f000 f857 	bl	8008f70 <__malloc_lock>
 8008ec2:	4921      	ldr	r1, [pc, #132]	; (8008f48 <_malloc_r+0xac>)
 8008ec4:	680a      	ldr	r2, [r1, #0]
 8008ec6:	4614      	mov	r4, r2
 8008ec8:	b99c      	cbnz	r4, 8008ef2 <_malloc_r+0x56>
 8008eca:	4f20      	ldr	r7, [pc, #128]	; (8008f4c <_malloc_r+0xb0>)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	b923      	cbnz	r3, 8008eda <_malloc_r+0x3e>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f83c 	bl	8008f50 <_sbrk_r>
 8008ed8:	6038      	str	r0, [r7, #0]
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f837 	bl	8008f50 <_sbrk_r>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	d123      	bne.n	8008f2e <_malloc_r+0x92>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	4630      	mov	r0, r6
 8008eec:	f000 f846 	bl	8008f7c <__malloc_unlock>
 8008ef0:	e7e3      	b.n	8008eba <_malloc_r+0x1e>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	1b5b      	subs	r3, r3, r5
 8008ef6:	d417      	bmi.n	8008f28 <_malloc_r+0x8c>
 8008ef8:	2b0b      	cmp	r3, #11
 8008efa:	d903      	bls.n	8008f04 <_malloc_r+0x68>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	441c      	add	r4, r3
 8008f00:	6025      	str	r5, [r4, #0]
 8008f02:	e004      	b.n	8008f0e <_malloc_r+0x72>
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	42a2      	cmp	r2, r4
 8008f08:	bf0c      	ite	eq
 8008f0a:	600b      	streq	r3, [r1, #0]
 8008f0c:	6053      	strne	r3, [r2, #4]
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f000 f834 	bl	8008f7c <__malloc_unlock>
 8008f14:	f104 000b 	add.w	r0, r4, #11
 8008f18:	1d23      	adds	r3, r4, #4
 8008f1a:	f020 0007 	bic.w	r0, r0, #7
 8008f1e:	1ac2      	subs	r2, r0, r3
 8008f20:	d0cc      	beq.n	8008ebc <_malloc_r+0x20>
 8008f22:	1a1b      	subs	r3, r3, r0
 8008f24:	50a3      	str	r3, [r4, r2]
 8008f26:	e7c9      	b.n	8008ebc <_malloc_r+0x20>
 8008f28:	4622      	mov	r2, r4
 8008f2a:	6864      	ldr	r4, [r4, #4]
 8008f2c:	e7cc      	b.n	8008ec8 <_malloc_r+0x2c>
 8008f2e:	1cc4      	adds	r4, r0, #3
 8008f30:	f024 0403 	bic.w	r4, r4, #3
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d0e3      	beq.n	8008f00 <_malloc_r+0x64>
 8008f38:	1a21      	subs	r1, r4, r0
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f000 f808 	bl	8008f50 <_sbrk_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d1dd      	bne.n	8008f00 <_malloc_r+0x64>
 8008f44:	e7cf      	b.n	8008ee6 <_malloc_r+0x4a>
 8008f46:	bf00      	nop
 8008f48:	200000c8 	.word	0x200000c8
 8008f4c:	200000cc 	.word	0x200000cc

08008f50 <_sbrk_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	; (8008f6c <_sbrk_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f7 feea 	bl	8000d34 <_sbrk>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_sbrk_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_sbrk_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	200008fc 	.word	0x200008fc

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__malloc_lock+0x8>)
 8008f72:	f000 b809 	b.w	8008f88 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000904 	.word	0x20000904

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f000 b804 	b.w	8008f8a <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20000904 	.word	0x20000904

08008f88 <__retarget_lock_acquire_recursive>:
 8008f88:	4770      	bx	lr

08008f8a <__retarget_lock_release_recursive>:
 8008f8a:	4770      	bx	lr

08008f8c <_init>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr

08008f98 <_fini>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr
