
tft_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000885c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002001c  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028a00  08028a00  00040094  2**0
                  CONTENTS
  4 .ARM          00000008  08028a00  08028a00  00038a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028a08  08028a08  00040094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028a08  08028a08  00038a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028a0c  08028a0c  00038a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08028a10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040094  2**0
                  CONTENTS
 10 .bss          00000878  20000094  20000094  00040094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  00040094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d487  00000000  00000000  000400c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc4  00000000  00000000  0005d54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00061510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fb8  00000000  00000000  00062780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aa1  00000000  00000000  00086738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc352  00000000  00000000  0009f1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b52b  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000010d8  00000000  00000000  0016b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e1c  00000000  00000000  0016c658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089cc 	.word	0x080089cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	080089cc 	.word	0x080089cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f001 f8e1 	bl	800168c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f83d 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 f96f 	bl	80007b0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80004d2:	f000 f8a3 	bl	800061c <MX_I2C1_Init>
	MX_I2S3_Init();
 80004d6:	f000 f8cf 	bl	8000678 <MX_I2S3_Init>
	MX_SPI1_Init();
 80004da:	f000 f8fd 	bl	80006d8 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80004de:	f007 fe63 	bl	80081a8 <MX_USB_HOST_Init>
	MX_SPI2_Init();
 80004e2:	f000 f92f 	bl	8000744 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	tft_init(&hspi2,
 80004e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004ea:	9304      	str	r3, [sp, #16]
 80004ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004f0:	9303      	str	r3, [sp, #12]
 80004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <main+0x78>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <main+0x78>)
 8000504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000508:	490c      	ldr	r1, [pc, #48]	; (800053c <main+0x7c>)
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <main+0x80>)
 800050c:	f000 fc62 	bl	8000dd4 <tft_init>
	LCD_CS_GPIO_Port, LCD_CS_Pin,
	LCD_DC_GPIO_Port, LCD_DC_Pin,
	LCD_RST_GPIO_Port, LCD_RST_Pin, 480, 320);
	tft_set_rotation(2);
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fe37 	bl	8001184 <tft_set_rotation>
	tft_fill_screen(COLOR_WHITE);
 8000516:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800051a:	f000 ff65 	bl	80013e8 <tft_fill_screen>
//	test_fill_round_rects();
//	tft_draw_char(30, 30, 'A', COLOR_BLACK,
//			COLOR_YELLOW, 10);

	extern const unsigned short batman_256x256[65536];
	tft_draw_RGB_bitmap(50, 50, batman_256x256, 256, 256);
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <main+0x84>)
 800052a:	2132      	movs	r1, #50	; 0x32
 800052c:	2032      	movs	r0, #50	; 0x32
 800052e:	f000 ffb8 	bl	80014a2 <tft_draw_RGB_bitmap>
	/* USER CODE BEGIN WHILE */
	while (1) {
//	  test_fill_screen();
//	  test_lines2(COLOR_WHITE, COLOR_ORANGE);
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000532:	f007 fe5f 	bl	80081f4 <MX_USB_HOST_Process>
 8000536:	e7fc      	b.n	8000532 <main+0x72>
 8000538:	40021000 	.word	0x40021000
 800053c:	40020400 	.word	0x40020400
 8000540:	200000d0 	.word	0x200000d0
 8000544:	080089e8 	.word	0x080089e8

08000548 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 f968 	bl	800882c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 ff0e 	bl	80043f0 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
		Error_Handler();
 80005da:	f000 fa0b 	bl	80009f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f96f 	bl	80048e0 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
		Error_Handler();
 8000608:	f000 f9f4 	bl	80009f4 <Error_Handler>
	}
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f003 f8e5 	bl	8003828 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000664:	f000 f9c6 	bl	80009f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000128 	.word	0x20000128
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f003 f9fa 	bl	8003ab0 <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
		Error_Handler();
 80006c2:	f000 f997 	bl	80009f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001d4 	.word	0x200001d4
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f004 fc01 	bl	8004f30 <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000734:	f000 f95e 	bl	80009f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000017c 	.word	0x2000017c
 8000740:	40013000 	.word	0x40013000

08000744 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI2_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI2_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI2_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI2_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000778:	2228      	movs	r2, #40	; 0x28
 800077a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI2_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI2_Init+0x64>)
 8000796:	f004 fbcb 	bl	8004f30 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI2_Init+0x60>
		Error_Handler();
 80007a0:	f000 f928 	bl	80009f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	40003800 	.word	0x40003800

080007b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b84      	ldr	r3, [pc, #528]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a83      	ldr	r2, [pc, #524]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b81      	ldr	r3, [pc, #516]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a7c      	ldr	r2, [pc, #496]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x22c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a75      	ldr	r2, [pc, #468]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a6e      	ldr	r2, [pc, #440]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <MX_GPIO_Init+0x22c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b68      	ldr	r3, [pc, #416]	; (80009dc <MX_GPIO_Init+0x22c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a67      	ldr	r2, [pc, #412]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b61      	ldr	r3, [pc, #388]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a60      	ldr	r2, [pc, #384]	; (80009dc <MX_GPIO_Init+0x22c>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <MX_GPIO_Init+0x22c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin | LCD_DC_Pin | LCD_RST_Pin,
 800086e:	2200      	movs	r2, #0
 8000870:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000874:	485a      	ldr	r0, [pc, #360]	; (80009e0 <MX_GPIO_Init+0x230>)
 8000876:	f001 fa4d 	bl	8001d14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800087a:	2201      	movs	r2, #1
 800087c:	2101      	movs	r1, #1
 800087e:	4859      	ldr	r0, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x234>)
 8000880:	f001 fa48 	bl	8001d14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TP_CS_Pin | LCD_CS_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800088a:	4857      	ldr	r0, [pc, #348]	; (80009e8 <MX_GPIO_Init+0x238>)
 800088c:	f001 fa42 	bl	8001d14 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000890:	2200      	movs	r2, #0
 8000892:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000896:	4855      	ldr	r0, [pc, #340]	; (80009ec <MX_GPIO_Init+0x23c>)
 8000898:	f001 fa3c 	bl	8001d14 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LCD_DC_Pin | LCD_RST_Pin;
 800089c:	f24a 0308 	movw	r3, #40968	; 0xa008
 80008a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	484a      	ldr	r0, [pc, #296]	; (80009e0 <MX_GPIO_Init+0x230>)
 80008b6:	f001 f891 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4844      	ldr	r0, [pc, #272]	; (80009e4 <MX_GPIO_Init+0x234>)
 80008d2:	f001 f883 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	483c      	ldr	r0, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x234>)
 80008f2:	f001 f873 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4839      	ldr	r0, [pc, #228]	; (80009f0 <MX_GPIO_Init+0x240>)
 800090c:	f001 f866 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4831      	ldr	r0, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x238>)
 8000924:	f001 f85a 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : TP_IRQ_Pin */
	GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800092c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000932:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4828      	ldr	r0, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x230>)
 8000940:	f001 f84c 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0x238>)
 8000962:	f001 f83b 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
	GPIO_InitStruct.Pin = TP_CS_Pin | LCD_CS_Pin;
 8000966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <MX_GPIO_Init+0x238>)
 8000980:	f001 f82c 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000984:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000988:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x23c>)
 800099e:	f001 f81d 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_GPIO_Init+0x23c>)
 80009b6:	f001 f811 	bl	80019dc <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x230>)
 80009d0:	f001 f804 	bl	80019dc <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000

080009f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f000 ff8a 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <HAL_I2C_MspInit+0x84>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12c      	bne.n	8000acc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a94:	2312      	movs	r3, #18
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <HAL_I2C_MspInit+0x8c>)
 8000aac:	f000 ff96 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <HAL_I2S_MspInit+0xf0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d15a      	bne.n	8000bc6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b10:	2301      	movs	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b14:	23c0      	movs	r3, #192	; 0xc0
 8000b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 f8c5 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b2c:	f7ff ff62 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b84:	2310      	movs	r3, #16
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b94:	2306      	movs	r3, #6
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <HAL_I2S_MspInit+0xf8>)
 8000ba0:	f000 ff1c 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <HAL_I2S_MspInit+0xfc>)
 8000bc2:	f000 ff0b 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3738      	adds	r7, #56	; 0x38
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020800 	.word	0x40020800

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <HAL_SPI_MspInit+0xe8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3a:	23e0      	movs	r3, #224	; 0xe0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <HAL_SPI_MspInit+0xf0>)
 8000c56:	f000 fec1 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c5a:	e031      	b.n	8000cc0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_SPI_MspInit+0xf4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12c      	bne.n	8000cc0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_SPI_MspInit+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000c9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <HAL_SPI_MspInit+0xf8>)
 8000cbc:	f000 fe8e 	bl	80019dc <HAL_GPIO_Init>
}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40020400 	.word	0x40020400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 fd02 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f001 fa71 	bl	800221c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200005f8 	.word	0x200005f8

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f007 fd20 	bl	80087b8 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200000b0 	.word	0x200000b0
 8000dac:	20000910 	.word	0x20000910

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <tft_init>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

void tft_init(SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port,
		uint16_t rst_pin, uint32_t width, uint32_t height) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80fb      	strh	r3, [r7, #6]

	tft_width = width;
 8000de4:	4ab7      	ldr	r2, [pc, #732]	; (80010c4 <tft_init+0x2f0>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	6013      	str	r3, [r2, #0]
	tft_height = height;
 8000dea:	4ab7      	ldr	r2, [pc, #732]	; (80010c8 <tft_init+0x2f4>)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	6013      	str	r3, [r2, #0]
	tft_pixel_count = width * height;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4ab4      	ldr	r2, [pc, #720]	; (80010cc <tft_init+0x2f8>)
 8000dfa:	6013      	str	r3, [r2, #0]

	tft = tft_interface_init(spi, cs_port, cs_pin, dc_port, dc_pin, rst_port,
 8000dfc:	88fa      	ldrh	r2, [r7, #6]
 8000dfe:	8c3b      	ldrh	r3, [r7, #32]
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	8b3b      	ldrh	r3, [r7, #24]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f000 fbe3 	bl	80015da <tft_interface_init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4aae      	ldr	r2, [pc, #696]	; (80010d0 <tft_init+0x2fc>)
 8000e18:	6013      	str	r3, [r2, #0]
			rst_pin);

	tft_rst_off(tft);
 8000e1a:	4bad      	ldr	r3, [pc, #692]	; (80010d0 <tft_init+0x2fc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68d8      	ldr	r0, [r3, #12]
 8000e20:	4bab      	ldr	r3, [pc, #684]	; (80010d0 <tft_init+0x2fc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	8a9b      	ldrh	r3, [r3, #20]
 8000e26:	2201      	movs	r2, #1
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f000 ff73 	bl	8001d14 <HAL_GPIO_WritePin>
	tft_rst_on(tft);
 8000e2e:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <tft_init+0x2fc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68d8      	ldr	r0, [r3, #12]
 8000e34:	4ba6      	ldr	r3, [pc, #664]	; (80010d0 <tft_init+0x2fc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	8a9b      	ldrh	r3, [r3, #20]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f000 ff69 	bl	8001d14 <HAL_GPIO_WritePin>
	tft_rst_off(tft);
 8000e42:	4ba3      	ldr	r3, [pc, #652]	; (80010d0 <tft_init+0x2fc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68d8      	ldr	r0, [r3, #12]
 8000e48:	4ba1      	ldr	r3, [pc, #644]	; (80010d0 <tft_init+0x2fc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	8a9b      	ldrh	r3, [r3, #20]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4619      	mov	r1, r3
 8000e52:	f000 ff5f 	bl	8001d14 <HAL_GPIO_WritePin>

	tft_send_cmd(tft, TFTCMD_NOP);
 8000e56:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <tft_init+0x2fc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fb6a 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x00);
 8000e62:	4b9b      	ldr	r3, [pc, #620]	; (80010d0 <tft_init+0x2fc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fb8d 	bl	8001588 <tft_send_data>
	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8000e6e:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <tft_init+0x2fc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2111      	movs	r1, #17
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fb5e 	bl	8001536 <tft_send_cmd>

	tft_delay(150);
 8000e7a:	2096      	movs	r0, #150	; 0x96
 8000e7c:	f000 fc78 	bl	8001770 <HAL_Delay>

	tft_send_cmd(tft, TFTCMD_PIXEL_FORMAT);
 8000e80:	4b93      	ldr	r3, [pc, #588]	; (80010d0 <tft_init+0x2fc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	213a      	movs	r1, #58	; 0x3a
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fb55 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x55);
 8000e8c:	4b90      	ldr	r3, [pc, #576]	; (80010d0 <tft_init+0x2fc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2155      	movs	r1, #85	; 0x55
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fb78 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_MAC);
 8000e98:	4b8d      	ldr	r3, [pc, #564]	; (80010d0 <tft_init+0x2fc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2136      	movs	r1, #54	; 0x36
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fb49 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x48);
 8000ea4:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <tft_init+0x2fc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2148      	movs	r1, #72	; 0x48
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fb6c 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_POWER3);
 8000eb0:	4b87      	ldr	r3, [pc, #540]	; (80010d0 <tft_init+0x2fc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	21c2      	movs	r1, #194	; 0xc2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fb3d 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x44);
 8000ebc:	4b84      	ldr	r3, [pc, #528]	; (80010d0 <tft_init+0x2fc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2144      	movs	r1, #68	; 0x44
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fb60 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_VCOM1);
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <tft_init+0x2fc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	21c5      	movs	r1, #197	; 0xc5
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fb31 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x00);
 8000ed4:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <tft_init+0x2fc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fb54 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000ee0:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <tft_init+0x2fc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fb4e 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000eec:	4b78      	ldr	r3, [pc, #480]	; (80010d0 <tft_init+0x2fc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fb48 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000ef8:	4b75      	ldr	r3, [pc, #468]	; (80010d0 <tft_init+0x2fc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fb42 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_PGAMMA);
 8000f04:	4b72      	ldr	r3, [pc, #456]	; (80010d0 <tft_init+0x2fc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	21e0      	movs	r1, #224	; 0xe0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fb13 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x0f);
 8000f10:	4b6f      	ldr	r3, [pc, #444]	; (80010d0 <tft_init+0x2fc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fb36 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x1f);
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <tft_init+0x2fc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	211f      	movs	r1, #31
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fb30 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x1c);
 8000f28:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <tft_init+0x2fc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fb2a 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0c);
 8000f34:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <tft_init+0x2fc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	210c      	movs	r1, #12
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fb24 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0f);
 8000f40:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <tft_init+0x2fc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	210f      	movs	r1, #15
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fb1e 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x08);
 8000f4c:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <tft_init+0x2fc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2108      	movs	r1, #8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fb18 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x48);
 8000f58:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <tft_init+0x2fc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2148      	movs	r1, #72	; 0x48
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb12 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x98);
 8000f64:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <tft_init+0x2fc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2198      	movs	r1, #152	; 0x98
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb0c 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x37);
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <tft_init+0x2fc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2137      	movs	r1, #55	; 0x37
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fb06 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0a);
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <tft_init+0x2fc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	210a      	movs	r1, #10
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fb00 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x13);
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <tft_init+0x2fc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2113      	movs	r1, #19
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fafa 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x04);
 8000f94:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <tft_init+0x2fc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 faf4 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x11);
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <tft_init+0x2fc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2111      	movs	r1, #17
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 faee 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0d);
 8000fac:	4b48      	ldr	r3, [pc, #288]	; (80010d0 <tft_init+0x2fc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	210d      	movs	r1, #13
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fae8 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000fb8:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <tft_init+0x2fc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fae2 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_NGAMMA);
 8000fc4:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <tft_init+0x2fc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	21e1      	movs	r1, #225	; 0xe1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fab3 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x0f);
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <tft_init+0x2fc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fad6 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x32);
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <tft_init+0x2fc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2132      	movs	r1, #50	; 0x32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fad0 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x2e);
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <tft_init+0x2fc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	212e      	movs	r1, #46	; 0x2e
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 faca 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0b);
 8000ff4:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <tft_init+0x2fc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	210b      	movs	r1, #11
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fac4 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0d);
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <tft_init+0x2fc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	210d      	movs	r1, #13
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fabe 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x05);
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <tft_init+0x2fc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2105      	movs	r1, #5
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fab8 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x47);
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <tft_init+0x2fc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2147      	movs	r1, #71	; 0x47
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fab2 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x75);
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <tft_init+0x2fc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2175      	movs	r1, #117	; 0x75
 800102a:	4618      	mov	r0, r3
 800102c:	f000 faac 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x37);
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <tft_init+0x2fc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2137      	movs	r1, #55	; 0x37
 8001036:	4618      	mov	r0, r3
 8001038:	f000 faa6 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x06);
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <tft_init+0x2fc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2106      	movs	r1, #6
 8001042:	4618      	mov	r0, r3
 8001044:	f000 faa0 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x10);
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <tft_init+0x2fc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2110      	movs	r1, #16
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fa9a 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x03);
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <tft_init+0x2fc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2103      	movs	r1, #3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fa94 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x24);
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <tft_init+0x2fc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2124      	movs	r1, #36	; 0x24
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fa8e 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x20);
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <tft_init+0x2fc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2120      	movs	r1, #32
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fa88 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <tft_init+0x2fc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fa82 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_GAMMA_CTRL1);
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <tft_init+0x2fc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	21e2      	movs	r1, #226	; 0xe2
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa53 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, 0x0f);
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <tft_init+0x2fc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210f      	movs	r1, #15
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fa76 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x32);
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <tft_init+0x2fc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2132      	movs	r1, #50	; 0x32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fa70 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x2e);
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <tft_init+0x2fc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	212e      	movs	r1, #46	; 0x2e
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fa6a 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x0b);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <tft_init+0x2fc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	210b      	movs	r1, #11
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fa64 	bl	8001588 <tft_send_data>
 80010c0:	e008      	b.n	80010d4 <tft_init+0x300>
 80010c2:	bf00      	nop
 80010c4:	200000b8 	.word	0x200000b8
 80010c8:	200000bc 	.word	0x200000bc
 80010cc:	200000c0 	.word	0x200000c0
 80010d0:	200000b4 	.word	0x200000b4
	tft_send_data(tft, 0x0d);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <tft_init+0x3ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	210d      	movs	r1, #13
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fa54 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x05);
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <tft_init+0x3ac>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fa4e 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x47);
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <tft_init+0x3ac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2147      	movs	r1, #71	; 0x47
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa48 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x75);
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <tft_init+0x3ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2175      	movs	r1, #117	; 0x75
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fa42 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x37);
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <tft_init+0x3ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2137      	movs	r1, #55	; 0x37
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fa3c 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x06);
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <tft_init+0x3ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2106      	movs	r1, #6
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fa36 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x10);
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <tft_init+0x3ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2110      	movs	r1, #16
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa30 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x03);
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <tft_init+0x3ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2103      	movs	r1, #3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa2a 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x24);
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <tft_init+0x3ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2124      	movs	r1, #36	; 0x24
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fa24 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x20);
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <tft_init+0x3ac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2120      	movs	r1, #32
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fa1e 	bl	8001588 <tft_send_data>
	tft_send_data(tft, 0x00);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <tft_init+0x3ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fa18 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <tft_init+0x3ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2111      	movs	r1, #17
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f9e9 	bl	8001536 <tft_send_cmd>
	tft_send_cmd(tft, TFTCMD_DISPLAY_ON);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <tft_init+0x3ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2129      	movs	r1, #41	; 0x29
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f9e3 	bl	8001536 <tft_send_cmd>

	tft_delay(150);
 8001170:	2096      	movs	r0, #150	; 0x96
 8001172:	f000 fafd 	bl	8001770 <HAL_Delay>

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000b4 	.word	0x200000b4

08001184 <tft_set_rotation>:

void tft_set_rotation(uint8_t rotate) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	tft_send_cmd(tft, MEMCONTROL);
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <tft_set_rotation+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2136      	movs	r1, #54	; 0x36
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f9ce 	bl	8001536 <tft_send_cmd>
	switch (rotate) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3b01      	subs	r3, #1
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d832      	bhi.n	8001208 <tft_set_rotation+0x84>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <tft_set_rotation+0x24>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011e1 	.word	0x080011e1
 80011b4:	080011f5 	.word	0x080011f5
	case 1:
		rot_num = 1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <tft_set_rotation+0xa4>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
		tft_send_data(tft,
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <tft_set_rotation+0xa0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2188      	movs	r1, #136	; 0x88
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f9df 	bl	8001588 <tft_send_data>
		MADCTL_MY | MADCTL_BGR);
		break;
 80011ca:	e027      	b.n	800121c <tft_set_rotation+0x98>
	case 2:
		rot_num = 2;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <tft_set_rotation+0xa4>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
		tft_send_data(tft,
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <tft_set_rotation+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2128      	movs	r1, #40	; 0x28
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f9d5 	bl	8001588 <tft_send_data>
		MADCTL_MV | MADCTL_BGR);
		break;
 80011de:	e01d      	b.n	800121c <tft_set_rotation+0x98>
	case 3:
		rot_num = 3;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <tft_set_rotation+0xa4>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
		tft_send_data(tft,
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <tft_set_rotation+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2148      	movs	r1, #72	; 0x48
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f9cb 	bl	8001588 <tft_send_data>
		MADCTL_MX | MADCTL_BGR);
		break;
 80011f2:	e013      	b.n	800121c <tft_set_rotation+0x98>
	case 4:
		rot_num = 4;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <tft_set_rotation+0xa4>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	701a      	strb	r2, [r3, #0]
		tft_send_data(tft,
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <tft_set_rotation+0xa0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	21e8      	movs	r1, #232	; 0xe8
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f9c1 	bl	8001588 <tft_send_data>
		MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
		break;
 8001206:	e009      	b.n	800121c <tft_set_rotation+0x98>
	default:
		rot_num = 1;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <tft_set_rotation+0xa4>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
		tft_send_data(tft,
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <tft_set_rotation+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2188      	movs	r1, #136	; 0x88
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f9b7 	bl	8001588 <tft_send_data>
		MADCTL_MY | MADCTL_BGR);
		break;
 800121a:	bf00      	nop
	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000b4 	.word	0x200000b4
 8001228:	20000004 	.word	0x20000004

0800122c <tft_cursor_position>:
void tft_cursor_position(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4604      	mov	r4, r0
 8001234:	4608      	mov	r0, r1
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	4603      	mov	r3, r0
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	803b      	strh	r3, [r7, #0]

	tft_send_cmd(tft, TFTCMD_COLUMN_ADDR);
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <tft_cursor_position+0xdc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	212a      	movs	r1, #42	; 0x2a
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f970 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, x0 >> 8);
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <tft_cursor_position+0xdc>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29b      	uxth	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	4610      	mov	r0, r2
 8001266:	f000 f98f 	bl	8001588 <tft_send_data>
	tft_send_data(tft, x0 & 0xff);
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <tft_cursor_position+0xdc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f987 	bl	8001588 <tft_send_data>
	tft_send_data(tft, x1 >> 8);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <tft_cursor_position+0xdc>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b29b      	uxth	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f000 f97d 	bl	8001588 <tft_send_data>
	tft_send_data(tft, x1 & 0xff);
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <tft_cursor_position+0xdc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f975 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_PAGE_ADDR);
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <tft_cursor_position+0xdc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	212b      	movs	r1, #43	; 0x2b
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f946 	bl	8001536 <tft_send_cmd>
	tft_send_data(tft, y0 >> 8);
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <tft_cursor_position+0xdc>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f000 f965 	bl	8001588 <tft_send_data>
	tft_send_data(tft, y0 & 0xff);
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <tft_cursor_position+0xdc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	88ba      	ldrh	r2, [r7, #4]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f95d 	bl	8001588 <tft_send_data>
	tft_send_data(tft, y1 >> 8);
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <tft_cursor_position+0xdc>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	883b      	ldrh	r3, [r7, #0]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f000 f953 	bl	8001588 <tft_send_data>
	tft_send_data(tft, y1 & 0xff);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <tft_cursor_position+0xdc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	883a      	ldrh	r2, [r7, #0]
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f94b 	bl	8001588 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_GRAM);
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <tft_cursor_position+0xdc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	212c      	movs	r1, #44	; 0x2c
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f91c 	bl	8001536 <tft_send_cmd>
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	200000b4 	.word	0x200000b4

0800130c <tft_fill_rectxy>:

void tft_fill_rectxy(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		uint16_t color) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4604      	mov	r4, r0
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	4603      	mov	r3, r0
 8001320:	80bb      	strh	r3, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]
 8001326:	4613      	mov	r3, r2
 8001328:	803b      	strh	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	883a      	ldrh	r2, [r7, #0]
 8001334:	1c51      	adds	r1, r2, #1
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	1a8a      	subs	r2, r1, r2
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]

	if (n > tft_pixel_count)
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <tft_fill_rectxy+0x8c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d902      	bls.n	8001350 <tft_fill_rectxy+0x44>
		n = tft_pixel_count;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <tft_fill_rectxy+0x8c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]

	tft_cursor_position(x0, y0, x1, y1);
 8001350:	883b      	ldrh	r3, [r7, #0]
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	88b9      	ldrh	r1, [r7, #4]
 8001356:	88f8      	ldrh	r0, [r7, #6]
 8001358:	f7ff ff68 	bl	800122c <tft_cursor_position>
	for (; n > 0; n--) {
 800135c:	e014      	b.n	8001388 <tft_fill_rectxy+0x7c>
		tft_send_data(tft, color >> 8);
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <tft_fill_rectxy+0x90>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	8c3b      	ldrh	r3, [r7, #32]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f000 f90b 	bl	8001588 <tft_send_data>
		tft_send_data(tft, color & 0xff);
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <tft_fill_rectxy+0x90>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	8c3a      	ldrh	r2, [r7, #32]
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f903 	bl	8001588 <tft_send_data>
	for (; n > 0; n--) {
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1e7      	bne.n	800135e <tft_fill_rectxy+0x52>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	200000c0 	.word	0x200000c0
 800139c:	200000b4 	.word	0x200000b4

080013a0 <tft_fill_rect>:

void tft_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	80fb      	strh	r3, [r7, #6]
 80013b2:	4603      	mov	r3, r0
 80013b4:	80bb      	strh	r3, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]
 80013ba:	4613      	mov	r3, r2
 80013bc:	803b      	strh	r3, [r7, #0]
	tft_fill_rectxy(x, y, x + w, y + h, color);
 80013be:	88f8      	ldrh	r0, [r7, #6]
 80013c0:	88b9      	ldrh	r1, [r7, #4]
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	4413      	add	r3, r2
 80013c8:	b29c      	uxth	r4, r3
 80013ca:	88ba      	ldrh	r2, [r7, #4]
 80013cc:	883b      	ldrh	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4613      	mov	r3, r2
 80013d8:	4622      	mov	r2, r4
 80013da:	f7ff ff97 	bl	800130c <tft_fill_rectxy>
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <tft_fill_screen>:

void tft_fill_screen(uint16_t color) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]

	if (rot_num == 1 || rot_num == 3)
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <tft_fill_screen+0x80>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d003      	beq.n	8001402 <tft_fill_screen+0x1a>
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <tft_fill_screen+0x80>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d113      	bne.n	800142a <tft_fill_screen+0x42>
		tft_fill_rect(0, 0, tft_height - 1, tft_width - 1, color);
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <tft_fill_screen+0x84>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <tft_fill_screen+0x88>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29b      	uxth	r3, r3
 8001418:	b219      	sxth	r1, r3
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	2100      	movs	r1, #0
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ffbc 	bl	80013a0 <tft_fill_rect>
	else if (rot_num == 2 || rot_num == 4)
		tft_fill_rect(0, 0, tft_width - 1, tft_height - 1, color);

}
 8001428:	e01a      	b.n	8001460 <tft_fill_screen+0x78>
	else if (rot_num == 2 || rot_num == 4)
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <tft_fill_screen+0x80>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d003      	beq.n	800143a <tft_fill_screen+0x52>
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <tft_fill_screen+0x80>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d112      	bne.n	8001460 <tft_fill_screen+0x78>
		tft_fill_rect(0, 0, tft_width - 1, tft_height - 1, color);
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <tft_fill_screen+0x88>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <tft_fill_screen+0x84>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	b219      	sxth	r1, r3
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	460b      	mov	r3, r1
 8001458:	2100      	movs	r1, #0
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ffa0 	bl	80013a0 <tft_fill_rect>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000004 	.word	0x20000004
 800146c:	200000bc 	.word	0x200000bc
 8001470:	200000b8 	.word	0x200000b8

08001474 <tft_draw_pixel>:

void tft_draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	460b      	mov	r3, r1
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	807b      	strh	r3, [r7, #2]
	tft_fill_rect(x, y, 0, 0, color);
 8001486:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800148a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2200      	movs	r2, #0
 8001496:	f7ff ff83 	bl	80013a0 <tft_fill_rect>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <tft_draw_RGB_bitmap>:
		}
	}
}

void tft_draw_RGB_bitmap(int16_t x, int16_t y, const uint16_t bitmap[],
		int16_t w, int16_t h) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	81fb      	strh	r3, [r7, #14]
 80014b0:	460b      	mov	r3, r1
 80014b2:	81bb      	strh	r3, [r7, #12]
 80014b4:	4613      	mov	r3, r2
 80014b6:	80fb      	strh	r3, [r7, #6]
	for (int16_t j = 0; j < h; j++, y++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	82fb      	strh	r3, [r7, #22]
 80014bc:	e030      	b.n	8001520 <tft_draw_RGB_bitmap+0x7e>
		for (int16_t i = 0; i < w; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	82bb      	strh	r3, [r7, #20]
 80014c2:	e01b      	b.n	80014fc <tft_draw_RGB_bitmap+0x5a>
			tft_draw_pixel(x + i, y, pgm_read_word(&bitmap[j * w + i]));
 80014c4:	89fa      	ldrh	r2, [r7, #14]
 80014c6:	8abb      	ldrh	r3, [r7, #20]
 80014c8:	4413      	add	r3, r2
 80014ca:	b298      	uxth	r0, r3
 80014cc:	89b9      	ldrh	r1, [r7, #12]
 80014ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d6:	fb02 f203 	mul.w	r2, r2, r3
 80014da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7ff ffc2 	bl	8001474 <tft_draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 80014f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	82bb      	strh	r3, [r7, #20]
 80014fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbdd      	blt.n	80014c4 <tft_draw_RGB_bitmap+0x22>
	for (int16_t j = 0; j < h; j++, y++) {
 8001508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	82fb      	strh	r3, [r7, #22]
 8001514:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001518:	b29b      	uxth	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	81bb      	strh	r3, [r7, #12]
 8001520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001524:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbc8      	blt.n	80014be <tft_draw_RGB_bitmap+0x1c>
		}
	}
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <tft_send_cmd>:
 *      Author: alvenan
 */

#include "tft_spi.h"

void tft_send_cmd(TFT *tft, uint8_t cmd) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
	tft_dc_cmd(tft); tft_cs_on(tft);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6898      	ldr	r0, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8a5b      	ldrh	r3, [r3, #18]
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	f000 fbe1 	bl	8001d14 <HAL_GPIO_WritePin>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6858      	ldr	r0, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	8a1b      	ldrh	r3, [r3, #16]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f000 fbd9 	bl	8001d14 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, cmd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	1cf9      	adds	r1, r7, #3
 8001568:	2305      	movs	r3, #5
 800156a:	2201      	movs	r2, #1
 800156c:	f003 fd69 	bl	8005042 <HAL_SPI_Transmit>
	tft_cs_off(tft);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6858      	ldr	r0, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	8a1b      	ldrh	r3, [r3, #16]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fbca 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <tft_send_data>:

void tft_send_data(TFT *tft, uint8_t data) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
	tft_dc_data(tft); tft_cs_on(tft);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	8a5b      	ldrh	r3, [r3, #18]
 800159c:	2201      	movs	r2, #1
 800159e:	4619      	mov	r1, r3
 80015a0:	f000 fbb8 	bl	8001d14 <HAL_GPIO_WritePin>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6858      	ldr	r0, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	8a1b      	ldrh	r3, [r3, #16]
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	f000 fbb0 	bl	8001d14 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, data);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	1cf9      	adds	r1, r7, #3
 80015ba:	2305      	movs	r3, #5
 80015bc:	2201      	movs	r2, #1
 80015be:	f003 fd40 	bl	8005042 <HAL_SPI_Transmit>
	tft_cs_off(tft);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6858      	ldr	r0, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8a1b      	ldrh	r3, [r3, #16]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	f000 fba1 	bl	8001d14 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <tft_interface_init>:
}

TFT* tft_interface_init(SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin) {
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]

	TFT *tft = (TFT*) malloc(sizeof(TFT));
 80015ea:	2018      	movs	r0, #24
 80015ec:	f007 f90e 	bl	800880c <malloc>
 80015f0:	4603      	mov	r3, r0
 80015f2:	617b      	str	r3, [r7, #20]

	tft->spi_handler = spi;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]
	tft->cs_port = cs_port;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	605a      	str	r2, [r3, #4]
	tft->cs_pin = cs_pin;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	821a      	strh	r2, [r3, #16]
	tft->dc_port = dc_port;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	609a      	str	r2, [r3, #8]
	tft->dc_pin = dc_pin;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	8c3a      	ldrh	r2, [r7, #32]
 8001610:	825a      	strh	r2, [r3, #18]
	tft->rst_port = rst_port;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	60da      	str	r2, [r3, #12]
	tft->rst_pin = rst_pin;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161c:	829a      	strh	r2, [r3, #20]

	tft_cs_off(tft);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	8a1b      	ldrh	r3, [r3, #16]
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	f000 fb73 	bl	8001d14 <HAL_GPIO_WritePin>

	return tft;
 800162e:	697b      	ldr	r3, [r7, #20]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001654:	4c0b      	ldr	r4, [pc, #44]	; (8001684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001662:	f7ff fba5 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001666:	f007 f8ad 	bl	80087c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7fe ff29 	bl	80004c0 <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800167c:	08028a10 	.word	0x08028a10
  ldr r2, =_sbss
 8001680:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001684:	2000090c 	.word	0x2000090c

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_Init+0x40>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_Init+0x40>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_Init+0x40>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f94f 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff f99e 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f967 	bl	80019c2 <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170c:	f000 f92f 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000000 	.word	0x20000000
 8001728:	2000000c 	.word	0x2000000c
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000000c 	.word	0x2000000c
 8001754:	2000021c 	.word	0x2000021c

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000021c 	.word	0x2000021c

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e16b      	b.n	8001cd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 815a 	bne.w	8001cca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80b4 	beq.w	8001cca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b60      	ldr	r3, [pc, #384]	; (8001ce8 <HAL_GPIO_Init+0x30c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ce8 <HAL_GPIO_Init+0x30c>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_GPIO_Init+0x30c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <HAL_GPIO_Init+0x310>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_GPIO_Init+0x314>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <HAL_GPIO_Init+0x318>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_GPIO_Init+0x31c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_GPIO_Init+0x320>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x21a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x216>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_GPIO_Init+0x328>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x212>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x32c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x20e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x330>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x20a>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00e      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001be6:	2308      	movs	r3, #8
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bea:	2306      	movs	r3, #6
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x228>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x310>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c46:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f ae90 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40021400 	.word	0x40021400
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40021c00 	.word	0x40021c00
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d48:	b08f      	sub	sp, #60	; 0x3c
 8001d4a:	af0a      	add	r7, sp, #40	; 0x28
 8001d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e054      	b.n	8001e02 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fa76 	bl	8008264 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fbcc 	bl	8005534 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	687e      	ldr	r6, [r7, #4]
 8001da4:	466d      	mov	r5, sp
 8001da6:	f106 0410 	add.w	r4, r6, #16
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dba:	1d33      	adds	r3, r6, #4
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	6838      	ldr	r0, [r7, #0]
 8001dc0:	f003 fb46 	bl	8005450 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fbc3 	bl	8005556 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	687e      	ldr	r6, [r7, #4]
 8001dd8:	466d      	mov	r5, sp
 8001dda:	f106 0410 	add.w	r4, r6, #16
 8001dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dee:	1d33      	adds	r3, r6, #4
 8001df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df2:	6838      	ldr	r0, [r7, #0]
 8001df4:	f003 fd2a 	bl	800584c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e0a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e0a:	b590      	push	{r4, r7, lr}
 8001e0c:	b089      	sub	sp, #36	; 0x24
 8001e0e:	af04      	add	r7, sp, #16
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	4608      	mov	r0, r1
 8001e14:	4611      	mov	r1, r2
 8001e16:	461a      	mov	r2, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	70fb      	strb	r3, [r7, #3]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70bb      	strb	r3, [r7, #2]
 8001e20:	4613      	mov	r3, r2
 8001e22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_HCD_HC_Init+0x28>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e076      	b.n	8001f20 <HAL_HCD_HC_Init+0x116>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	333d      	adds	r3, #61	; 0x3d
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	787a      	ldrb	r2, [r7, #1]
 8001e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3340      	adds	r3, #64	; 0x40
 8001e6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e6e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	212c      	movs	r1, #44	; 0x2c
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3339      	adds	r3, #57	; 0x39
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	333f      	adds	r3, #63	; 0x3f
 8001e90:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	78ba      	ldrb	r2, [r7, #2]
 8001e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e9e:	b2d0      	uxtb	r0, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	333a      	adds	r3, #58	; 0x3a
 8001eac:	4602      	mov	r2, r0
 8001eae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001eb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da09      	bge.n	8001ecc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	333b      	adds	r3, #59	; 0x3b
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e008      	b.n	8001ede <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	333b      	adds	r3, #59	; 0x3b
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	333c      	adds	r3, #60	; 0x3c
 8001eec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ef0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	787c      	ldrb	r4, [r7, #1]
 8001ef8:	78ba      	ldrb	r2, [r7, #2]
 8001efa:	78f9      	ldrb	r1, [r7, #3]
 8001efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4623      	mov	r3, r4
 8001f0e:	f003 fe17 	bl	8005b40 <USB_HC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_HCD_HC_Halt+0x1e>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e00f      	b.n	8001f66 <HAL_HCD_HC_Halt+0x3e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 f853 	bl	8006002 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	4608      	mov	r0, r1
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	70fb      	strb	r3, [r7, #3]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70bb      	strb	r3, [r7, #2]
 8001f86:	4613      	mov	r3, r2
 8001f88:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	333b      	adds	r3, #59	; 0x3b
 8001f98:	78ba      	ldrb	r2, [r7, #2]
 8001f9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	333f      	adds	r3, #63	; 0x3f
 8001faa:	787a      	ldrb	r2, [r7, #1]
 8001fac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fae:	7c3b      	ldrb	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d112      	bne.n	8001fda <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	333d      	adds	r3, #61	; 0x3d
 8001fd4:	7f3a      	ldrb	r2, [r7, #28]
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e008      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3342      	adds	r3, #66	; 0x42
 8001fe8:	2202      	movs	r2, #2
 8001fea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	f200 80c6 	bhi.w	8002180 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	0800216d 	.word	0x0800216d
 8002004:	08002071 	.word	0x08002071
 8002008:	080020ef 	.word	0x080020ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800200c:	7c3b      	ldrb	r3, [r7, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 80b8 	bne.w	8002184 <HAL_HCD_HC_SubmitRequest+0x214>
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80b4 	bne.w	8002184 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800201c:	8b3b      	ldrh	r3, [r7, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3355      	adds	r3, #85	; 0x55
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3355      	adds	r3, #85	; 0x55
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3342      	adds	r3, #66	; 0x42
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800205a:	e093      	b.n	8002184 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3342      	adds	r3, #66	; 0x42
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
      break;
 800206e:	e089      	b.n	8002184 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002070:	78bb      	ldrb	r3, [r7, #2]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11d      	bne.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3355      	adds	r3, #85	; 0x55
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3342      	adds	r3, #66	; 0x42
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800209c:	e073      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3342      	adds	r3, #66	; 0x42
 80020ac:	2202      	movs	r2, #2
 80020ae:	701a      	strb	r2, [r3, #0]
      break;
 80020b0:	e069      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3354      	adds	r3, #84	; 0x54
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3342      	adds	r3, #66	; 0x42
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
      break;
 80020d8:	e055      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3342      	adds	r3, #66	; 0x42
 80020e8:	2202      	movs	r2, #2
 80020ea:	701a      	strb	r2, [r3, #0]
      break;
 80020ec:	e04b      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020ee:	78bb      	ldrb	r3, [r7, #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11d      	bne.n	8002130 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3355      	adds	r3, #85	; 0x55
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3342      	adds	r3, #66	; 0x42
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800211a:	e034      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3342      	adds	r3, #66	; 0x42
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
      break;
 800212e:	e02a      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3354      	adds	r3, #84	; 0x54
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3342      	adds	r3, #66	; 0x42
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
      break;
 8002156:	e016      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3342      	adds	r3, #66	; 0x42
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e00c      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3342      	adds	r3, #66	; 0x42
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
      break;
 800217e:	e002      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002180:	bf00      	nop
 8002182:	e000      	b.n	8002186 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002184:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3344      	adds	r3, #68	; 0x44
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	8b3a      	ldrh	r2, [r7, #24]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	202c      	movs	r0, #44	; 0x2c
 80021a0:	fb00 f303 	mul.w	r3, r0, r3
 80021a4:	440b      	add	r3, r1
 80021a6:	334c      	adds	r3, #76	; 0x4c
 80021a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3360      	adds	r3, #96	; 0x60
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3350      	adds	r3, #80	; 0x50
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3339      	adds	r3, #57	; 0x39
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	222c      	movs	r2, #44	; 0x2c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	3338      	adds	r3, #56	; 0x38
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	18d1      	adds	r1, r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	f003 fda6 	bl	8005d5c <USB_HC_StartXfer>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop

0800221c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fac9 	bl	80057ca <USB_GetMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 80f6 	bne.w	800242c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 faad 	bl	80057a4 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80ec 	beq.w	800242a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 faa4 	bl	80057a4 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002266:	d104      	bne.n	8002272 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fa94 	bl	80057a4 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002286:	d104      	bne.n	8002292 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002290:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fa84 	bl	80057a4 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a6:	d104      	bne.n	80022b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fa74 	bl	80057a4 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d103      	bne.n	80022ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2202      	movs	r2, #2
 80022cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fa66 	bl	80057a4 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e2:	d11c      	bne.n	800231e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022fe:	2110      	movs	r1, #16
 8002300:	6938      	ldr	r0, [r7, #16]
 8002302:	f003 f975 	bl	80055f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002306:	6938      	ldr	r0, [r7, #16]
 8002308:	f003 f996 	bl	8005638 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fb4e 	bl	80059b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f006 f821 	bl	8008360 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fa3e 	bl	80057a4 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002332:	d102      	bne.n	800233a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f001 fa03 	bl	8003740 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa30 	bl	80057a4 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d106      	bne.n	800235c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f005 ffea 	bl	8008328 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2208      	movs	r2, #8
 800235a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fa1f 	bl	80057a4 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b10      	cmp	r3, #16
 800236e:	d101      	bne.n	8002374 <HAL_HCD_IRQHandler+0x158>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_HCD_IRQHandler+0x15a>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0210 	bic.w	r2, r2, #16
 8002388:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f906 	bl	800359c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0210 	orr.w	r2, r2, #16
 800239e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 f9fd 	bl	80057a4 <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b4:	d13a      	bne.n	800242c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fe10 	bl	8005fe0 <USB_HC_ReadInterrupt>
 80023c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e025      	b.n	8002414 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d018      	beq.n	800240e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f2:	d106      	bne.n	8002402 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8ab 	bl	8002556 <HCD_HC_IN_IRQHandler>
 8002400:	e005      	b.n	800240e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fcc6 	bl	8002d9a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3d4      	bcc.n	80023c8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002426:	615a      	str	r2, [r3, #20]
 8002428:	e000      	b.n	800242c <HAL_HCD_IRQHandler+0x210>
      return;
 800242a:	bf00      	nop
    }
  }
}
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_HCD_Start+0x16>
 8002444:	2302      	movs	r3, #2
 8002446:	e013      	b.n	8002470 <HAL_HCD_Start+0x3e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fb10 	bl	8005a7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 f856 	bl	8005512 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_HCD_Stop+0x16>
 800248a:	2302      	movs	r3, #2
 800248c:	e00d      	b.n	80024aa <HAL_HCD_Stop+0x32>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff0a 	bl	80062b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fab2 	bl	8005a28 <USB_ResetPort>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3350      	adds	r3, #80	; 0x50
 8002510:	681b      	ldr	r3, [r3, #0]
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 faf6 	bl	8005b1c <USB_GetCurrentFrame>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fad1 	bl	8005aee <USB_GetHostSpeed>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d119      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2304      	movs	r3, #4
 8002596:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	0151      	lsls	r1, r2, #5
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	440a      	add	r2, r1
 80025ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	60d3      	str	r3, [r2, #12]
 80025b8:	e101      	b.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d12b      	bne.n	800262a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2207      	movs	r2, #7
 80025f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	0151      	lsls	r1, r2, #5
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	440a      	add	r2, r1
 800260e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fced 	bl	8006002 <USB_HC_Halt>
 8002628:	e0c9      	b.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d109      	bne.n	8002654 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2320      	movs	r3, #32
 8002650:	6093      	str	r3, [r2, #8]
 8002652:	e0b4      	b.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d133      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	440a      	add	r2, r1
 8002680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3361      	adds	r3, #97	; 0x61
 8002698:	2205      	movs	r2, #5
 800269a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	2308      	movs	r3, #8
 80026be:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fc99 	bl	8006002 <USB_HC_Halt>
 80026d0:	e075      	b.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e8:	d134      	bne.n	8002754 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	0151      	lsls	r1, r2, #5
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	440a      	add	r2, r1
 8002700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3361      	adds	r3, #97	; 0x61
 8002718:	2208      	movs	r2, #8
 800271a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2310      	movs	r3, #16
 800272c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002740:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fc58 	bl	8006002 <USB_HC_Halt>
 8002752:	e034      	b.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d129      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	0151      	lsls	r1, r2, #5
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	440a      	add	r2, r1
 8002780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3361      	adds	r3, #97	; 0x61
 8002798:	2206      	movs	r2, #6
 800279a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fc2b 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d4:	d122      	bne.n	800281c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fbfe 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002818:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800281a:	e2ba      	b.n	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 811b 	bne.w	8002a6a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d019      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3348      	adds	r3, #72	; 0x48
 800284a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	0159      	lsls	r1, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	440b      	add	r3, r1
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800285e:	1ad2      	subs	r2, r2, r3
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	202c      	movs	r0, #44	; 0x2c
 8002866:	fb00 f303 	mul.w	r3, r0, r3
 800286a:	440b      	add	r3, r1
 800286c:	3350      	adds	r3, #80	; 0x50
 800286e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3361      	adds	r3, #97	; 0x61
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	333f      	adds	r3, #63	; 0x3f
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d121      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	0151      	lsls	r1, r2, #5
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	440a      	add	r2, r1
 80028e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fb82 	bl	8006002 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	461a      	mov	r2, r3
 800290c:	2310      	movs	r3, #16
 800290e:	6093      	str	r3, [r2, #8]
 8002910:	e066      	b.n	80029e0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333f      	adds	r3, #63	; 0x3f
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d127      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002944:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3360      	adds	r3, #96	; 0x60
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	b2d9      	uxtb	r1, r3
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	202c      	movs	r0, #44	; 0x2c
 8002962:	fb00 f303 	mul.w	r3, r0, r3
 8002966:	4413      	add	r3, r2
 8002968:	3360      	adds	r3, #96	; 0x60
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f005 fd04 	bl	800837c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002974:	e034      	b.n	80029e0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	333f      	adds	r3, #63	; 0x3f
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d12a      	bne.n	80029e0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3360      	adds	r3, #96	; 0x60
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3354      	adds	r3, #84	; 0x54
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3354      	adds	r3, #84	; 0x54
 80029c0:	4602      	mov	r2, r0
 80029c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	b2d9      	uxtb	r1, r3
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	202c      	movs	r0, #44	; 0x2c
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f005 fcce 	bl	800837c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d12b      	bne.n	8002a40 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3348      	adds	r3, #72	; 0x48
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	202c      	movs	r0, #44	; 0x2c
 80029fe:	fb00 f202 	mul.w	r2, r0, r2
 8002a02:	440a      	add	r2, r1
 8002a04:	3240      	adds	r2, #64	; 0x40
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 81be 	beq.w	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3354      	adds	r3, #84	; 0x54
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2d8      	uxtb	r0, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3354      	adds	r3, #84	; 0x54
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	701a      	strb	r2, [r3, #0]
}
 8002a3e:	e1a8      	b.n	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3354      	adds	r3, #84	; 0x54
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2d8      	uxtb	r0, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3354      	adds	r3, #84	; 0x54
 8002a64:	4602      	mov	r2, r0
 8002a66:	701a      	strb	r2, [r3, #0]
}
 8002a68:	e193      	b.n	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f040 8106 	bne.w	8002c8e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	0151      	lsls	r1, r2, #5
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	440a      	add	r2, r1
 8002a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9c:	f023 0302 	bic.w	r3, r3, #2
 8002aa0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d109      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3360      	adds	r3, #96	; 0x60
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e0c9      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d109      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3360      	adds	r3, #96	; 0x60
 8002aec:	2205      	movs	r2, #5
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e0b5      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3361      	adds	r3, #97	; 0x61
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d009      	beq.n	8002b1a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3361      	adds	r3, #97	; 0x61
 8002b14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d150      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	335c      	adds	r3, #92	; 0x5c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	202c      	movs	r0, #44	; 0x2c
 8002b32:	fb00 f303 	mul.w	r3, r0, r3
 8002b36:	440b      	add	r3, r1
 8002b38:	335c      	adds	r3, #92	; 0x5c
 8002b3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	335c      	adds	r3, #92	; 0x5c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d912      	bls.n	8002b76 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	335c      	adds	r3, #92	; 0x5c
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	2204      	movs	r2, #4
 8002b72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b74:	e073      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3360      	adds	r3, #96	; 0x60
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b9e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bba:	e050      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3361      	adds	r3, #97	; 0x61
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d122      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3360      	adds	r3, #96	; 0x60
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e023      	b.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3361      	adds	r3, #97	; 0x61
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b07      	cmp	r3, #7
 8002c28:	d119      	bne.n	8002c5e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	440b      	add	r3, r1
 8002c48:	335c      	adds	r3, #92	; 0x5c
 8002c4a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	b2d9      	uxtb	r1, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3360      	adds	r3, #96	; 0x60
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f005 fb78 	bl	800837c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c8c:	e081      	b.n	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d176      	bne.n	8002d92 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	333f      	adds	r3, #63	; 0x3f
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d121      	bne.n	8002cfc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	335c      	adds	r3, #92	; 0x5c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	0151      	lsls	r1, r2, #5
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	440a      	add	r2, r1
 8002ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 f984 	bl	8006002 <USB_HC_Halt>
 8002cfa:	e041      	b.n	8002d80 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	333f      	adds	r3, #63	; 0x3f
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d12d      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	335c      	adds	r3, #92	; 0x5c
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d120      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3361      	adds	r3, #97	; 0x61
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 f941 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2310      	movs	r3, #16
 8002d90:	6093      	str	r3, [r2, #8]
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b088      	sub	sp, #32
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d119      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2304      	movs	r3, #4
 8002dda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	0151      	lsls	r1, r2, #5
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	440a      	add	r2, r1
 8002df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002dfc:	e3ca      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d13e      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2320      	movs	r3, #32
 8002e24:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	333d      	adds	r3, #61	; 0x3d
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f040 83ac 	bne.w	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	333d      	adds	r3, #61	; 0x3d
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 f8b9 	bl	8006002 <USB_HC_Halt>
}
 8002e90:	e380      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea8:	d122      	bne.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	0151      	lsls	r1, r2, #5
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 f894 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eec:	6093      	str	r3, [r2, #8]
}
 8002eee:	e351      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d150      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d111      	bne.n	8002f52 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333d      	adds	r3, #61	; 0x3d
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	0151      	lsls	r1, r2, #5
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	440a      	add	r2, r1
 8002f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 f840 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2301      	movs	r3, #1
 8002f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
}
 8002fa6:	e2f5      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d13c      	bne.n	8003038 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3361      	adds	r3, #97	; 0x61
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333d      	adds	r3, #61	; 0x3d
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	0151      	lsls	r1, r2, #5
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	440a      	add	r2, r1
 800300a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f002 ffef 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	6093      	str	r3, [r2, #8]
}
 8003036:	e2ad      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d12a      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	461a      	mov	r2, r3
 800305c:	2308      	movs	r3, #8
 800305e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f002 ffb9 	bl	8006002 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	2205      	movs	r2, #5
 80030a0:	701a      	strb	r2, [r3, #0]
}
 80030a2:	e277      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d150      	bne.n	800315c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	335c      	adds	r3, #92	; 0x5c
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3361      	adds	r3, #97	; 0x61
 80030da:	2203      	movs	r2, #3
 80030dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d112      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	333c      	adds	r3, #60	; 0x3c
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	440a      	add	r2, r1
 800312e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f002 ff5d 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2310      	movs	r3, #16
 8003158:	6093      	str	r3, [r2, #8]
}
 800315a:	e21b      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d174      	bne.n	800325c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d121      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	3361      	adds	r3, #97	; 0x61
 8003188:	2206      	movs	r2, #6
 800318a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	0151      	lsls	r1, r2, #5
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	440a      	add	r2, r1
 80031a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 ff23 	bl	8006002 <USB_HC_Halt>
 80031bc:	e044      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	335c      	adds	r3, #92	; 0x5c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	202c      	movs	r0, #44	; 0x2c
 80031d6:	fb00 f303 	mul.w	r3, r0, r3
 80031da:	440b      	add	r3, r1
 80031dc:	335c      	adds	r3, #92	; 0x5c
 80031de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d920      	bls.n	8003236 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	335c      	adds	r3, #92	; 0x5c
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3360      	adds	r3, #96	; 0x60
 8003214:	2204      	movs	r2, #4
 8003216:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	202c      	movs	r0, #44	; 0x2c
 8003222:	fb00 f303 	mul.w	r3, r0, r3
 8003226:	4413      	add	r3, r2
 8003228:	3360      	adds	r3, #96	; 0x60
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f005 f8a4 	bl	800837c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003234:	e008      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3360      	adds	r3, #96	; 0x60
 8003244:	2202      	movs	r2, #2
 8003246:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	6093      	str	r3, [r2, #8]
}
 800325a:	e19b      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d134      	bne.n	80032de <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	440a      	add	r2, r1
 800328a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f002 feaf 	bl	8006002 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	2310      	movs	r3, #16
 80032b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3361      	adds	r3, #97	; 0x61
 80032d8:	2208      	movs	r2, #8
 80032da:	701a      	strb	r2, [r3, #0]
}
 80032dc:	e15a      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f040 814f 	bne.w	8003594 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3361      	adds	r3, #97	; 0x61
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d17d      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3360      	adds	r3, #96	; 0x60
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	333f      	adds	r3, #63	; 0x3f
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d00a      	beq.n	8003366 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	333f      	adds	r3, #63	; 0x3f
 800335e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003360:	2b03      	cmp	r3, #3
 8003362:	f040 8100 	bne.w	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d113      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3355      	adds	r3, #85	; 0x55
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2d8      	uxtb	r0, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3355      	adds	r3, #85	; 0x55
 8003392:	4602      	mov	r2, r0
 8003394:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80e3 	bne.w	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	334c      	adds	r3, #76	; 0x4c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80d8 	beq.w	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	334c      	adds	r3, #76	; 0x4c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	202c      	movs	r0, #44	; 0x2c
 80033cc:	fb00 f202 	mul.w	r2, r0, r2
 80033d0:	440a      	add	r2, r1
 80033d2:	3240      	adds	r2, #64	; 0x40
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	3b01      	subs	r3, #1
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	202c      	movs	r0, #44	; 0x2c
 80033e0:	fb00 f202 	mul.w	r2, r0, r2
 80033e4:	440a      	add	r2, r1
 80033e6:	3240      	adds	r2, #64	; 0x40
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80b5 	beq.w	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3355      	adds	r3, #85	; 0x55
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2d8      	uxtb	r0, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3355      	adds	r3, #85	; 0x55
 8003420:	4602      	mov	r2, r0
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e09f      	b.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3361      	adds	r3, #97	; 0x61
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d109      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	2202      	movs	r2, #2
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e08b      	b.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3361      	adds	r3, #97	; 0x61
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d109      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3360      	adds	r3, #96	; 0x60
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e077      	b.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3361      	adds	r3, #97	; 0x61
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d109      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3360      	adds	r3, #96	; 0x60
 8003498:	2205      	movs	r2, #5
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e063      	b.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d009      	beq.n	80034c6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d14f      	bne.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	440b      	add	r3, r1
 80034e4:	335c      	adds	r3, #92	; 0x5c
 80034e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	335c      	adds	r3, #92	; 0x5c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d912      	bls.n	8003522 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	335c      	adds	r3, #92	; 0x5c
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3360      	adds	r3, #96	; 0x60
 800351c:	2204      	movs	r2, #4
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e021      	b.n	8003566 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3360      	adds	r3, #96	; 0x60
 8003530:	2202      	movs	r2, #2
 8003532:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800354a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003552:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	2302      	movs	r3, #2
 8003576:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	b2d9      	uxtb	r1, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	202c      	movs	r0, #44	; 0x2c
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	4413      	add	r3, r2
 8003588:	3360      	adds	r3, #96	; 0x60
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f004 fef4 	bl	800837c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003594:	bf00      	nop
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	0c5b      	lsrs	r3, r3, #17
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035d0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d004      	beq.n	80035e2 <HCD_RXQLVL_IRQHandler+0x46>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	f000 80a9 	beq.w	8003732 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035e0:	e0aa      	b.n	8003738 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a6 	beq.w	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3344      	adds	r3, #68	; 0x44
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809b 	beq.w	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3350      	adds	r3, #80	; 0x50
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	441a      	add	r2, r3
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	202c      	movs	r0, #44	; 0x2c
 800361a:	fb00 f303 	mul.w	r3, r0, r3
 800361e:	440b      	add	r3, r1
 8003620:	334c      	adds	r3, #76	; 0x4c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d87a      	bhi.n	800371e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3344      	adds	r3, #68	; 0x44
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	b292      	uxth	r2, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f002 f857 	bl	80056f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3344      	adds	r3, #68	; 0x44
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	441a      	add	r2, r3
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	202c      	movs	r0, #44	; 0x2c
 8003660:	fb00 f303 	mul.w	r3, r0, r3
 8003664:	440b      	add	r3, r1
 8003666:	3344      	adds	r3, #68	; 0x44
 8003668:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3350      	adds	r3, #80	; 0x50
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	441a      	add	r2, r3
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	202c      	movs	r0, #44	; 0x2c
 8003684:	fb00 f303 	mul.w	r3, r0, r3
 8003688:	440b      	add	r3, r1
 800368a:	3350      	adds	r3, #80	; 0x50
 800368c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	0cdb      	lsrs	r3, r3, #19
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3340      	adds	r3, #64	; 0x40
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13c      	bne.n	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d039      	beq.n	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036d8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036e0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3354      	adds	r3, #84	; 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2d8      	uxtb	r0, r3
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3354      	adds	r3, #84	; 0x54
 8003718:	4602      	mov	r2, r0
 800371a:	701a      	strb	r2, [r3, #0]
      break;
 800371c:	e00b      	b.n	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	2204      	movs	r2, #4
 800372e:	701a      	strb	r2, [r3, #0]
      break;
 8003730:	e001      	b.n	8003736 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003736:	bf00      	nop
  }
}
 8003738:	bf00      	nop
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800376c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d10b      	bne.n	8003790 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f004 fdde 	bl	8008344 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d132      	bne.n	8003800 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f043 0308 	orr.w	r3, r3, #8
 80037a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d126      	bne.n	80037fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d113      	bne.n	80037dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037be:	d106      	bne.n	80037ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2102      	movs	r1, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 f8f4 	bl	80059b4 <USB_InitFSLSPClkSel>
 80037cc:	e011      	b.n	80037f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f002 f8ed 	bl	80059b4 <USB_InitFSLSPClkSel>
 80037da:	e00a      	b.n	80037f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ea:	461a      	mov	r2, r3
 80037ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f004 fdd0 	bl	8008398 <HAL_HCD_PortEnabled_Callback>
 80037f8:	e002      	b.n	8003800 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f004 fdda 	bl	80083b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d103      	bne.n	8003812 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003818:	461a      	mov	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6013      	str	r3, [r2, #0]
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e12b      	b.n	8003a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd f8fe 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800388c:	f001 f9fc 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a81      	ldr	r2, [pc, #516]	; (8003a9c <HAL_I2C_Init+0x274>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d807      	bhi.n	80038ac <HAL_I2C_Init+0x84>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <HAL_I2C_Init+0x278>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e006      	b.n	80038ba <HAL_I2C_Init+0x92>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a7d      	ldr	r2, [pc, #500]	; (8003aa4 <HAL_I2C_Init+0x27c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bf94      	ite	ls
 80038b4:	2301      	movls	r3, #1
 80038b6:	2300      	movhi	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0e7      	b.n	8003a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a78      	ldr	r2, [pc, #480]	; (8003aa8 <HAL_I2C_Init+0x280>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0c9b      	lsrs	r3, r3, #18
 80038cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <HAL_I2C_Init+0x274>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d802      	bhi.n	80038fc <HAL_I2C_Init+0xd4>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3301      	adds	r3, #1
 80038fa:	e009      	b.n	8003910 <HAL_I2C_Init+0xe8>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	4a69      	ldr	r2, [pc, #420]	; (8003aac <HAL_I2C_Init+0x284>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	3301      	adds	r3, #1
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	495c      	ldr	r1, [pc, #368]	; (8003a9c <HAL_I2C_Init+0x274>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d819      	bhi.n	8003964 <HAL_I2C_Init+0x13c>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e59      	subs	r1, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fbb1 f3f3 	udiv	r3, r1, r3
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003944:	400b      	ands	r3, r1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_I2C_Init+0x138>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1e59      	subs	r1, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fbb1 f3f3 	udiv	r3, r1, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395e:	e051      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 8003960:	2304      	movs	r3, #4
 8003962:	e04f      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d111      	bne.n	8003990 <HAL_I2C_Init+0x168>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	440b      	add	r3, r1
 800397a:	fbb0 f3f3 	udiv	r3, r0, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e012      	b.n	80039b6 <HAL_I2C_Init+0x18e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	0099      	lsls	r1, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Init+0x196>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e022      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10e      	bne.n	80039e4 <HAL_I2C_Init+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e58      	subs	r0, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	440b      	add	r3, r1
 80039d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e2:	e00f      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	6809      	ldr	r1, [r1, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6911      	ldr	r1, [r2, #16]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	000186a0 	.word	0x000186a0
 8003aa0:	001e847f 	.word	0x001e847f
 8003aa4:	003d08ff 	.word	0x003d08ff
 8003aa8:	431bde83 	.word	0x431bde83
 8003aac:	10624dd3 	.word	0x10624dd3

08003ab0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e128      	b.n	8003d14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a90      	ldr	r2, [pc, #576]	; (8003d1c <HAL_I2S_Init+0x26c>)
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fc ffff 	bl	8000ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003af8:	f023 030f 	bic.w	r3, r3, #15
 8003afc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2202      	movs	r2, #2
 8003b04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d060      	beq.n	8003bd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b16:	2310      	movs	r3, #16
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e001      	b.n	8003b20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d802      	bhi.n	8003b2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f001 f9a0 	bl	8004e74 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3e:	d125      	bne.n	8003b8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	3305      	adds	r3, #5
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e01f      	b.n	8003baa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	3305      	adds	r3, #5
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e00e      	b.n	8003baa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	3305      	adds	r3, #5
 8003ba8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_I2S_Init+0x270>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e003      	b.n	8003bd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d902      	bls.n	8003be4 <HAL_I2S_Init+0x134>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2bff      	cmp	r3, #255	; 0xff
 8003be2:	d907      	bls.n	8003bf4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e08f      	b.n	8003d14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	ea42 0103 	orr.w	r1, r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c12:	f023 030f 	bic.w	r3, r3, #15
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6851      	ldr	r1, [r2, #4]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6892      	ldr	r2, [r2, #8]
 8003c1e:	4311      	orrs	r1, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68d2      	ldr	r2, [r2, #12]
 8003c24:	4311      	orrs	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6992      	ldr	r2, [r2, #24]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d161      	bne.n	8003d04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_I2S_Init+0x274>)
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <HAL_I2S_Init+0x278>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2S_Init+0x1a4>
 8003c50:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_I2S_Init+0x27c>)
 8003c52:	e001      	b.n	8003c58 <HAL_I2S_Init+0x1a8>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	4932      	ldr	r1, [pc, #200]	; (8003d28 <HAL_I2S_Init+0x278>)
 8003c60:	428a      	cmp	r2, r1
 8003c62:	d101      	bne.n	8003c68 <HAL_I2S_Init+0x1b8>
 8003c64:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_I2S_Init+0x27c>)
 8003c66:	e001      	b.n	8003c6c <HAL_I2S_Init+0x1bc>
 8003c68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_I2S_Init+0x278>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2S_Init+0x1d4>
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_I2S_Init+0x27c>)
 8003c82:	e001      	b.n	8003c88 <HAL_I2S_Init+0x1d8>
 8003c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c88:	2202      	movs	r2, #2
 8003c8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_I2S_Init+0x278>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_I2S_Init+0x1ea>
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_I2S_Init+0x27c>)
 8003c98:	e001      	b.n	8003c9e <HAL_I2S_Init+0x1ee>
 8003c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003caa:	d003      	beq.n	8003cb4 <HAL_I2S_Init+0x204>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e001      	b.n	8003cc0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_I2S_Init+0x278>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2S_Init+0x24c>
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_I2S_Init+0x27c>)
 8003cfa:	e001      	b.n	8003d00 <HAL_I2S_Init+0x250>
 8003cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d00:	897a      	ldrh	r2, [r7, #10]
 8003d02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	08003e27 	.word	0x08003e27
 8003d20:	cccccccd 	.word	0xcccccccd
 8003d24:	08003f3d 	.word	0x08003f3d
 8003d28:	40003800 	.word	0x40003800
 8003d2c:	40003400 	.word	0x40003400

08003d30 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	881a      	ldrh	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10e      	bne.n	8003dc0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003db0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffb8 	bl	8003d30 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10e      	bne.n	8003e1e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff93 	bl	8003d44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d13a      	bne.n	8003eb8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d109      	bne.n	8003e60 <I2S_IRQHandler+0x3a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d102      	bne.n	8003e60 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffb4 	bl	8003dc8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d126      	bne.n	8003eb8 <I2S_IRQHandler+0x92>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d11f      	bne.n	8003eb8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f043 0202 	orr.w	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ff50 	bl	8003d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d136      	bne.n	8003f32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d109      	bne.n	8003ee2 <I2S_IRQHandler+0xbc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d102      	bne.n	8003ee2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff45 	bl	8003d6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d122      	bne.n	8003f32 <I2S_IRQHandler+0x10c>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d11b      	bne.n	8003f32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff13 	bl	8003d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4aa2      	ldr	r2, [pc, #648]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f56:	4ba2      	ldr	r3, [pc, #648]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a9b      	ldr	r2, [pc, #620]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f74:	4b9a      	ldr	r3, [pc, #616]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f76:	e001      	b.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f88:	d004      	beq.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 8099 	bne.w	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d107      	bne.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f925 	bl	80041f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9c8 	bl	8004358 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d13a      	bne.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d035      	beq.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fe6:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fe8:	e001      	b.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4979      	ldr	r1, [pc, #484]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004006:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004016:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fe88 	bl	8003d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	f040 80be 	bne.w	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80b8 	beq.w	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800406e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a59      	ldr	r2, [pc, #356]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800407a:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4954      	ldr	r1, [pc, #336]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800408a:	428b      	cmp	r3, r1
 800408c:	d101      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800408e:	4b54      	ldr	r3, [pc, #336]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004090:	e001      	b.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004096:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800409a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fe4a 	bl	8003d58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040c4:	e084      	b.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d107      	bne.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8be 	bl	800425c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8fd 	bl	80042f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d12f      	bne.n	8004164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02a      	beq.n	8004164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800411c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800412a:	e001      	b.n	8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800412c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d101      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800413e:	e001      	b.n	8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f043 0202 	orr.w	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fdfa 	bl	8003d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b08      	cmp	r3, #8
 800416c:	d131      	bne.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02c      	beq.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004184:	e001      	b.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4912      	ldr	r1, [pc, #72]	; (80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004192:	428b      	cmp	r3, r1
 8004194:	d101      	bne.n	800419a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004198:	e001      	b.n	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800419a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fdc5 	bl	8003d58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ce:	e000      	b.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d0:	bf00      	nop
}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40003800 	.word	0x40003800
 80041e0:	40003400 	.word	0x40003400

080041e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c99      	adds	r1, r3, #2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6251      	str	r1, [r2, #36]	; 0x24
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d113      	bne.n	8004252 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ffc9 	bl	80041e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c99      	adds	r1, r3, #2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6251      	str	r1, [r2, #36]	; 0x24
 800426e:	8819      	ldrh	r1, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <I2SEx_TxISR_I2SExt+0x90>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <I2SEx_TxISR_I2SExt+0x22>
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <I2SEx_TxISR_I2SExt+0x94>)
 800427c:	e001      	b.n	8004282 <I2SEx_TxISR_I2SExt+0x26>
 800427e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004282:	460a      	mov	r2, r1
 8004284:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d121      	bne.n	80042e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <I2SEx_TxISR_I2SExt+0x90>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <I2SEx_TxISR_I2SExt+0x50>
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <I2SEx_TxISR_I2SExt+0x94>)
 80042aa:	e001      	b.n	80042b0 <I2SEx_TxISR_I2SExt+0x54>
 80042ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	490d      	ldr	r1, [pc, #52]	; (80042ec <I2SEx_TxISR_I2SExt+0x90>)
 80042b8:	428b      	cmp	r3, r1
 80042ba:	d101      	bne.n	80042c0 <I2SEx_TxISR_I2SExt+0x64>
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <I2SEx_TxISR_I2SExt+0x94>)
 80042be:	e001      	b.n	80042c4 <I2SEx_TxISR_I2SExt+0x68>
 80042c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff81 	bl	80041e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40003800 	.word	0x40003800
 80042f0:	40003400 	.word	0x40003400

080042f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68d8      	ldr	r0, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	1c99      	adds	r1, r3, #2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800430c:	b282      	uxth	r2, r0
 800430e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d113      	bne.n	8004350 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004336:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ff4a 	bl	80041e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <I2SEx_RxISR_I2SExt+0x90>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <I2SEx_RxISR_I2SExt+0x16>
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <I2SEx_RxISR_I2SExt+0x94>)
 800436c:	e001      	b.n	8004372 <I2SEx_RxISR_I2SExt+0x1a>
 800436e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004372:	68d8      	ldr	r0, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	1c99      	adds	r1, r3, #2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800437e:	b282      	uxth	r2, r0
 8004380:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d121      	bne.n	80043de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <I2SEx_RxISR_I2SExt+0x90>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <I2SEx_RxISR_I2SExt+0x50>
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <I2SEx_RxISR_I2SExt+0x94>)
 80043a6:	e001      	b.n	80043ac <I2SEx_RxISR_I2SExt+0x54>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <I2SEx_RxISR_I2SExt+0x90>)
 80043b4:	428b      	cmp	r3, r1
 80043b6:	d101      	bne.n	80043bc <I2SEx_RxISR_I2SExt+0x64>
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <I2SEx_RxISR_I2SExt+0x94>)
 80043ba:	e001      	b.n	80043c0 <I2SEx_RxISR_I2SExt+0x68>
 80043bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff03 	bl	80041e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40003800 	.word	0x40003800
 80043ec:	40003400 	.word	0x40003400

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e264      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d075      	beq.n	80044fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440e:	4ba3      	ldr	r3, [pc, #652]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4ba0      	ldr	r3, [pc, #640]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004422:	2b08      	cmp	r3, #8
 8004424:	d112      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b9d      	ldr	r3, [pc, #628]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	4b99      	ldr	r3, [pc, #612]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05b      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d157      	bne.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e23f      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d106      	bne.n	8004464 <HAL_RCC_OscConfig+0x74>
 8004456:	4b91      	ldr	r3, [pc, #580]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a90      	ldr	r2, [pc, #576]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x98>
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a8a      	ldr	r2, [pc, #552]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a87      	ldr	r2, [pc, #540]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xb0>
 8004488:	4b84      	ldr	r3, [pc, #528]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a83      	ldr	r2, [pc, #524]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a80      	ldr	r2, [pc, #512]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd f956 	bl	8001758 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fd f952 	bl	8001758 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e204      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fd f942 	bl	8001758 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd f93e 	bl	8001758 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1f0      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b6c      	ldr	r3, [pc, #432]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d063      	beq.n	80045ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004506:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b5f      	ldr	r3, [pc, #380]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b5c      	ldr	r3, [pc, #368]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1c4      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b56      	ldr	r3, [pc, #344]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4952      	ldr	r1, [pc, #328]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e03a      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b4f      	ldr	r3, [pc, #316]	; (80046a0 <HAL_RCC_OscConfig+0x2b0>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd f8f7 	bl	8001758 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456e:	f7fd f8f3 	bl	8001758 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e1a5      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4940      	ldr	r1, [pc, #256]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	e015      	b.n	80045ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a2:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <HAL_RCC_OscConfig+0x2b0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd f8d6 	bl	8001758 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd f8d2 	bl	8001758 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e184      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d030      	beq.n	800463c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e2:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_RCC_OscConfig+0x2b4>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd f8b6 	bl	8001758 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fd f8b2 	bl	8001758 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e164      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x200>
 800460e:	e015      	b.n	800463c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCC_OscConfig+0x2b4>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fd f89f 	bl	8001758 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461e:	f7fd f89b 	bl	8001758 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e14d      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a0 	beq.w	800478a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a0e      	ldr	r2, [pc, #56]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b0c      	ldr	r3, [pc, #48]	; (800469c <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_OscConfig+0x2b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_RCC_OscConfig+0x2b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <HAL_RCC_OscConfig+0x2b8>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fd f861 	bl	8001758 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e011      	b.n	80046be <HAL_RCC_OscConfig+0x2ce>
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470000 	.word	0x42470000
 80046a4:	42470e80 	.word	0x42470e80
 80046a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ac:	f7fd f854 	bl	8001758 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e106      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x4e4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2f0>
 80046d2:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
 80046de:	e01c      	b.n	800471a <HAL_RCC_OscConfig+0x32a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d10c      	bne.n	8004702 <HAL_RCC_OscConfig+0x312>
 80046e8:	4b7b      	ldr	r3, [pc, #492]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	4a7a      	ldr	r2, [pc, #488]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70
 80046f4:	4b78      	ldr	r3, [pc, #480]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a77      	ldr	r2, [pc, #476]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0x32a>
 8004702:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a74      	ldr	r2, [pc, #464]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b72      	ldr	r3, [pc, #456]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a71      	ldr	r2, [pc, #452]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d015      	beq.n	800474e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd f819 	bl	8001758 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd f815 	bl	8001758 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0c5      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004740:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ee      	beq.n	800472a <HAL_RCC_OscConfig+0x33a>
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd f803 	bl	8001758 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc ffff 	bl	8001758 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0af      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	4b5a      	ldr	r3, [pc, #360]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a55      	ldr	r2, [pc, #340]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 809b 	beq.w	80048ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004794:	4b50      	ldr	r3, [pc, #320]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d05c      	beq.n	800485a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d141      	bne.n	800482c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0x4ec>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fc ffd3 	bl	8001758 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fc ffcf 	bl	8001758 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e081      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c8:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	019b      	lsls	r3, r3, #6
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	4937      	ldr	r1, [pc, #220]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_OscConfig+0x4ec>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fc ffa8 	bl	8001758 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fc ffa4 	bl	8001758 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e056      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x41c>
 800482a:	e04e      	b.n	80048ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_OscConfig+0x4ec>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7fc ff91 	bl	8001758 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483a:	f7fc ff8d 	bl	8001758 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e03f      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484c:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x44a>
 8004858:	e037      	b.n	80048ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e032      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <HAL_RCC_OscConfig+0x4e8>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d028      	beq.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d121      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d11a      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800489e:	4293      	cmp	r3, r2
 80048a0:	d111      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40007000 	.word	0x40007000
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470060 	.word	0x42470060

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0cc      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90c      	bls.n	800491c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4a58      	ldr	r2, [pc, #352]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d044      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d119      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d003      	beq.n	800499e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e067      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4934      	ldr	r1, [pc, #208]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fc fec2 	bl	8001758 <HAL_GetTick>
 80049d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fc febe 	bl	8001758 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e04f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 020c 	and.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1eb      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fc fe22 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	080289e8 	.word	0x080289e8
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000008 	.word	0x20000008

08004aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	2300      	movs	r3, #0
 8004abe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d00d      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	f200 80bd 	bhi.w	8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ade:	e0b7      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ae2:	60bb      	str	r3, [r7, #8]
       break;
 8004ae4:	e0b7      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ae6:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ae8:	60bb      	str	r3, [r7, #8]
      break;
 8004aea:	e0b4      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af6:	4b5b      	ldr	r3, [pc, #364]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04d      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b58      	ldr	r3, [pc, #352]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	ea02 0800 	and.w	r8, r2, r0
 8004b1a:	ea03 0901 	and.w	r9, r3, r1
 8004b1e:	4640      	mov	r0, r8
 8004b20:	4649      	mov	r1, r9
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	014b      	lsls	r3, r1, #5
 8004b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b30:	0142      	lsls	r2, r0, #5
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	ebb0 0008 	subs.w	r0, r0, r8
 8004b3a:	eb61 0109 	sbc.w	r1, r1, r9
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	018b      	lsls	r3, r1, #6
 8004b48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b4c:	0182      	lsls	r2, r0, #6
 8004b4e:	1a12      	subs	r2, r2, r0
 8004b50:	eb63 0301 	sbc.w	r3, r3, r1
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	00d9      	lsls	r1, r3, #3
 8004b5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b62:	00d0      	lsls	r0, r2, #3
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	eb12 0208 	adds.w	r2, r2, r8
 8004b6c:	eb43 0309 	adc.w	r3, r3, r9
 8004b70:	f04f 0000 	mov.w	r0, #0
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	0259      	lsls	r1, r3, #9
 8004b7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b7e:	0250      	lsls	r0, r2, #9
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	f7fb fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e04a      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	ea02 0400 	and.w	r4, r2, r0
 8004bb6:	ea03 0501 	and.w	r5, r3, r1
 8004bba:	4620      	mov	r0, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	014b      	lsls	r3, r1, #5
 8004bc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bcc:	0142      	lsls	r2, r0, #5
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	1b00      	subs	r0, r0, r4
 8004bd4:	eb61 0105 	sbc.w	r1, r1, r5
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	018b      	lsls	r3, r1, #6
 8004be2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004be6:	0182      	lsls	r2, r0, #6
 8004be8:	1a12      	subs	r2, r2, r0
 8004bea:	eb63 0301 	sbc.w	r3, r3, r1
 8004bee:	f04f 0000 	mov.w	r0, #0
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	00d9      	lsls	r1, r3, #3
 8004bf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bfc:	00d0      	lsls	r0, r2, #3
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	1912      	adds	r2, r2, r4
 8004c04:	eb45 0303 	adc.w	r3, r5, r3
 8004c08:	f04f 0000 	mov.w	r0, #0
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	0299      	lsls	r1, r3, #10
 8004c12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c16:	0290      	lsls	r0, r2, #10
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	f7fb face 	bl	80001c8 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	60bb      	str	r3, [r7, #8]
      break;
 8004c4e:	e002      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c52:	60bb      	str	r3, [r7, #8]
      break;
 8004c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c56:	68bb      	ldr	r3, [r7, #8]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	080289f8 	.word	0x080289f8

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d035      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd8:	4b62      	ldr	r3, [pc, #392]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cde:	f7fc fd3b 	bl	8001758 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ce6:	f7fc fd37 	bl	8001758 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0b0      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf8:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	019a      	lsls	r2, r3, #6
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	071b      	lsls	r3, r3, #28
 8004d10:	4955      	ldr	r1, [pc, #340]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d18:	4b52      	ldr	r3, [pc, #328]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1e:	f7fc fd1b 	bl	8001758 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d26:	f7fc fd17 	bl	8001758 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e090      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d38:	4b4b      	ldr	r3, [pc, #300]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8083 	beq.w	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7a:	f7fc fced 	bl	8001758 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fc fce9 	bl	8001758 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e062      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da0:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d02f      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d028      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc8:	4b29      	ldr	r3, [pc, #164]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dce:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dd4:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d114      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fc fcb7 	bl	8001758 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fc fcb3 	bl	8001758 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e02a      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e04:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ee      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1c:	d10d      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	490d      	ldr	r1, [pc, #52]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
 8004e38:	e005      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e44:	6093      	str	r3, [r2, #8]
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e52:	4905      	ldr	r1, [pc, #20]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	42470068 	.word	0x42470068
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	42470e40 	.word	0x42470e40

08004e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d13e      	bne.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e92:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d12f      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eaa:	617b      	str	r3, [r7, #20]
          break;
 8004eac:	e02f      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eba:	d108      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ebc:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e007      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed6:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	0f1b      	lsrs	r3, r3, #28
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
          break;
 8004f06:	e002      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
          break;
 8004f0c:	bf00      	nop
        }
      }
      break;
 8004f0e:	bf00      	nop
    }
  }
  return frequency;
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	00bb8000 	.word	0x00bb8000
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	00f42400 	.word	0x00f42400

08004f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e07b      	b.n	800503a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d009      	beq.n	8004f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
 8004f5a:	e005      	b.n	8004f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fb fe2c 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f003 0104 	and.w	r1, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0210 	and.w	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b088      	sub	sp, #32
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Transmit+0x22>
 8005060:	2302      	movs	r3, #2
 8005062:	e126      	b.n	80052b2 <HAL_SPI_Transmit+0x270>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506c:	f7fc fb74 	bl	8001758 <HAL_GetTick>
 8005070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005082:	2302      	movs	r3, #2
 8005084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005086:	e10b      	b.n	80052a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_SPI_Transmit+0x52>
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005098:	e102      	b.n	80052a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e0:	d10f      	bne.n	8005102 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d007      	beq.n	8005120 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005128:	d14b      	bne.n	80051c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Transmit+0xf6>
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d13e      	bne.n	80051b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	1c9a      	adds	r2, r3, #2
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800515c:	e02b      	b.n	80051b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d112      	bne.n	8005192 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005190:	e011      	b.n	80051b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005192:	f7fc fae1 	bl	8001758 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d803      	bhi.n	80051aa <HAL_SPI_Transmit+0x168>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a8:	d102      	bne.n	80051b0 <HAL_SPI_Transmit+0x16e>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b4:	e074      	b.n	80052a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ce      	bne.n	800515e <HAL_SPI_Transmit+0x11c>
 80051c0:	e04c      	b.n	800525c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Transmit+0x18e>
 80051ca:	8afb      	ldrh	r3, [r7, #22]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d140      	bne.n	8005252 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051f6:	e02c      	b.n	8005252 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d113      	bne.n	800522e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36
 800522c:	e011      	b.n	8005252 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522e:	f7fc fa93 	bl	8001758 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d803      	bhi.n	8005246 <HAL_SPI_Transmit+0x204>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005244:	d102      	bne.n	800524c <HAL_SPI_Transmit+0x20a>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005250:	e026      	b.n	80052a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1cd      	bne.n	80051f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8b3 	bl	80053cc <SPI_EndRxTxTransaction>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	77fb      	strb	r3, [r7, #31]
 800529c:	e000      	b.n	80052a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800529e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052cc:	f7fc fa44 	bl	8001758 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052dc:	f7fc fa3c 	bl	8001758 <HAL_GetTick>
 80052e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	015b      	lsls	r3, r3, #5
 80052e8:	0d1b      	lsrs	r3, r3, #20
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	e054      	b.n	800539e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fa:	d050      	beq.n	800539e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052fc:	f7fc fa2c 	bl	8001758 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	429a      	cmp	r2, r3
 800530a:	d902      	bls.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d13d      	bne.n	800538e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532a:	d111      	bne.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005334:	d004      	beq.n	8005340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d107      	bne.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005358:	d10f      	bne.n	800537a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e017      	b.n	80053be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3b01      	subs	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d19b      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000

080053cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <SPI_EndRxTxTransaction+0x7c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <SPI_EndRxTxTransaction+0x80>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0d5b      	lsrs	r3, r3, #21
 80053e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f6:	d112      	bne.n	800541e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff ff5a 	bl	80052bc <SPI_WaitFlagStateUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00f      	b.n	800543e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d0f2      	beq.n	800541e <SPI_EndRxTxTransaction+0x52>
 8005438:	e000      	b.n	800543c <SPI_EndRxTxTransaction+0x70>
        break;
 800543a:	bf00      	nop
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000
 800544c:	165e9f81 	.word	0x165e9f81

08005450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005450:	b084      	sub	sp, #16
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	f107 001c 	add.w	r0, r7, #28
 800545e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	2b01      	cmp	r3, #1
 8005466:	d122      	bne.n	80054ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800547c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d105      	bne.n	80054a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9a0 	bl	80057e8 <USB_CoreReset>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e01a      	b.n	80054e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f994 	bl	80057e8 <USB_CoreReset>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
 80054d6:	e005      	b.n	80054e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d10b      	bne.n	8005502 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f043 0206 	orr.w	r2, r3, #6
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f043 0220 	orr.w	r2, r3, #32
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800550e:	b004      	add	sp, #16
 8005510:	4770      	bx	lr

08005512 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f043 0201 	orr.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d115      	bne.n	80055a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005584:	2001      	movs	r0, #1
 8005586:	f7fc f8f3 	bl	8001770 <HAL_Delay>
      ms++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f91a 	bl	80057ca <USB_GetMode>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d01e      	beq.n	80055da <USB_SetCurrentMode+0x84>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b31      	cmp	r3, #49	; 0x31
 80055a0:	d9f0      	bls.n	8005584 <USB_SetCurrentMode+0x2e>
 80055a2:	e01a      	b.n	80055da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d115      	bne.n	80055d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055b6:	2001      	movs	r0, #1
 80055b8:	f7fc f8da 	bl	8001770 <HAL_Delay>
      ms++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f901 	bl	80057ca <USB_GetMode>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <USB_SetCurrentMode+0x84>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b31      	cmp	r3, #49	; 0x31
 80055d2:	d9f0      	bls.n	80055b6 <USB_SetCurrentMode+0x60>
 80055d4:	e001      	b.n	80055da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e005      	b.n	80055e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b32      	cmp	r3, #50	; 0x32
 80055de:	d101      	bne.n	80055e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	019b      	lsls	r3, r3, #6
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <USB_FlushTxFifo+0x44>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e006      	b.n	8005628 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b20      	cmp	r3, #32
 8005624:	d0f1      	beq.n	800560a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	00030d40 	.word	0x00030d40

08005638 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2210      	movs	r2, #16
 8005648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	4a08      	ldr	r2, [pc, #32]	; (8005674 <USB_FlushRxFifo+0x3c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e006      	b.n	8005668 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d0f1      	beq.n	800564a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	00030d40 	.word	0x00030d40

08005678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	71fb      	strb	r3, [r7, #7]
 800568a:	4613      	mov	r3, r2
 800568c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d123      	bne.n	80056e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800569e:	88bb      	ldrh	r3, [r7, #4]
 80056a0:	3303      	adds	r3, #3
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e018      	b.n	80056de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	031a      	lsls	r2, r3, #12
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	461a      	mov	r2, r3
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	3301      	adds	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3301      	adds	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3301      	adds	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d3e2      	bcc.n	80056ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3724      	adds	r7, #36	; 0x24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	b29b      	uxth	r3, r3
 8005710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e014      	b.n	800574a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	601a      	str	r2, [r3, #0]
    pDest++;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	3301      	adds	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	3301      	adds	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	3301      	adds	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	3301      	adds	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	3301      	adds	r3, #1
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d3e6      	bcc.n	8005720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005752:	8bfb      	ldrh	r3, [r7, #30]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01e      	beq.n	8005796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	461a      	mov	r2, r3
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	701a      	strb	r2, [r3, #0]
      i++;
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	3301      	adds	r3, #1
 8005782:	623b      	str	r3, [r7, #32]
      pDest++;
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	3301      	adds	r3, #1
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	3b01      	subs	r3, #1
 800578e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005790:	8bfb      	ldrh	r3, [r7, #30]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ea      	bne.n	800576c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005798:	4618      	mov	r0, r3
 800579a:	372c      	adds	r7, #44	; 0x2c
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	4a13      	ldr	r2, [pc, #76]	; (8005848 <USB_CoreReset+0x60>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e01a      	b.n	800583a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	daf3      	bge.n	80057f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f043 0201 	orr.w	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <USB_CoreReset+0x60>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e006      	b.n	800583a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d0f1      	beq.n	800581c <USB_CoreReset+0x34>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	00030d40 	.word	0x00030d40

0800584c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	f107 001c 	add.w	r0, r7, #28
 800585a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10a      	bne.n	80058ba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058b2:	f043 0304 	orr.w	r3, r3, #4
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	e014      	b.n	80058e4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e009      	b.n	80058e4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058de:	f023 0304 	bic.w	r3, r3, #4
 80058e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80058e4:	2110      	movs	r1, #16
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fe82 	bl	80055f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fea3 	bl	8005638 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e015      	b.n	8005924 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	461a      	mov	r2, r3
 8005906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800590a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	461a      	mov	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d3e5      	bcc.n	80058f8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005938:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <USB_HostInit+0x154>)
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <USB_HostInit+0x158>)
 8005958:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800595c:	e009      	b.n	8005972 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <USB_HostInit+0x15c>)
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a0f      	ldr	r2, [pc, #60]	; (80059ac <USB_HostInit+0x160>)
 800596e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d105      	bne.n	8005984 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f043 0210 	orr.w	r2, r3, #16
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <USB_HostInit+0x164>)
 800598a:	4313      	orrs	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800599c:	b004      	add	sp, #16
 800599e:	4770      	bx	lr
 80059a0:	01000200 	.word	0x01000200
 80059a4:	00e00300 	.word	0x00e00300
 80059a8:	00600080 	.word	0x00600080
 80059ac:	004000e0 	.word	0x004000e0
 80059b0:	a3200008 	.word	0xa3200008

080059b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059ec:	4313      	orrs	r3, r2
 80059ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d107      	bne.n	8005a06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fc:	461a      	mov	r2, r3
 80059fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a02:	6053      	str	r3, [r2, #4]
 8005a04:	e009      	b.n	8005a1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d106      	bne.n	8005a1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	461a      	mov	r2, r3
 8005a14:	f241 7370 	movw	r3, #6000	; 0x1770
 8005a18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a58:	2064      	movs	r0, #100	; 0x64
 8005a5a:	f7fb fe89 	bl	8001770 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	f7fb fe7f 	bl	8001770 <HAL_Delay>

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005aa0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <USB_DriveVbus+0x44>
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d106      	bne.n	8005ac0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005abe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d109      	bne.n	8005ae0 <USB_DriveVbus+0x64>
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ade:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	0c5b      	lsrs	r3, r3, #17
 8005b0c:	f003 0303 	and.w	r3, r3, #3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	b29b      	uxth	r3, r3
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	70fb      	strb	r3, [r7, #3]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70bb      	strb	r3, [r7, #2]
 8005b56:	4613      	mov	r3, r2
 8005b58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d87e      	bhi.n	8005c7c <USB_HC_Init+0x13c>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <USB_HC_Init+0x44>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005c3f 	.word	0x08005c3f
 8005b8c:	08005b95 	.word	0x08005b95
 8005b90:	08005c01 	.word	0x08005c01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ba6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ba8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da10      	bge.n	8005bd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005bd0:	e057      	b.n	8005c82 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d051      	beq.n	8005c82 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bfc:	60d3      	str	r3, [r2, #12]
      break;
 8005bfe:	e040      	b.n	8005c82 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005c12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da34      	bge.n	8005c86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c3c:	e023      	b.n	8005c86 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f240 2325 	movw	r3, #549	; 0x225
 8005c50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da17      	bge.n	8005c8a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c74:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c78:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c7a:	e006      	b.n	8005c8a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
      break;
 8005c80:	e004      	b.n	8005c8c <USB_HC_Init+0x14c>
      break;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <USB_HC_Init+0x14c>
      break;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <USB_HC_Init+0x14c>
      break;
 8005c8a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	6939      	ldr	r1, [r7, #16]
 8005ca2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005cb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da03      	bge.n	8005cc6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e001      	b.n	8005cca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff0f 	bl	8005aee <USB_GetHostSpeed>
 8005cd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005cd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d106      	bne.n	8005ce8 <USB_HC_Init+0x1a8>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d003      	beq.n	8005ce8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e001      	b.n	8005cec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cec:	787b      	ldrb	r3, [r7, #1]
 8005cee:	059b      	lsls	r3, r3, #22
 8005cf0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cf4:	78bb      	ldrb	r3, [r7, #2]
 8005cf6:	02db      	lsls	r3, r3, #11
 8005cf8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cfc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d02:	049b      	lsls	r3, r3, #18
 8005d04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	0159      	lsls	r1, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d28:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d10f      	bne.n	8005d52 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	; 0x30
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02d      	beq.n	8005de2 <USB_HC_StartXfer+0x86>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d129      	bne.n	8005de2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d117      	bne.n	8005dc4 <USB_HC_StartXfer+0x68>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	79db      	ldrb	r3, [r3, #7]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <USB_HC_StartXfer+0x48>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	79db      	ldrb	r3, [r3, #7]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d10f      	bne.n	8005dc4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	6a3a      	ldr	r2, [r7, #32]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <USB_HC_StartXfer+0x86>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	795b      	ldrb	r3, [r3, #5]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d107      	bne.n	8005de2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fa2f 	bl	800623c <USB_DoPing>
      return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e0f8      	b.n	8005fd4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d018      	beq.n	8005e1c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	8912      	ldrh	r2, [r2, #8]
 8005df2:	4413      	add	r3, r2
 8005df4:	3b01      	subs	r3, #1
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	8912      	ldrh	r2, [r2, #8]
 8005dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e02:	8b7b      	ldrh	r3, [r7, #26]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d90b      	bls.n	8005e20 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005e08:	8b7b      	ldrh	r3, [r7, #26]
 8005e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	8912      	ldrh	r2, [r2, #8]
 8005e12:	fb02 f203 	mul.w	r2, r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	611a      	str	r2, [r3, #16]
 8005e1a:	e001      	b.n	8005e20 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	8912      	ldrh	r2, [r2, #8]
 8005e2e:	fb02 f203 	mul.w	r2, r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	611a      	str	r2, [r3, #16]
 8005e36:	e003      	b.n	8005e40 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e4a:	04d9      	lsls	r1, r3, #19
 8005e4c:	4b63      	ldr	r3, [pc, #396]	; (8005fdc <USB_HC_StartXfer+0x280>)
 8005e4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	7a9b      	ldrb	r3, [r3, #10]
 8005e56:	075b      	lsls	r3, r3, #29
 8005e58:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	6a39      	ldr	r1, [r7, #32]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68d9      	ldr	r1, [r3, #12]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	460a      	mov	r2, r1
 8005e84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ebc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	7e7b      	ldrb	r3, [r7, #25]
 8005ece:	075b      	lsls	r3, r3, #29
 8005ed0:	69f9      	ldr	r1, [r7, #28]
 8005ed2:	0148      	lsls	r0, r1, #5
 8005ed4:	6a39      	ldr	r1, [r7, #32]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	78db      	ldrb	r3, [r3, #3]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	e003      	b.n	8005f12 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f10:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e04e      	b.n	8005fd4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d149      	bne.n	8005fd2 <USB_HC_StartXfer+0x276>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d045      	beq.n	8005fd2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	79db      	ldrb	r3, [r3, #7]
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d830      	bhi.n	8005fb0 <USB_HC_StartXfer+0x254>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USB_HC_StartXfer+0x1f8>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f65 	.word	0x08005f65
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f65 	.word	0x08005f65
 8005f60:	08005f89 	.word	0x08005f89
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	3303      	adds	r3, #3
 8005f6a:	089b      	lsrs	r3, r3, #2
 8005f6c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f6e:	8afa      	ldrh	r2, [r7, #22]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d91c      	bls.n	8005fb4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f86:	e015      	b.n	8005fb4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f92:	8afa      	ldrh	r2, [r7, #22]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d90a      	bls.n	8005fb8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	619a      	str	r2, [r3, #24]
        }
        break;
 8005fae:	e003      	b.n	8005fb8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005fb0:	bf00      	nop
 8005fb2:	e002      	b.n	8005fba <USB_HC_StartXfer+0x25e>
        break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <USB_HC_StartXfer+0x25e>
        break;
 8005fb8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	68d9      	ldr	r1, [r3, #12]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	785a      	ldrb	r2, [r3, #1]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2000      	movs	r0, #0
 8005fca:	9000      	str	r0, [sp, #0]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fb53 	bl	8005678 <USB_WritePacket>
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	1ff80000 	.word	0x1ff80000

08005fe0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	b29b      	uxth	r3, r3
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006002:	b480      	push	{r7}
 8006004:	b089      	sub	sp, #36	; 0x24
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	0c9b      	lsrs	r3, r3, #18
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	0fdb      	lsrs	r3, r3, #31
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b20      	cmp	r3, #32
 8006050:	d104      	bne.n	800605c <USB_HC_Halt+0x5a>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	e0e8      	b.n	800622e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <USB_HC_Halt+0x66>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d173      	bne.n	8006150 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006086:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 80cb 	bne.w	800622c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d143      	bne.n	800612a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006100:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	3301      	adds	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610e:	d81d      	bhi.n	800614c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006126:	d0ec      	beq.n	8006102 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006128:	e080      	b.n	800622c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006148:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800614a:	e06f      	b.n	800622c <USB_HC_Halt+0x22a>
            break;
 800614c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800614e:	e06d      	b.n	800622c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d143      	bne.n	8006208 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	440a      	add	r2, r1
 8006196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800619e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ec:	d81d      	bhi.n	800622a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006204:	d0ec      	beq.n	80061e0 <USB_HC_Halt+0x1de>
 8006206:	e011      	b.n	800622c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	440a      	add	r2, r1
 800621e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e000      	b.n	800622c <USB_HC_Halt+0x22a>
          break;
 800622a:	bf00      	nop
    }
  }

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3724      	adds	r7, #36	; 0x24
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
	...

0800623c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006250:	2301      	movs	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	04da      	lsls	r2, r3, #19
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <USB_DoPing+0x74>)
 800625a:	4013      	ands	r3, r2
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800626c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006284:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800628c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	1ff80000 	.word	0x1ff80000

080062b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff f935 	bl	8005534 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80062ca:	2110      	movs	r1, #16
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff f98f 	bl	80055f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff f9b0 	bl	8005638 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	e01f      	b.n	800631e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006304:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	461a      	mov	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	3301      	adds	r3, #1
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d9dc      	bls.n	80062de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	e034      	b.n	8006394 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006340:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006348:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006350:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3301      	adds	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006370:	d80c      	bhi.n	800638c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006388:	d0ec      	beq.n	8006364 <USB_StopHost+0xb0>
 800638a:	e000      	b.n	800638e <USB_StopHost+0xda>
        break;
 800638c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d9c7      	bls.n	800632a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff f8ae 	bl	8005512 <USB_EnableGlobalInt>

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af04      	add	r7, sp, #16
 80063c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80063c8:	2301      	movs	r3, #1
 80063ca:	2202      	movs	r2, #2
 80063cc:	2102      	movs	r1, #2
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc66 	bl	8006ca0 <USBH_FindInterface>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d002      	beq.n	80063e4 <USBH_CDC_InterfaceInit+0x24>
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d901      	bls.n	80063e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e13d      	b.n	8006664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fc3b 	bl	8006c68 <USBH_SelectInterface>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e131      	b.n	8006664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006406:	2050      	movs	r0, #80	; 0x50
 8006408:	f002 fa00 	bl	800880c <malloc>
 800640c:	4603      	mov	r3, r0
 800640e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006420:	2302      	movs	r3, #2
 8006422:	e11f      	b.n	8006664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006424:	2250      	movs	r2, #80	; 0x50
 8006426:	2100      	movs	r1, #0
 8006428:	68b8      	ldr	r0, [r7, #8]
 800642a:	f002 f9ff 	bl	800882c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	211a      	movs	r1, #26
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b25b      	sxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	da15      	bge.n	8006472 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	211a      	movs	r1, #26
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	4413      	add	r3, r2
 8006452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	211a      	movs	r1, #26
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fe32 	bl	80080e2 <USBH_AllocPipe>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	7819      	ldrb	r1, [r3, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	7858      	ldrb	r0, [r3, #1]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	8952      	ldrh	r2, [r2, #10]
 800649e:	9202      	str	r2, [sp, #8]
 80064a0:	2203      	movs	r2, #3
 80064a2:	9201      	str	r2, [sp, #4]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4623      	mov	r3, r4
 80064a8:	4602      	mov	r2, r0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fdea 	bl	8008084 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f002 f8f9 	bl	80086b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80064be:	2300      	movs	r3, #0
 80064c0:	2200      	movs	r2, #0
 80064c2:	210a      	movs	r1, #10
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbeb 	bl	8006ca0 <USBH_FindInterface>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2bff      	cmp	r3, #255	; 0xff
 80064d2:	d002      	beq.n	80064da <USBH_CDC_InterfaceInit+0x11a>
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d901      	bls.n	80064de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064da:	2302      	movs	r3, #2
 80064dc:	e0c2      	b.n	8006664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	211a      	movs	r1, #26
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b25b      	sxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da16      	bge.n	8006524 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	211a      	movs	r1, #26
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006506:	781a      	ldrb	r2, [r3, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	211a      	movs	r1, #26
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	835a      	strh	r2, [r3, #26]
 8006522:	e015      	b.n	8006550 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	211a      	movs	r1, #26
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	211a      	movs	r1, #26
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	4413      	add	r3, r2
 8006546:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800654a:	881a      	ldrh	r2, [r3, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	211a      	movs	r1, #26
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	4413      	add	r3, r2
 800655c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	b25b      	sxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	da16      	bge.n	8006596 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	211a      	movs	r1, #26
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	4413      	add	r3, r2
 8006574:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	211a      	movs	r1, #26
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	4413      	add	r3, r2
 800658a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800658e:	881a      	ldrh	r2, [r3, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	835a      	strh	r2, [r3, #26]
 8006594:	e015      	b.n	80065c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	211a      	movs	r1, #26
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	211a      	movs	r1, #26
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	7b9b      	ldrb	r3, [r3, #14]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fd8a 	bl	80080e2 <USBH_AllocPipe>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	7bdb      	ldrb	r3, [r3, #15]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 fd80 	bl	80080e2 <USBH_AllocPipe>
 80065e2:	4603      	mov	r3, r0
 80065e4:	461a      	mov	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	7b59      	ldrb	r1, [r3, #13]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	7b98      	ldrb	r0, [r3, #14]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	8b12      	ldrh	r2, [r2, #24]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	2202      	movs	r2, #2
 8006606:	9201      	str	r2, [sp, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4623      	mov	r3, r4
 800660c:	4602      	mov	r2, r0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fd38 	bl	8008084 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	7b19      	ldrb	r1, [r3, #12]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	7bd8      	ldrb	r0, [r3, #15]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	8b52      	ldrh	r2, [r2, #26]
 800662c:	9202      	str	r2, [sp, #8]
 800662e:	2202      	movs	r2, #2
 8006630:	9201      	str	r2, [sp, #4]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4623      	mov	r3, r4
 8006636:	4602      	mov	r2, r0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fd23 	bl	8008084 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	7b5b      	ldrb	r3, [r3, #13]
 800664a:	2200      	movs	r2, #0
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 f82e 	bl	80086b0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	7b1b      	ldrb	r3, [r3, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f002 f827 	bl	80086b0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	bd90      	pop	{r4, r7, pc}

0800666c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fd18 	bl	80080c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fd43 	bl	8008124 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	7b1b      	ldrb	r3, [r3, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	7b1b      	ldrb	r3, [r3, #12]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fd05 	bl	80080c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	7b1b      	ldrb	r3, [r3, #12]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fd30 	bl	8008124 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	7b5b      	ldrb	r3, [r3, #13]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00e      	beq.n	80066f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	7b5b      	ldrb	r3, [r3, #13]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fcf2 	bl	80080c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	7b5b      	ldrb	r3, [r3, #13]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fd1d 	bl	8008124 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4618      	mov	r0, r3
 8006706:	f002 f889 	bl	800881c <free>
    phost->pActiveClass->pData = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006710:	2200      	movs	r2, #0
 8006712:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3340      	adds	r3, #64	; 0x40
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8b1 	bl	800689e <GetLineCoding>
 800673c:	4603      	mov	r3, r0
 800673e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800674c:	2102      	movs	r1, #2
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006752:	7afb      	ldrb	r3, [r7, #11]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800677c:	2b04      	cmp	r3, #4
 800677e:	d877      	bhi.n	8006870 <USBH_CDC_Process+0x114>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <USBH_CDC_Process+0x2c>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	0800679d 	.word	0x0800679d
 800678c:	080067a3 	.word	0x080067a3
 8006790:	080067d3 	.word	0x080067d3
 8006794:	08006847 	.word	0x08006847
 8006798:	08006855 	.word	0x08006855
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
      break;
 80067a0:	e06d      	b.n	800687e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f897 	bl	80068dc <SetLineCoding>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067c0:	e058      	b.n	8006874 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d055      	beq.n	8006874 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2204      	movs	r2, #4
 80067cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067d0:	e050      	b.n	8006874 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3340      	adds	r3, #64	; 0x40
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f860 	bl	800689e <GetLineCoding>
 80067de:	4603      	mov	r3, r0
 80067e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d126      	bne.n	8006836 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fa:	791b      	ldrb	r3, [r3, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d13b      	bne.n	8006878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800680c:	429a      	cmp	r2, r3
 800680e:	d133      	bne.n	8006878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800681c:	429a      	cmp	r2, r3
 800681e:	d12b      	bne.n	8006878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800682a:	429a      	cmp	r2, r3
 800682c:	d124      	bne.n	8006878 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f958 	bl	8006ae4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006834:	e020      	b.n	8006878 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d01d      	beq.n	8006878 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2204      	movs	r2, #4
 8006840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006844:	e018      	b.n	8006878 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f867 	bl	800691a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f8da 	bl	8006a06 <CDC_ProcessReception>
      break;
 8006852:	e014      	b.n	800687e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006854:	2100      	movs	r1, #0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 ffe3 	bl	8007822 <USBH_ClrFeature>
 800685c:	4603      	mov	r3, r0
 800685e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800686e:	e005      	b.n	800687c <USBH_CDC_Process+0x120>

    default:
      break;
 8006870:	bf00      	nop
 8006872:	e004      	b.n	800687e <USBH_CDC_Process+0x122>
      break;
 8006874:	bf00      	nop
 8006876:	e002      	b.n	800687e <USBH_CDC_Process+0x122>
      break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <USBH_CDC_Process+0x122>
      break;
 800687c:	bf00      	nop

  }

  return status;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	22a1      	movs	r2, #161	; 0xa1
 80068ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2221      	movs	r2, #33	; 0x21
 80068b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2207      	movs	r2, #7
 80068c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2207      	movs	r2, #7
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f988 	bl	8007be2 <USBH_CtlReq>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2221      	movs	r2, #33	; 0x21
 80068ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2207      	movs	r2, #7
 8006902:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2207      	movs	r2, #7
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f969 	bl	8007be2 <USBH_CtlReq>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af02      	add	r7, sp, #8
 8006920:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800692c:	2300      	movs	r3, #0
 800692e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <CDC_ProcessTransmission+0x26>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d023      	beq.n	8006986 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800693e:	e05e      	b.n	80069fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	8b12      	ldrh	r2, [r2, #24]
 8006948:	4293      	cmp	r3, r2
 800694a:	d90b      	bls.n	8006964 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8b1a      	ldrh	r2, [r3, #24]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	7b5b      	ldrb	r3, [r3, #13]
 8006958:	2001      	movs	r0, #1
 800695a:	9000      	str	r0, [sp, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fb4e 	bl	8007ffe <USBH_BulkSendData>
 8006962:	e00b      	b.n	800697c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	7b5b      	ldrb	r3, [r3, #13]
 8006972:	2001      	movs	r0, #1
 8006974:	9000      	str	r0, [sp, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fb41 	bl	8007ffe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006984:	e03b      	b.n	80069fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	7b5b      	ldrb	r3, [r3, #13]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fe65 	bl	800865c <USBH_LL_GetURBState>
 8006992:	4603      	mov	r3, r0
 8006994:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d128      	bne.n	80069ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	8b12      	ldrh	r2, [r2, #24]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d90e      	bls.n	80069c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	8b12      	ldrh	r2, [r2, #24]
 80069b0:	1a9a      	subs	r2, r3, r2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	8b12      	ldrh	r2, [r2, #24]
 80069be:	441a      	add	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	61da      	str	r2, [r3, #28]
 80069c4:	e002      	b.n	80069cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069dc:	e00e      	b.n	80069fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f868 	bl	8006abc <USBH_CDC_TransmitCallback>
      break;
 80069ec:	e006      	b.n	80069fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d103      	bne.n	80069fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069fc:	bf00      	nop
  }
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d002      	beq.n	8006a2c <CDC_ProcessReception+0x26>
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d00e      	beq.n	8006a48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006a2a:	e043      	b.n	8006ab4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	6a19      	ldr	r1, [r3, #32]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	8b5a      	ldrh	r2, [r3, #26]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fb05 	bl	8008048 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2204      	movs	r2, #4
 8006a42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a46:	e035      	b.n	8006ab4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	7b1b      	ldrb	r3, [r3, #12]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fe04 	bl	800865c <USBH_LL_GetURBState>
 8006a54:	4603      	mov	r3, r0
 8006a56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a58:	7cfb      	ldrb	r3, [r7, #19]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d129      	bne.n	8006ab2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	7b1b      	ldrb	r3, [r3, #12]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fd67 	bl	8008538 <USBH_LL_GetLastXferSize>
 8006a6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d016      	beq.n	8006aa4 <CDC_ProcessReception+0x9e>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	8b5b      	ldrh	r3, [r3, #26]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d910      	bls.n	8006aa4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad2      	subs	r2, r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6a1a      	ldr	r2, [r3, #32]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	441a      	add	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006aa2:	e006      	b.n	8006ab2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f80f 	bl	8006ad0 <USBH_CDC_ReceiveCallback>
      break;
 8006ab2:	bf00      	nop
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e029      	b.n	8006b64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	79fa      	ldrb	r2, [r7, #7]
 8006b14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f81f 	bl	8006b6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fc37 	bl	80083d0 <USBH_LL_Init>

  return USBH_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e009      	b.n	8006b92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	33e0      	adds	r3, #224	; 0xe0
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b0e      	cmp	r3, #14
 8006b96:	d9f2      	bls.n	8006b7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e009      	b.n	8006bb2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb8:	d3f1      	bcc.n	8006b9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2240      	movs	r2, #64	; 0x40
 8006bde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d016      	beq.n	8006c56 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10e      	bne.n	8006c50 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33de      	adds	r3, #222	; 0xde
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
 8006c4e:	e004      	b.n	8006c5a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c50:	2302      	movs	r3, #2
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e001      	b.n	8006c5a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c56:	2302      	movs	r3, #2
 8006c58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d204      	bcs.n	8006c8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c8c:	e001      	b.n	8006c92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	70fb      	strb	r3, [r7, #3]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70bb      	strb	r3, [r7, #2]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cc8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cca:	e025      	b.n	8006d18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	221a      	movs	r2, #26
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3302      	adds	r3, #2
 8006cdc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	795b      	ldrb	r3, [r3, #5]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d002      	beq.n	8006cee <USBH_FindInterface+0x4e>
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	2bff      	cmp	r3, #255	; 0xff
 8006cec:	d111      	bne.n	8006d12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006cf2:	78ba      	ldrb	r2, [r7, #2]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d002      	beq.n	8006cfe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cf8:	78bb      	ldrb	r3, [r7, #2]
 8006cfa:	2bff      	cmp	r3, #255	; 0xff
 8006cfc:	d109      	bne.n	8006d12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d02:	787a      	ldrb	r2, [r7, #1]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d002      	beq.n	8006d0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d08:	787b      	ldrb	r3, [r7, #1]
 8006d0a:	2bff      	cmp	r3, #255	; 0xff
 8006d0c:	d101      	bne.n	8006d12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	e006      	b.n	8006d20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	3301      	adds	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d9d6      	bls.n	8006ccc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d1e:	23ff      	movs	r3, #255	; 0xff
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fb87 	bl	8008448 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fca0 	bl	8008682 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af04      	add	r7, sp, #16
 8006d52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d102      	bne.n	8006d6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b0b      	cmp	r3, #11
 8006d76:	f200 81b3 	bhi.w	80070e0 <USBH_Process+0x394>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <USBH_Process+0x34>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006db1 	.word	0x08006db1
 8006d84:	08006de3 	.word	0x08006de3
 8006d88:	08006e4b 	.word	0x08006e4b
 8006d8c:	0800707b 	.word	0x0800707b
 8006d90:	080070e1 	.word	0x080070e1
 8006d94:	08006eef 	.word	0x08006eef
 8006d98:	08007021 	.word	0x08007021
 8006d9c:	08006f25 	.word	0x08006f25
 8006da0:	08006f45 	.word	0x08006f45
 8006da4:	08006f65 	.word	0x08006f65
 8006da8:	08006f93 	.word	0x08006f93
 8006dac:	08007063 	.word	0x08007063
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8193 	beq.w	80070e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006dc4:	20c8      	movs	r0, #200	; 0xc8
 8006dc6:	f001 fca3 	bl	8008710 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fb99 	bl	8008502 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006de0:	e180      	b.n	80070e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d107      	bne.n	8006dfc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dfa:	e182      	b.n	8007102 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e06:	d914      	bls.n	8006e32 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d903      	bls.n	8006e2a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220d      	movs	r2, #13
 8006e26:	701a      	strb	r2, [r3, #0]
      break;
 8006e28:	e16b      	b.n	8007102 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
      break;
 8006e30:	e167      	b.n	8007102 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e38:	f103 020a 	add.w	r2, r3, #10
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e42:	200a      	movs	r0, #10
 8006e44:	f001 fc64 	bl	8008710 <USBH_Delay>
      break;
 8006e48:	e15b      	b.n	8007102 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e60:	2064      	movs	r0, #100	; 0x64
 8006e62:	f001 fc55 	bl	8008710 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fb24 	bl	80084b4 <USBH_LL_GetSpeed>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2205      	movs	r2, #5
 8006e7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 f92f 	bl	80080e2 <USBH_AllocPipe>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f927 	bl	80080e2 <USBH_AllocPipe>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7919      	ldrb	r1, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	9202      	str	r2, [sp, #8]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2280      	movs	r2, #128	; 0x80
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 f8e0 	bl	8008084 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7959      	ldrb	r1, [r3, #5]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ed8:	b292      	uxth	r2, r2
 8006eda:	9202      	str	r2, [sp, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	9201      	str	r2, [sp, #4]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f8cc 	bl	8008084 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006eec:	e109      	b.n	8007102 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f90c 	bl	800710c <USBH_HandleEnum>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 80f3 	bne.w	80070e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d103      	bne.n	8006f1c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2208      	movs	r2, #8
 8006f18:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f1a:	e0e5      	b.n	80070e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2207      	movs	r2, #7
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e0e1      	b.n	80070e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80de 	beq.w	80070ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f36:	2101      	movs	r1, #1
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2208      	movs	r2, #8
 8006f40:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f42:	e0d3      	b.n	80070ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fc20 	bl	8007794 <USBH_SetCfg>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 80ca 	bne.w	80070f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2209      	movs	r2, #9
 8006f60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f62:	e0c5      	b.n	80070f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f72:	2101      	movs	r1, #1
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc30 	bl	80077da <USBH_SetFeature>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f040 80b9 	bne.w	80070f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	220a      	movs	r2, #10
 8006f86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f88:	e0b4      	b.n	80070f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	220a      	movs	r2, #10
 8006f8e:	701a      	strb	r2, [r3, #0]
      break;
 8006f90:	e0b0      	b.n	80070f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80ad 	beq.w	80070f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
 8006faa:	e016      	b.n	8006fda <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32de      	adds	r2, #222	; 0xde
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	791a      	ldrb	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d108      	bne.n	8006fd4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	32de      	adds	r2, #222	; 0xde
 8006fc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006fd2:	e005      	b.n	8006fe0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0e5      	beq.n	8006fac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2206      	movs	r2, #6
 8007000:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007008:	2103      	movs	r1, #3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800700e:	e073      	b.n	80070f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	220d      	movs	r2, #13
 8007014:	701a      	strb	r2, [r3, #0]
      break;
 8007016:	e06f      	b.n	80070f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	220d      	movs	r2, #13
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	e06b      	b.n	80070f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	220b      	movs	r2, #11
 8007046:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007048:	e058      	b.n	80070fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d154      	bne.n	80070fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	220d      	movs	r2, #13
 8007056:	701a      	strb	r2, [r3, #0]
      break;
 8007058:	e050      	b.n	80070fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	220d      	movs	r2, #13
 800705e:	701a      	strb	r2, [r3, #0]
      break;
 8007060:	e04c      	b.n	80070fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d049      	beq.n	8007100 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
      }
      break;
 8007078:	e042      	b.n	8007100 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff fd72 	bl	8006b6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b6:	2105      	movs	r1, #5
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d107      	bne.n	80070d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fe2b 	bl	8006d2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070d6:	e014      	b.n	8007102 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f9b5 	bl	8008448 <USBH_LL_Start>
      break;
 80070de:	e010      	b.n	8007102 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80070e0:	bf00      	nop
 80070e2:	e00e      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070e4:	bf00      	nop
 80070e6:	e00c      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070e8:	bf00      	nop
 80070ea:	e00a      	b.n	8007102 <USBH_Process+0x3b6>
    break;
 80070ec:	bf00      	nop
 80070ee:	e008      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <USBH_Process+0x3b6>
      break;
 8007100:	bf00      	nop
  }
  return USBH_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af04      	add	r7, sp, #16
 8007112:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007118:	2301      	movs	r3, #1
 800711a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b07      	cmp	r3, #7
 8007122:	f200 81c1 	bhi.w	80074a8 <USBH_HandleEnum+0x39c>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBH_HandleEnum+0x20>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	0800714d 	.word	0x0800714d
 8007130:	0800720b 	.word	0x0800720b
 8007134:	08007275 	.word	0x08007275
 8007138:	08007303 	.word	0x08007303
 800713c:	0800736d 	.word	0x0800736d
 8007140:	080073dd 	.word	0x080073dd
 8007144:	08007423 	.word	0x08007423
 8007148:	08007469 	.word	0x08007469
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800714c:	2108      	movs	r1, #8
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa50 	bl	80075f4 <USBH_Get_DevDesc>
 8007154:	4603      	mov	r3, r0
 8007156:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d130      	bne.n	80071c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7919      	ldrb	r1, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007182:	b292      	uxth	r2, r2
 8007184:	9202      	str	r2, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	9201      	str	r2, [sp, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4603      	mov	r3, r0
 800718e:	2280      	movs	r2, #128	; 0x80
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 ff77 	bl	8008084 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7959      	ldrb	r1, [r3, #5]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071aa:	b292      	uxth	r2, r2
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	9201      	str	r2, [sp, #4]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4603      	mov	r3, r0
 80071b6:	2200      	movs	r2, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 ff63 	bl	8008084 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071be:	e175      	b.n	80074ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	f040 8172 	bne.w	80074ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d903      	bls.n	80071ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220d      	movs	r2, #13
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e160      	b.n	80074ac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ff97 	bl	8008124 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 ff91 	bl	8008124 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
      break;
 8007208:	e150      	b.n	80074ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800720a:	2112      	movs	r1, #18
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9f1 	bl	80075f4 <USBH_Get_DevDesc>
 8007212:	4603      	mov	r3, r0
 8007214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007222:	e145      	b.n	80074b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 8142 	bne.w	80074b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007232:	3301      	adds	r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007242:	2b03      	cmp	r3, #3
 8007244:	d903      	bls.n	800724e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220d      	movs	r2, #13
 800724a:	701a      	strb	r2, [r3, #0]
      break;
 800724c:	e130      	b.n	80074b0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	795b      	ldrb	r3, [r3, #5]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff65 	bl	8008124 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ff5f 	bl	8008124 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e11d      	b.n	80074b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007274:	2101      	movs	r1, #1
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa68 	bl	800774c <USBH_SetAddress>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d132      	bne.n	80072ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007286:	2002      	movs	r0, #2
 8007288:	f001 fa42 	bl	8008710 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2203      	movs	r2, #3
 8007298:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7919      	ldrb	r1, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80072ae:	b292      	uxth	r2, r2
 80072b0:	9202      	str	r2, [sp, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	9201      	str	r2, [sp, #4]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	2280      	movs	r2, #128	; 0x80
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fee1 	bl	8008084 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7959      	ldrb	r1, [r3, #5]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072d6:	b292      	uxth	r2, r2
 80072d8:	9202      	str	r2, [sp, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	9201      	str	r2, [sp, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	2200      	movs	r2, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fecd 	bl	8008084 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072ea:	e0e3      	b.n	80074b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	f040 80e0 	bne.w	80074b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	220d      	movs	r2, #13
 80072f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	705a      	strb	r2, [r3, #1]
      break;
 8007300:	e0d8      	b.n	80074b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007302:	2109      	movs	r1, #9
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f99d 	bl	8007644 <USBH_Get_CfgDesc>
 800730a:	4603      	mov	r3, r0
 800730c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2204      	movs	r2, #4
 8007318:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800731a:	e0cd      	b.n	80074b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b03      	cmp	r3, #3
 8007320:	f040 80ca 	bne.w	80074b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800732a:	3301      	adds	r3, #1
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733a:	2b03      	cmp	r3, #3
 800733c:	d903      	bls.n	8007346 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220d      	movs	r2, #13
 8007342:	701a      	strb	r2, [r3, #0]
      break;
 8007344:	e0b8      	b.n	80074b8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	795b      	ldrb	r3, [r3, #5]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fee9 	bl	8008124 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fee3 	bl	8008124 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
      break;
 800736a:	e0a5      	b.n	80074b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f965 	bl	8007644 <USBH_Get_CfgDesc>
 800737a:	4603      	mov	r3, r0
 800737c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2205      	movs	r2, #5
 8007388:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800738a:	e097      	b.n	80074bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b03      	cmp	r3, #3
 8007390:	f040 8094 	bne.w	80074bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800739a:	3301      	adds	r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d903      	bls.n	80073b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220d      	movs	r2, #13
 80073b2:	701a      	strb	r2, [r3, #0]
      break;
 80073b4:	e082      	b.n	80074bc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	795b      	ldrb	r3, [r3, #5]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 feb1 	bl	8008124 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	791b      	ldrb	r3, [r3, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 feab 	bl	8008124 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e06f      	b.n	80074bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d019      	beq.n	800741a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073f2:	23ff      	movs	r3, #255	; 0xff
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f949 	bl	800768c <USBH_Get_StringDesc>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2206      	movs	r2, #6
 8007408:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800740a:	e059      	b.n	80074c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d156      	bne.n	80074c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2206      	movs	r2, #6
 8007416:	705a      	strb	r2, [r3, #1]
      break;
 8007418:	e052      	b.n	80074c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2206      	movs	r2, #6
 800741e:	705a      	strb	r2, [r3, #1]
      break;
 8007420:	e04e      	b.n	80074c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007428:	2b00      	cmp	r3, #0
 800742a:	d019      	beq.n	8007460 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007438:	23ff      	movs	r3, #255	; 0xff
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f926 	bl	800768c <USBH_Get_StringDesc>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2207      	movs	r2, #7
 800744e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007450:	e038      	b.n	80074c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d135      	bne.n	80074c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2207      	movs	r2, #7
 800745c:	705a      	strb	r2, [r3, #1]
      break;
 800745e:	e031      	b.n	80074c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2207      	movs	r2, #7
 8007464:	705a      	strb	r2, [r3, #1]
      break;
 8007466:	e02d      	b.n	80074c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800746e:	2b00      	cmp	r3, #0
 8007470:	d017      	beq.n	80074a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800747e:	23ff      	movs	r3, #255	; 0xff
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f903 	bl	800768c <USBH_Get_StringDesc>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007494:	e018      	b.n	80074c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b03      	cmp	r3, #3
 800749a:	d115      	bne.n	80074c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	e012      	b.n	80074c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e00f      	b.n	80074c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80074a8:	bf00      	nop
 80074aa:	e00e      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074ac:	bf00      	nop
 80074ae:	e00c      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074b0:	bf00      	nop
 80074b2:	e00a      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074b4:	bf00      	nop
 80074b6:	e008      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074b8:	bf00      	nop
 80074ba:	e006      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074bc:	bf00      	nop
 80074be:	e004      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074c0:	bf00      	nop
 80074c2:	e002      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <USBH_HandleEnum+0x3be>
      break;
 80074c8:	bf00      	nop
  }
  return Status;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f804 	bl	8007516 <USBH_HandleSof>
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b0b      	cmp	r3, #11
 8007526:	d10a      	bne.n	800753e <USBH_HandleSof+0x28>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
  }
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007556:	bf00      	nop
}
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007572:	bf00      	nop
}
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 ff56 	bl	800847e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fda3 	bl	8008124 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	795b      	ldrb	r3, [r3, #5]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fd9d 	bl	8008124 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	b29b      	uxth	r3, r3
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007612:	2100      	movs	r1, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f864 	bl	80076e2 <USBH_GetDescriptor>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f203 3026 	addw	r0, r3, #806	; 0x326
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	b292      	uxth	r2, r2
 8007634:	4619      	mov	r1, r3
 8007636:	f000 f918 	bl	800786a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	331c      	adds	r3, #28
 8007654:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007656:	887b      	ldrh	r3, [r7, #2]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007660:	2100      	movs	r1, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f83d 	bl	80076e2 <USBH_GetDescriptor>
 8007668:	4603      	mov	r3, r0
 800766a:	72fb      	strb	r3, [r7, #11]
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d107      	bne.n	8007682 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007678:	887a      	ldrh	r2, [r7, #2]
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f964 	bl	800794a <USBH_ParseCfgDesc>
  }

  return status;
 8007682:	7afb      	ldrb	r3, [r7, #11]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	461a      	mov	r2, r3
 8007698:	460b      	mov	r3, r1
 800769a:	72fb      	strb	r3, [r7, #11]
 800769c:	4613      	mov	r3, r2
 800769e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076a8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076b0:	893b      	ldrh	r3, [r7, #8]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	460b      	mov	r3, r1
 80076b6:	2100      	movs	r1, #0
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f812 	bl	80076e2 <USBH_GetDescriptor>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076ce:	893a      	ldrh	r2, [r7, #8]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fa37 	bl	8007b46 <USBH_ParseStringDesc>
  }

  return status;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	72fb      	strb	r3, [r7, #11]
 80076f0:	4613      	mov	r3, r2
 80076f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	789b      	ldrb	r3, [r3, #2]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d11c      	bne.n	8007736 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007702:	b2da      	uxtb	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2206      	movs	r2, #6
 800770c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	893a      	ldrh	r2, [r7, #8]
 8007712:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007714:	893b      	ldrh	r3, [r7, #8]
 8007716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800771a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800771e:	d104      	bne.n	800772a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f240 4209 	movw	r2, #1033	; 0x409
 8007726:	829a      	strh	r2, [r3, #20]
 8007728:	e002      	b.n	8007730 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8b3a      	ldrh	r2, [r7, #24]
 8007734:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007736:	8b3b      	ldrh	r3, [r7, #24]
 8007738:	461a      	mov	r2, r3
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fa50 	bl	8007be2 <USBH_CtlReq>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	789b      	ldrb	r3, [r3, #2]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d10f      	bne.n	8007780 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fa2c 	bl	8007be2 <USBH_CtlReq>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	789b      	ldrb	r3, [r3, #2]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d10e      	bne.n	80077c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2209      	movs	r2, #9
 80077b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	887a      	ldrh	r2, [r7, #2]
 80077b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa09 	bl	8007be2 <USBH_CtlReq>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	789b      	ldrb	r3, [r3, #2]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d10f      	bne.n	800780e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2203      	movs	r2, #3
 80077f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9e5 	bl	8007be2 <USBH_CtlReq>
 8007818:	4603      	mov	r3, r0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	789b      	ldrb	r3, [r3, #2]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d10f      	bne.n	8007856 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2202      	movs	r2, #2
 800783a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9c1 	bl	8007be2 <USBH_CtlReq>
 8007860:	4603      	mov	r3, r0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	4613      	mov	r3, r2
 8007876:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781a      	ldrb	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	785a      	ldrb	r2, [r3, #1]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3302      	adds	r3, #2
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3303      	adds	r3, #3
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b29b      	uxth	r3, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	791a      	ldrb	r2, [r3, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	795a      	ldrb	r2, [r3, #5]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	799a      	ldrb	r2, [r3, #6]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	79da      	ldrb	r2, [r3, #7]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d939      	bls.n	800793e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	3308      	adds	r3, #8
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	3309      	adds	r3, #9
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	330a      	adds	r3, #10
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	330b      	adds	r3, #11
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	330c      	adds	r3, #12
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b29a      	uxth	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	330d      	adds	r3, #13
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	b29b      	uxth	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	7b9a      	ldrb	r2, [r3, #14]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	7bda      	ldrb	r2, [r3, #15]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	7c1a      	ldrb	r2, [r3, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	7c5a      	ldrb	r2, [r3, #17]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	745a      	strb	r2, [r3, #17]
  }
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b08a      	sub	sp, #40	; 0x28
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	785a      	ldrb	r2, [r3, #1]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3302      	adds	r3, #2
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b29a      	uxth	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3303      	adds	r3, #3
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	b29b      	uxth	r3, r3
 8007990:	4313      	orrs	r3, r2
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	791a      	ldrb	r2, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	795a      	ldrb	r2, [r3, #5]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	799a      	ldrb	r2, [r3, #6]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	79da      	ldrb	r2, [r3, #7]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	7a1a      	ldrb	r2, [r3, #8]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b09      	cmp	r3, #9
 80079c4:	d95f      	bls.n	8007a86 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80079c6:	2309      	movs	r3, #9
 80079c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079ce:	e051      	b.n	8007a74 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079d0:	f107 0316 	add.w	r3, r7, #22
 80079d4:	4619      	mov	r1, r3
 80079d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079d8:	f000 f8e8 	bl	8007bac <USBH_GetNextDesc>
 80079dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d146      	bne.n	8007a74 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80079e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ea:	221a      	movs	r2, #26
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	3308      	adds	r3, #8
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	3302      	adds	r3, #2
 80079f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079fc:	69f8      	ldr	r0, [r7, #28]
 80079fe:	f000 f846 	bl	8007a8e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a0c:	e022      	b.n	8007a54 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a0e:	f107 0316 	add.w	r3, r7, #22
 8007a12:	4619      	mov	r1, r3
 8007a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a16:	f000 f8c9 	bl	8007bac <USBH_GetNextDesc>
 8007a1a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b05      	cmp	r3, #5
 8007a22:	d117      	bne.n	8007a54 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	00d2      	lsls	r2, r2, #3
 8007a30:	211a      	movs	r1, #26
 8007a32:	fb01 f303 	mul.w	r3, r1, r3
 8007a36:	4413      	add	r3, r2
 8007a38:	3308      	adds	r3, #8
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3304      	adds	r3, #4
 8007a40:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a44:	69b8      	ldr	r0, [r7, #24]
 8007a46:	f000 f851 	bl	8007aec <USBH_ParseEPDesc>
            ep_ix++;
 8007a4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	791b      	ldrb	r3, [r3, #4]
 8007a58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d204      	bcs.n	8007a6a <USBH_ParseCfgDesc+0x120>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	885a      	ldrh	r2, [r3, #2]
 8007a64:	8afb      	ldrh	r3, [r7, #22]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d8d1      	bhi.n	8007a0e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6e:	3301      	adds	r3, #1
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d804      	bhi.n	8007a86 <USBH_ParseCfgDesc+0x13c>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	885a      	ldrh	r2, [r3, #2]
 8007a80:	8afb      	ldrh	r3, [r7, #22]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d8a4      	bhi.n	80079d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a86:	bf00      	nop
 8007a88:	3728      	adds	r7, #40	; 0x28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785a      	ldrb	r2, [r3, #1]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	789a      	ldrb	r2, [r3, #2]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	78da      	ldrb	r2, [r3, #3]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	791a      	ldrb	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	795a      	ldrb	r2, [r3, #5]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	799a      	ldrb	r2, [r3, #6]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	79da      	ldrb	r2, [r3, #7]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	7a1a      	ldrb	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	721a      	strb	r2, [r3, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785a      	ldrb	r2, [r3, #1]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	789a      	ldrb	r2, [r3, #2]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	78da      	ldrb	r2, [r3, #3]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	3305      	adds	r3, #5
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	799a      	ldrb	r2, [r3, #6]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	719a      	strb	r2, [r3, #6]
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b087      	sub	sp, #28
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	4613      	mov	r3, r2
 8007b52:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d120      	bne.n	8007ba0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	1e9a      	subs	r2, r3, #2
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	bf28      	it	cs
 8007b6a:	4613      	movcs	r3, r2
 8007b6c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3302      	adds	r3, #2
 8007b72:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b74:	2300      	movs	r3, #0
 8007b76:	82fb      	strh	r3, [r7, #22]
 8007b78:	e00b      	b.n	8007b92 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b7a:	8afb      	ldrh	r3, [r7, #22]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b8c:	8afb      	ldrh	r3, [r7, #22]
 8007b8e:	3302      	adds	r3, #2
 8007b90:	82fb      	strh	r3, [r7, #22]
 8007b92:	8afa      	ldrh	r2, [r7, #22]
 8007b94:	8abb      	ldrh	r3, [r7, #20]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3ef      	bcc.n	8007b7a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	881a      	ldrh	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	4613      	mov	r3, r2
 8007bee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	789b      	ldrb	r3, [r3, #2]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d002      	beq.n	8007c02 <USBH_CtlReq+0x20>
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d00f      	beq.n	8007c20 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c00:	e027      	b.n	8007c52 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2202      	movs	r2, #2
 8007c18:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1e:	e018      	b.n	8007c52 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f81b 	bl	8007c5c <USBH_HandleControl>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <USBH_CtlReq+0x54>
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d106      	bne.n	8007c44 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	761a      	strb	r2, [r3, #24]
      break;
 8007c42:	e005      	b.n	8007c50 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d102      	bne.n	8007c50 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	709a      	strb	r2, [r3, #2]
      break;
 8007c50:	bf00      	nop
  }
  return status;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7e1b      	ldrb	r3, [r3, #24]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	2b0a      	cmp	r3, #10
 8007c74:	f200 8156 	bhi.w	8007f24 <USBH_HandleControl+0x2c8>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <USBH_HandleControl+0x24>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cc7 	.word	0x08007cc7
 8007c88:	08007d31 	.word	0x08007d31
 8007c8c:	08007d57 	.word	0x08007d57
 8007c90:	08007d8f 	.word	0x08007d8f
 8007c94:	08007db9 	.word	0x08007db9
 8007c98:	08007e0b 	.word	0x08007e0b
 8007c9c:	08007e2d 	.word	0x08007e2d
 8007ca0:	08007e69 	.word	0x08007e69
 8007ca4:	08007e8f 	.word	0x08007e8f
 8007ca8:	08007ecd 	.word	0x08007ecd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 0110 	add.w	r1, r3, #16
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f943 	bl	8007f44 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	761a      	strb	r2, [r3, #24]
      break;
 8007cc4:	e139      	b.n	8007f3a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fcc5 	bl	800865c <USBH_LL_GetURBState>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d11e      	bne.n	8007d1a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8adb      	ldrh	r3, [r3, #22]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007cee:	7b7b      	ldrb	r3, [r7, #13]
 8007cf0:	2b80      	cmp	r3, #128	; 0x80
 8007cf2:	d103      	bne.n	8007cfc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cfa:	e115      	b.n	8007f28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2205      	movs	r2, #5
 8007d00:	761a      	strb	r2, [r3, #24]
      break;
 8007d02:	e111      	b.n	8007f28 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d04:	7b7b      	ldrb	r3, [r7, #13]
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d103      	bne.n	8007d12 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2209      	movs	r2, #9
 8007d0e:	761a      	strb	r2, [r3, #24]
      break;
 8007d10:	e10a      	b.n	8007f28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2207      	movs	r2, #7
 8007d16:	761a      	strb	r2, [r3, #24]
      break;
 8007d18:	e106      	b.n	8007f28 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d003      	beq.n	8007d28 <USBH_HandleControl+0xcc>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	f040 8100 	bne.w	8007f28 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	220b      	movs	r2, #11
 8007d2c:	761a      	strb	r2, [r3, #24]
      break;
 8007d2e:	e0fb      	b.n	8007f28 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6899      	ldr	r1, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	899a      	ldrh	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	791b      	ldrb	r3, [r3, #4]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f93a 	bl	8007fc2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2204      	movs	r2, #4
 8007d52:	761a      	strb	r2, [r3, #24]
      break;
 8007d54:	e0f1      	b.n	8007f3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc7d 	bl	800865c <USBH_LL_GetURBState>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d102      	bne.n	8007d72 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2209      	movs	r2, #9
 8007d70:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b05      	cmp	r3, #5
 8007d76:	d102      	bne.n	8007d7e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d7c:	e0d6      	b.n	8007f2c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	f040 80d3 	bne.w	8007f2c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220b      	movs	r2, #11
 8007d8a:	761a      	strb	r2, [r3, #24]
      break;
 8007d8c:	e0ce      	b.n	8007f2c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6899      	ldr	r1, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	899a      	ldrh	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	795b      	ldrb	r3, [r3, #5]
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	9000      	str	r0, [sp, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8ea 	bl	8007f78 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2206      	movs	r2, #6
 8007db4:	761a      	strb	r2, [r3, #24]
      break;
 8007db6:	e0c0      	b.n	8007f3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	795b      	ldrb	r3, [r3, #5]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc4c 	bl	800865c <USBH_LL_GetURBState>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d103      	bne.n	8007dd6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dd4:	e0ac      	b.n	8007f30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	d105      	bne.n	8007de8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	220c      	movs	r2, #12
 8007de0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]
      break;
 8007de6:	e0a3      	b.n	8007f30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d103      	bne.n	8007df6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2205      	movs	r2, #5
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e09c      	b.n	8007f30 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	f040 8099 	bne.w	8007f30 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	220b      	movs	r2, #11
 8007e02:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e04:	2302      	movs	r3, #2
 8007e06:	73fb      	strb	r3, [r7, #15]
      break;
 8007e08:	e092      	b.n	8007f30 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8d5 	bl	8007fc2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2208      	movs	r2, #8
 8007e28:	761a      	strb	r2, [r3, #24]

      break;
 8007e2a:	e086      	b.n	8007f3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	791b      	ldrb	r3, [r3, #4]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc12 	bl	800865c <USBH_LL_GetURBState>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d105      	bne.n	8007e4e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	220d      	movs	r2, #13
 8007e46:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e4c:	e072      	b.n	8007f34 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d103      	bne.n	8007e5c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	220b      	movs	r2, #11
 8007e58:	761a      	strb	r2, [r3, #24]
      break;
 8007e5a:	e06b      	b.n	8007f34 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d168      	bne.n	8007f34 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	e065      	b.n	8007f34 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	795b      	ldrb	r3, [r3, #5]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	9200      	str	r2, [sp, #0]
 8007e70:	2200      	movs	r2, #0
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f87f 	bl	8007f78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	220a      	movs	r2, #10
 8007e8a:	761a      	strb	r2, [r3, #24]
      break;
 8007e8c:	e055      	b.n	8007f3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	795b      	ldrb	r3, [r3, #5]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fbe1 	bl	800865c <USBH_LL_GetURBState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d105      	bne.n	8007eb0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	220d      	movs	r2, #13
 8007eac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007eae:	e043      	b.n	8007f38 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d103      	bne.n	8007ebe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2209      	movs	r2, #9
 8007eba:	761a      	strb	r2, [r3, #24]
      break;
 8007ebc:	e03c      	b.n	8007f38 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d139      	bne.n	8007f38 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	220b      	movs	r2, #11
 8007ec8:	761a      	strb	r2, [r3, #24]
      break;
 8007eca:	e035      	b.n	8007f38 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7e5b      	ldrb	r3, [r3, #25]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	765a      	strb	r2, [r3, #25]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7e5b      	ldrb	r3, [r3, #25]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d806      	bhi.n	8007eee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007eec:	e025      	b.n	8007f3a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef4:	2106      	movs	r1, #6
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	795b      	ldrb	r3, [r3, #5]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f90c 	bl	8008124 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f906 	bl	8008124 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	73fb      	strb	r3, [r7, #15]
      break;
 8007f22:	e00a      	b.n	8007f3a <USBH_HandleControl+0x2de>

    default:
      break;
 8007f24:	bf00      	nop
 8007f26:	e008      	b.n	8007f3a <USBH_HandleControl+0x2de>
      break;
 8007f28:	bf00      	nop
 8007f2a:	e006      	b.n	8007f3a <USBH_HandleControl+0x2de>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e004      	b.n	8007f3a <USBH_HandleControl+0x2de>
      break;
 8007f30:	bf00      	nop
 8007f32:	e002      	b.n	8007f3a <USBH_HandleControl+0x2de>
      break;
 8007f34:	bf00      	nop
 8007f36:	e000      	b.n	8007f3a <USBH_HandleControl+0x2de>
      break;
 8007f38:	bf00      	nop
  }

  return status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af04      	add	r7, sp, #16
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f52:	79f9      	ldrb	r1, [r7, #7]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	2308      	movs	r3, #8
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	2300      	movs	r3, #0
 8007f66:	2200      	movs	r2, #0
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fb46 	bl	80085fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af04      	add	r7, sp, #16
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	460b      	mov	r3, r1
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f9c:	7979      	ldrb	r1, [r7, #5]
 8007f9e:	7e3b      	ldrb	r3, [r7, #24]
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	2301      	movs	r3, #1
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fb21 	bl	80085fa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	af04      	add	r7, sp, #16
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	80fb      	strh	r3, [r7, #6]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fd8:	7979      	ldrb	r1, [r7, #5]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	9302      	str	r3, [sp, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	2201      	movs	r2, #1
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fb03 	bl	80085fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ff4:	2300      	movs	r3, #0

}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b088      	sub	sp, #32
 8008002:	af04      	add	r7, sp, #16
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	4611      	mov	r1, r2
 800800a:	461a      	mov	r2, r3
 800800c:	460b      	mov	r3, r1
 800800e:	80fb      	strh	r3, [r7, #6]
 8008010:	4613      	mov	r3, r2
 8008012:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008022:	7979      	ldrb	r1, [r7, #5]
 8008024:	7e3b      	ldrb	r3, [r7, #24]
 8008026:	9303      	str	r3, [sp, #12]
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	2301      	movs	r3, #1
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	2302      	movs	r3, #2
 8008036:	2200      	movs	r2, #0
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fade 	bl	80085fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af04      	add	r7, sp, #16
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4611      	mov	r1, r2
 8008054:	461a      	mov	r2, r3
 8008056:	460b      	mov	r3, r1
 8008058:	80fb      	strh	r3, [r7, #6]
 800805a:	4613      	mov	r3, r2
 800805c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800805e:	7979      	ldrb	r1, [r7, #5]
 8008060:	2300      	movs	r3, #0
 8008062:	9303      	str	r3, [sp, #12]
 8008064:	88fb      	ldrh	r3, [r7, #6]
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	2301      	movs	r3, #1
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2302      	movs	r3, #2
 8008072:	2201      	movs	r2, #1
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fac0 	bl	80085fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af04      	add	r7, sp, #16
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	461a      	mov	r2, r3
 8008092:	4603      	mov	r3, r0
 8008094:	70fb      	strb	r3, [r7, #3]
 8008096:	460b      	mov	r3, r1
 8008098:	70bb      	strb	r3, [r7, #2]
 800809a:	4613      	mov	r3, r2
 800809c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800809e:	7878      	ldrb	r0, [r7, #1]
 80080a0:	78ba      	ldrb	r2, [r7, #2]
 80080a2:	78f9      	ldrb	r1, [r7, #3]
 80080a4:	8b3b      	ldrh	r3, [r7, #24]
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	7d3b      	ldrb	r3, [r7, #20]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	7c3b      	ldrb	r3, [r7, #16]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4603      	mov	r3, r0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa53 	bl	800855e <USBH_LL_OpenPipe>

  return USBH_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa72 	bl	80085bc <USBH_LL_ClosePipe>

  return USBH_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f836 	bl	8008160 <USBH_GetFreePipe>
 80080f4:	4603      	mov	r3, r0
 80080f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00a      	beq.n	8008118 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	33e0      	adds	r3, #224	; 0xe0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008118:	89fb      	ldrh	r3, [r7, #14]
 800811a:	b2db      	uxtb	r3, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	2b0a      	cmp	r3, #10
 8008134:	d80d      	bhi.n	8008152 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	33e0      	adds	r3, #224	; 0xe0
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	33e0      	adds	r3, #224	; 0xe0
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
 8008170:	e00f      	b.n	8008192 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	33e0      	adds	r3, #224	; 0xe0
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	b29b      	uxth	r3, r3
 800818a:	e007      	b.n	800819c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	3301      	adds	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	2b0a      	cmp	r3, #10
 8008196:	d9ec      	bls.n	8008172 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008198:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081ac:	2201      	movs	r2, #1
 80081ae:	490e      	ldr	r1, [pc, #56]	; (80081e8 <MX_USB_HOST_Init+0x40>)
 80081b0:	480e      	ldr	r0, [pc, #56]	; (80081ec <MX_USB_HOST_Init+0x44>)
 80081b2:	f7fe fca1 	bl	8006af8 <USBH_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081bc:	f7f8 fc1a 	bl	80009f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80081c0:	490b      	ldr	r1, [pc, #44]	; (80081f0 <MX_USB_HOST_Init+0x48>)
 80081c2:	480a      	ldr	r0, [pc, #40]	; (80081ec <MX_USB_HOST_Init+0x44>)
 80081c4:	f7fe fd26 	bl	8006c14 <USBH_RegisterClass>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80081ce:	f7f8 fc11 	bl	80009f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80081d2:	4806      	ldr	r0, [pc, #24]	; (80081ec <MX_USB_HOST_Init+0x44>)
 80081d4:	f7fe fdaa 	bl	8006d2c <USBH_Start>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80081de:	f7f8 fc09 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	08008209 	.word	0x08008209
 80081ec:	20000220 	.word	0x20000220
 80081f0:	20000010 	.word	0x20000010

080081f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80081f8:	4802      	ldr	r0, [pc, #8]	; (8008204 <MX_USB_HOST_Process+0x10>)
 80081fa:	f7fe fda7 	bl	8006d4c <USBH_Process>
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000220 	.word	0x20000220

08008208 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	3b01      	subs	r3, #1
 8008218:	2b04      	cmp	r3, #4
 800821a:	d819      	bhi.n	8008250 <USBH_UserProcess+0x48>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <USBH_UserProcess+0x1c>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008251 	.word	0x08008251
 8008228:	08008241 	.word	0x08008241
 800822c:	08008251 	.word	0x08008251
 8008230:	08008249 	.word	0x08008249
 8008234:	08008239 	.word	0x08008239
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008238:	4b09      	ldr	r3, [pc, #36]	; (8008260 <USBH_UserProcess+0x58>)
 800823a:	2203      	movs	r2, #3
 800823c:	701a      	strb	r2, [r3, #0]
  break;
 800823e:	e008      	b.n	8008252 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <USBH_UserProcess+0x58>)
 8008242:	2202      	movs	r2, #2
 8008244:	701a      	strb	r2, [r3, #0]
  break;
 8008246:	e004      	b.n	8008252 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <USBH_UserProcess+0x58>)
 800824a:	2201      	movs	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
  break;
 800824e:	e000      	b.n	8008252 <USBH_UserProcess+0x4a>

  default:
  break;
 8008250:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200000c4 	.word	0x200000c4

08008264 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800826c:	f107 0314 	add.w	r3, r7, #20
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008284:	d147      	bne.n	8008316 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	4b25      	ldr	r3, [pc, #148]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	4a24      	ldr	r2, [pc, #144]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	6313      	str	r3, [r2, #48]	; 0x30
 8008296:	4b22      	ldr	r3, [pc, #136]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	4619      	mov	r1, r3
 80082b6:	481b      	ldr	r0, [pc, #108]	; (8008324 <HAL_HCD_MspInit+0xc0>)
 80082b8:	f7f9 fb90 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c2:	2302      	movs	r3, #2
 80082c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ca:	2300      	movs	r3, #0
 80082cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082ce:	230a      	movs	r3, #10
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d2:	f107 0314 	add.w	r3, r7, #20
 80082d6:	4619      	mov	r1, r3
 80082d8:	4812      	ldr	r0, [pc, #72]	; (8008324 <HAL_HCD_MspInit+0xc0>)
 80082da:	f7f9 fb7f 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082de:	4b10      	ldr	r3, [pc, #64]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 80082e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e2:	4a0f      	ldr	r2, [pc, #60]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 80082e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e8:	6353      	str	r3, [r2, #52]	; 0x34
 80082ea:	2300      	movs	r3, #0
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 80082f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f2:	4a0b      	ldr	r2, [pc, #44]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 80082f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082f8:	6453      	str	r3, [r2, #68]	; 0x44
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <HAL_HCD_MspInit+0xbc>)
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	2043      	movs	r0, #67	; 0x43
 800830c:	f7f9 fb2f 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008310:	2043      	movs	r0, #67	; 0x43
 8008312:	f7f9 fb48 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008316:	bf00      	nop
 8008318:	3728      	adds	r7, #40	; 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	40023800 	.word	0x40023800
 8008324:	40020000 	.word	0x40020000

08008328 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff f8db 	bl	80074f2 <USBH_LL_IncTimer>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff f913 	bl	800757e <USBH_LL_Connect>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff f91c 	bl	80075ac <USBH_LL_Disconnect>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
 8008388:	4613      	mov	r3, r2
 800838a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff f8cd 	bl	8007546 <USBH_LL_PortEnabled>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff f8cd 	bl	8007562 <USBH_LL_PortDisabled>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d12a      	bne.n	8008438 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80083e2:	4a18      	ldr	r2, [pc, #96]	; (8008444 <USBH_LL_Init+0x74>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a15      	ldr	r2, [pc, #84]	; (8008444 <USBH_LL_Init+0x74>)
 80083ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <USBH_LL_Init+0x74>)
 80083f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80083fa:	4b12      	ldr	r3, [pc, #72]	; (8008444 <USBH_LL_Init+0x74>)
 80083fc:	2208      	movs	r2, #8
 80083fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <USBH_LL_Init+0x74>)
 8008402:	2201      	movs	r2, #1
 8008404:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <USBH_LL_Init+0x74>)
 8008408:	2200      	movs	r2, #0
 800840a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <USBH_LL_Init+0x74>)
 800840e:	2202      	movs	r2, #2
 8008410:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008412:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <USBH_LL_Init+0x74>)
 8008414:	2200      	movs	r2, #0
 8008416:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008418:	480a      	ldr	r0, [pc, #40]	; (8008444 <USBH_LL_Init+0x74>)
 800841a:	f7f9 fc94 	bl	8001d46 <HAL_HCD_Init>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008424:	f7f8 fae6 	bl	80009f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008428:	4806      	ldr	r0, [pc, #24]	; (8008444 <USBH_LL_Init+0x74>)
 800842a:	f7fa f878 	bl	800251e <HAL_HCD_GetCurrentFrame>
 800842e:	4603      	mov	r3, r0
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff f84e 	bl	80074d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	200005f8 	.word	0x200005f8

08008448 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800845e:	4618      	mov	r0, r3
 8008460:	f7f9 ffe7 	bl	8002432 <HAL_HCD_Start>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 f95c 	bl	8008728 <USBH_Get_USB_Status>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008474:	7bbb      	ldrb	r3, [r7, #14]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008494:	4618      	mov	r0, r3
 8008496:	f7f9 ffef 	bl	8002478 <HAL_HCD_Stop>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f941 	bl	8008728 <USBH_Get_USB_Status>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fa f837 	bl	800253a <HAL_HCD_GetCurrentSpeed>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d00c      	beq.n	80084ec <USBH_LL_GetSpeed+0x38>
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d80d      	bhi.n	80084f2 <USBH_LL_GetSpeed+0x3e>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <USBH_LL_GetSpeed+0x2c>
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d003      	beq.n	80084e6 <USBH_LL_GetSpeed+0x32>
 80084de:	e008      	b.n	80084f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
    break;
 80084e4:	e008      	b.n	80084f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80084e6:	2301      	movs	r3, #1
 80084e8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ea:	e005      	b.n	80084f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80084ec:	2302      	movs	r3, #2
 80084ee:	73fb      	strb	r3, [r7, #15]
    break;
 80084f0:	e002      	b.n	80084f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80084f2:	2301      	movs	r3, #1
 80084f4:	73fb      	strb	r3, [r7, #15]
    break;
 80084f6:	bf00      	nop
  }
  return  speed;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008518:	4618      	mov	r0, r3
 800851a:	f7f9 ffca 	bl	80024b2 <HAL_HCD_ResetPort>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f8ff 	bl	8008728 <USBH_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7f9 ffd1 	bl	80024f6 <HAL_HCD_HC_GetXferCount>
 8008554:	4603      	mov	r3, r0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800855e:	b590      	push	{r4, r7, lr}
 8008560:	b089      	sub	sp, #36	; 0x24
 8008562:	af04      	add	r7, sp, #16
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	4603      	mov	r3, r0
 800856e:	70fb      	strb	r3, [r7, #3]
 8008570:	460b      	mov	r3, r1
 8008572:	70bb      	strb	r3, [r7, #2]
 8008574:	4613      	mov	r3, r2
 8008576:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008586:	787c      	ldrb	r4, [r7, #1]
 8008588:	78ba      	ldrb	r2, [r7, #2]
 800858a:	78f9      	ldrb	r1, [r7, #3]
 800858c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	4623      	mov	r3, r4
 800859e:	f7f9 fc34 	bl	8001e0a <HAL_HCD_HC_Init>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8bd 	bl	8008728 <USBH_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}

080085bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f9 fca4 	bl	8001f28 <HAL_HCD_HC_Halt>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f89e 	bl	8008728 <USBH_Get_USB_Status>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80085fa:	b590      	push	{r4, r7, lr}
 80085fc:	b089      	sub	sp, #36	; 0x24
 80085fe:	af04      	add	r7, sp, #16
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	4608      	mov	r0, r1
 8008604:	4611      	mov	r1, r2
 8008606:	461a      	mov	r2, r3
 8008608:	4603      	mov	r3, r0
 800860a:	70fb      	strb	r3, [r7, #3]
 800860c:	460b      	mov	r3, r1
 800860e:	70bb      	strb	r3, [r7, #2]
 8008610:	4613      	mov	r3, r2
 8008612:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008622:	787c      	ldrb	r4, [r7, #1]
 8008624:	78ba      	ldrb	r2, [r7, #2]
 8008626:	78f9      	ldrb	r1, [r7, #3]
 8008628:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008630:	9302      	str	r3, [sp, #8]
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4623      	mov	r3, r4
 800863e:	f7f9 fc97 	bl	8001f70 <HAL_HCD_HC_SubmitRequest>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 f86d 	bl	8008728 <USBH_Get_USB_Status>
 800864e:	4603      	mov	r3, r0
 8008650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008652:	7bbb      	ldrb	r3, [r7, #14]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	bd90      	pop	{r4, r7, pc}

0800865c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f7f9 ff2b 	bl	80024ce <HAL_HCD_HC_GetURBState>
 8008678:	4603      	mov	r3, r0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008694:	2b01      	cmp	r3, #1
 8008696:	d103      	bne.n	80086a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f870 	bl	8008780 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80086a0:	20c8      	movs	r0, #200	; 0xc8
 80086a2:	f7f9 f865 	bl	8001770 <HAL_Delay>
  return USBH_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
 80086bc:	4613      	mov	r3, r2
 80086be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	212c      	movs	r1, #44	; 0x2c
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	333b      	adds	r3, #59	; 0x3b
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	212c      	movs	r1, #44	; 0x2c
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	3354      	adds	r3, #84	; 0x54
 80086ea:	78ba      	ldrb	r2, [r7, #2]
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e008      	b.n	8008702 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	212c      	movs	r1, #44	; 0x2c
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	3355      	adds	r3, #85	; 0x55
 80086fe:	78ba      	ldrb	r2, [r7, #2]
 8008700:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7f9 f829 	bl	8001770 <HAL_Delay>
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d817      	bhi.n	800876c <USBH_Get_USB_Status+0x44>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBH_Get_USB_Status+0x1c>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008755 	.word	0x08008755
 8008748:	0800875b 	.word	0x0800875b
 800874c:	08008761 	.word	0x08008761
 8008750:	08008767 	.word	0x08008767
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	e00b      	b.n	8008772 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800875a:	2302      	movs	r3, #2
 800875c:	73fb      	strb	r3, [r7, #15]
    break;
 800875e:	e008      	b.n	8008772 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
    break;
 8008764:	e005      	b.n	8008772 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008766:	2302      	movs	r3, #2
 8008768:	73fb      	strb	r3, [r7, #15]
    break;
 800876a:	e002      	b.n	8008772 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800876c:	2302      	movs	r3, #2
 800876e:	73fb      	strb	r3, [r7, #15]
    break;
 8008770:	bf00      	nop
  }
  return usb_status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008794:	2301      	movs	r3, #1
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	e001      	b.n	800879e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	461a      	mov	r2, r3
 80087a2:	2101      	movs	r1, #1
 80087a4:	4803      	ldr	r0, [pc, #12]	; (80087b4 <MX_DriverVbusFS+0x34>)
 80087a6:	f7f9 fab5 	bl	8001d14 <HAL_GPIO_WritePin>
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40020800 	.word	0x40020800

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	; (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000030 	.word	0x20000030

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	; (80087fc <__libc_init_array+0x38>)
 80087c8:	4c0d      	ldr	r4, [pc, #52]	; (8008800 <__libc_init_array+0x3c>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	2600      	movs	r6, #0
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	; (8008804 <__libc_init_array+0x40>)
 80087d6:	4c0c      	ldr	r4, [pc, #48]	; (8008808 <__libc_init_array+0x44>)
 80087d8:	f000 f8f8 	bl	80089cc <_init>
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	2600      	movs	r6, #0
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	4798      	blx	r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	4798      	blx	r3
 80087f8:	3601      	adds	r6, #1
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	08028a08 	.word	0x08028a08
 8008800:	08028a08 	.word	0x08028a08
 8008804:	08028a08 	.word	0x08028a08
 8008808:	08028a0c 	.word	0x08028a0c

0800880c <malloc>:
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <malloc+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f000 b863 	b.w	80088dc <_malloc_r>
 8008816:	bf00      	nop
 8008818:	20000030 	.word	0x20000030

0800881c <free>:
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <free+0xc>)
 800881e:	4601      	mov	r1, r0
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	f000 b80b 	b.w	800883c <_free_r>
 8008826:	bf00      	nop
 8008828:	20000030 	.word	0x20000030

0800882c <memset>:
 800882c:	4402      	add	r2, r0
 800882e:	4603      	mov	r3, r0
 8008830:	4293      	cmp	r3, r2
 8008832:	d100      	bne.n	8008836 <memset+0xa>
 8008834:	4770      	bx	lr
 8008836:	f803 1b01 	strb.w	r1, [r3], #1
 800883a:	e7f9      	b.n	8008830 <memset+0x4>

0800883c <_free_r>:
 800883c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800883e:	2900      	cmp	r1, #0
 8008840:	d048      	beq.n	80088d4 <_free_r+0x98>
 8008842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008846:	9001      	str	r0, [sp, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f1a1 0404 	sub.w	r4, r1, #4
 800884e:	bfb8      	it	lt
 8008850:	18e4      	addlt	r4, r4, r3
 8008852:	f000 f8ad 	bl	80089b0 <__malloc_lock>
 8008856:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <_free_r+0x9c>)
 8008858:	9801      	ldr	r0, [sp, #4]
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	4615      	mov	r5, r2
 800885e:	b933      	cbnz	r3, 800886e <_free_r+0x32>
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	6014      	str	r4, [r2, #0]
 8008864:	b003      	add	sp, #12
 8008866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800886a:	f000 b8a7 	b.w	80089bc <__malloc_unlock>
 800886e:	42a3      	cmp	r3, r4
 8008870:	d90b      	bls.n	800888a <_free_r+0x4e>
 8008872:	6821      	ldr	r1, [r4, #0]
 8008874:	1862      	adds	r2, r4, r1
 8008876:	4293      	cmp	r3, r2
 8008878:	bf04      	itt	eq
 800887a:	681a      	ldreq	r2, [r3, #0]
 800887c:	685b      	ldreq	r3, [r3, #4]
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	bf04      	itt	eq
 8008882:	1852      	addeq	r2, r2, r1
 8008884:	6022      	streq	r2, [r4, #0]
 8008886:	602c      	str	r4, [r5, #0]
 8008888:	e7ec      	b.n	8008864 <_free_r+0x28>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x58>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x4e>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1855      	adds	r5, r2, r1
 8008898:	42a5      	cmp	r5, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x78>
 800889c:	6824      	ldr	r4, [r4, #0]
 800889e:	4421      	add	r1, r4
 80088a0:	1854      	adds	r4, r2, r1
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1dd      	bne.n	8008864 <_free_r+0x28>
 80088a8:	681c      	ldr	r4, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	4421      	add	r1, r4
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	e7d7      	b.n	8008864 <_free_r+0x28>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x80>
 80088b6:	230c      	movs	r3, #12
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	e7d3      	b.n	8008864 <_free_r+0x28>
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	1961      	adds	r1, r4, r5
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7c7      	b.n	8008864 <_free_r+0x28>
 80088d4:	b003      	add	sp, #12
 80088d6:	bd30      	pop	{r4, r5, pc}
 80088d8:	200000c8 	.word	0x200000c8

080088dc <_malloc_r>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	1ccd      	adds	r5, r1, #3
 80088e0:	f025 0503 	bic.w	r5, r5, #3
 80088e4:	3508      	adds	r5, #8
 80088e6:	2d0c      	cmp	r5, #12
 80088e8:	bf38      	it	cc
 80088ea:	250c      	movcc	r5, #12
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	4606      	mov	r6, r0
 80088f0:	db01      	blt.n	80088f6 <_malloc_r+0x1a>
 80088f2:	42a9      	cmp	r1, r5
 80088f4:	d903      	bls.n	80088fe <_malloc_r+0x22>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fe:	f000 f857 	bl	80089b0 <__malloc_lock>
 8008902:	4921      	ldr	r1, [pc, #132]	; (8008988 <_malloc_r+0xac>)
 8008904:	680a      	ldr	r2, [r1, #0]
 8008906:	4614      	mov	r4, r2
 8008908:	b99c      	cbnz	r4, 8008932 <_malloc_r+0x56>
 800890a:	4f20      	ldr	r7, [pc, #128]	; (800898c <_malloc_r+0xb0>)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b923      	cbnz	r3, 800891a <_malloc_r+0x3e>
 8008910:	4621      	mov	r1, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f83c 	bl	8008990 <_sbrk_r>
 8008918:	6038      	str	r0, [r7, #0]
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f837 	bl	8008990 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d123      	bne.n	800896e <_malloc_r+0x92>
 8008926:	230c      	movs	r3, #12
 8008928:	6033      	str	r3, [r6, #0]
 800892a:	4630      	mov	r0, r6
 800892c:	f000 f846 	bl	80089bc <__malloc_unlock>
 8008930:	e7e3      	b.n	80088fa <_malloc_r+0x1e>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	1b5b      	subs	r3, r3, r5
 8008936:	d417      	bmi.n	8008968 <_malloc_r+0x8c>
 8008938:	2b0b      	cmp	r3, #11
 800893a:	d903      	bls.n	8008944 <_malloc_r+0x68>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	441c      	add	r4, r3
 8008940:	6025      	str	r5, [r4, #0]
 8008942:	e004      	b.n	800894e <_malloc_r+0x72>
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	42a2      	cmp	r2, r4
 8008948:	bf0c      	ite	eq
 800894a:	600b      	streq	r3, [r1, #0]
 800894c:	6053      	strne	r3, [r2, #4]
 800894e:	4630      	mov	r0, r6
 8008950:	f000 f834 	bl	80089bc <__malloc_unlock>
 8008954:	f104 000b 	add.w	r0, r4, #11
 8008958:	1d23      	adds	r3, r4, #4
 800895a:	f020 0007 	bic.w	r0, r0, #7
 800895e:	1ac2      	subs	r2, r0, r3
 8008960:	d0cc      	beq.n	80088fc <_malloc_r+0x20>
 8008962:	1a1b      	subs	r3, r3, r0
 8008964:	50a3      	str	r3, [r4, r2]
 8008966:	e7c9      	b.n	80088fc <_malloc_r+0x20>
 8008968:	4622      	mov	r2, r4
 800896a:	6864      	ldr	r4, [r4, #4]
 800896c:	e7cc      	b.n	8008908 <_malloc_r+0x2c>
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d0e3      	beq.n	8008940 <_malloc_r+0x64>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f808 	bl	8008990 <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d1dd      	bne.n	8008940 <_malloc_r+0x64>
 8008984:	e7cf      	b.n	8008926 <_malloc_r+0x4a>
 8008986:	bf00      	nop
 8008988:	200000c8 	.word	0x200000c8
 800898c:	200000cc 	.word	0x200000cc

08008990 <_sbrk_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_sbrk_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f8 f9d2 	bl	8000d44 <_sbrk>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_sbrk_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_sbrk_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	200008fc 	.word	0x200008fc

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_lock+0x8>)
 80089b2:	f000 b809 	b.w	80089c8 <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20000904 	.word	0x20000904

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_unlock+0x8>)
 80089be:	f000 b804 	b.w	80089ca <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000904 	.word	0x20000904

080089c8 <__retarget_lock_acquire_recursive>:
 80089c8:	4770      	bx	lr

080089ca <__retarget_lock_release_recursive>:
 80089ca:	4770      	bx	lr

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
