
tft_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000878  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d08d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f53  00000000  00000000  0003d151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000410a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c0  00000000  00000000  000422e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243d8  00000000  00000000  000433a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001895e  00000000  00000000  00067780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc15e  00000000  00000000  000800de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014c23c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004da8  00000000  00000000  0014c290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008cc8 	.word	0x08008cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008cc8 	.word	0x08008cc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 fa5f 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82f 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f961 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f895 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8c1 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f8ef 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 ffe1 	bl	80084a4 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004e2:	f000 f921 	bl	8000728 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  tft_init(&hspi2,
 80004e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004ea:	9304      	str	r3, [sp, #16]
 80004ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004f0:	9303      	str	r3, [sp, #12]
 80004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x60>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <main+0x60>)
 8000504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <main+0x64>)
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x68>)
 800050c:	f000 fc7a 	bl	8000e04 <tft_init>
		  LCD_CS_GPIO_Port,  LCD_CS_Pin,
		  LCD_DC_GPIO_Port,  LCD_DC_Pin,
		  LCD_RST_GPIO_Port, LCD_RST_Pin,
		  480, 320);
  tft_set_rotation(2);
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fe4f 	bl	80011b4 <tft_set_rotation>
//  test_circles(50, COLOR_CYAN);
//  test_triangles(COLOR_CYAN);
//  test_fill_triangles(COLOR_BLUE2);

//  test_round_rects();
  test_fill_round_rects();
 8000516:	f001 f91f 	bl	8001758 <test_fill_round_rects>
  while (1)
  {
//	  test_fill_screen();
//	  test_lines2(COLOR_WHITE, COLOR_ORANGE);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051a:	f007 ffe9 	bl	80084f0 <MX_USB_HOST_Process>
 800051e:	e7fc      	b.n	800051a <main+0x5a>
 8000520:	40021000 	.word	0x40021000
 8000524:	40020400 	.word	0x40020400
 8000528:	200000d0 	.word	0x200000d0

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 faf4 	bl	8008b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f89a 	bl	80046ec <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 fa0b 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fafb 	bl	8004bdc <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 f9f4 	bl	80009d8 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f003 fa71 	bl	8003b24 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9c6 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000128 	.word	0x20000128
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f003 fb86 	bl	8003dac <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f997 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001d4 	.word	0x200001d4
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 fd8d 	bl	800522c <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f95e 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000017c 	.word	0x2000017c
 8000724:	40013000 	.word	0x40013000

08000728 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI2_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI2_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI2_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI2_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI2_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI2_Init+0x64>)
 800075c:	2228      	movs	r2, #40	; 0x28
 800075e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI2_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI2_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI2_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI2_Init+0x64>)
 800077a:	f004 fd57 	bl	800522c <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f928 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000d0 	.word	0x200000d0
 8000790:	40003800 	.word	0x40003800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b84      	ldr	r3, [pc, #528]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a83      	ldr	r2, [pc, #524]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b81      	ldr	r3, [pc, #516]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b7d      	ldr	r3, [pc, #500]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7c      	ldr	r2, [pc, #496]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7a      	ldr	r3, [pc, #488]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b76      	ldr	r3, [pc, #472]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a75      	ldr	r2, [pc, #468]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b73      	ldr	r3, [pc, #460]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a6e      	ldr	r2, [pc, #440]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b6c      	ldr	r3, [pc, #432]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a67      	ldr	r2, [pc, #412]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <MX_GPIO_Init+0x22c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <MX_GPIO_Init+0x22c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a60      	ldr	r2, [pc, #384]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000858:	485a      	ldr	r0, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x230>)
 800085a:	f001 fbd9 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2101      	movs	r1, #1
 8000862:	4859      	ldr	r0, [pc, #356]	; (80009c8 <MX_GPIO_Init+0x234>)
 8000864:	f001 fbd4 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800086e:	4857      	ldr	r0, [pc, #348]	; (80009cc <MX_GPIO_Init+0x238>)
 8000870:	f001 fbce 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000874:	2200      	movs	r2, #0
 8000876:	f24f 0110 	movw	r1, #61456	; 0xf010
 800087a:	4855      	ldr	r0, [pc, #340]	; (80009d0 <MX_GPIO_Init+0x23c>)
 800087c:	f001 fbc8 	bl	8002010 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8000880:	f24a 0308 	movw	r3, #40968	; 0xa008
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	484a      	ldr	r0, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x230>)
 800089a:	f001 fa1d 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4844      	ldr	r0, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x234>)
 80008b6:	f001 fa0f 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	; (80009c8 <MX_GPIO_Init+0x234>)
 80008d6:	f001 f9ff 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4839      	ldr	r0, [pc, #228]	; (80009d4 <MX_GPIO_Init+0x240>)
 80008f0:	f001 f9f2 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008f4:	2304      	movs	r3, #4
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4831      	ldr	r0, [pc, #196]	; (80009cc <MX_GPIO_Init+0x238>)
 8000908:	f001 f9e6 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800090c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000912:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4828      	ldr	r0, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x230>)
 8000924:	f001 f9d8 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x238>)
 8000946:	f001 f9c7 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|LCD_CS_Pin;
 800094a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_GPIO_Init+0x238>)
 8000964:	f001 f9b8 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000968:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_GPIO_Init+0x23c>)
 8000982:	f001 f9a9 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_GPIO_Init+0x23c>)
 800099a:	f001 f99d 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0x230>)
 80009b4:	f001 f990 	bl	8001cd8 <HAL_GPIO_Init>

}
 80009b8:	bf00      	nop
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f001 f916 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_I2C_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12c      	bne.n	8000ab0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <HAL_I2C_MspInit+0x8c>)
 8000a90:	f001 f922 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <HAL_I2S_MspInit+0xf0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d15a      	bne.n	8000baa <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000af8:	23c0      	movs	r3, #192	; 0xc0
 8000afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fa51 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b10:	f7ff ff62 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <HAL_I2S_MspInit+0xf8>)
 8000b84:	f001 f8a8 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b88:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_I2S_MspInit+0xfc>)
 8000ba6:	f001 f897 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3738      	adds	r7, #56	; 0x38
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40003c00 	.word	0x40003c00
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a32      	ldr	r2, [pc, #200]	; (8000cac <HAL_SPI_MspInit+0xe8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12c      	bne.n	8000c40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c1e:	23e0      	movs	r3, #224	; 0xe0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <HAL_SPI_MspInit+0xf0>)
 8000c3a:	f001 f84d 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c3e:	e031      	b.n	8000ca4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <HAL_SPI_MspInit+0xf4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12c      	bne.n	8000ca4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_SPI_MspInit+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000c82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c94:	2305      	movs	r3, #5
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <HAL_SPI_MspInit+0xf8>)
 8000ca0:	f001 f81a 	bl	8001cd8 <HAL_GPIO_Init>
}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40013000 	.word	0x40013000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40003800 	.word	0x40003800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 fe8e 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <OTG_FS_IRQHandler+0x10>)
 8000d1a:	f001 fbfd 	bl	8002518 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200005f8 	.word	0x200005f8

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f007 feac 	bl	8008ab4 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200000b0 	.word	0x200000b0
 8000d90:	20000910 	.word	0x20000910

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <color565>:

static TFT *tft;
static uint8_t rot_num = 1;
static uint32_t tft_width, tft_height, tft_pixel_count;

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	71bb      	strb	r3, [r7, #6]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8)  |
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dd4:	f023 0307 	bic.w	r3, r3, #7
 8000dd8:	b21a      	sxth	r2, r3
			((g & 0xFC) << 3) |
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000de4:	b21b      	sxth	r3, r3
	return ((r & 0xF8) << 8)  |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21a      	sxth	r2, r3
			((b & 0xF8) >> 3);
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	b21b      	sxth	r3, r3
			((g & 0xFC) << 3) |
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	b29b      	uxth	r3, r3
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <tft_init>:

void tft_init(SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin,
		uint32_t width, uint32_t height) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	80fb      	strh	r3, [r7, #6]


	tft_width = width;
 8000e14:	4ab7      	ldr	r2, [pc, #732]	; (80010f4 <tft_init+0x2f0>)
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	6013      	str	r3, [r2, #0]
	tft_height = height;
 8000e1a:	4ab7      	ldr	r2, [pc, #732]	; (80010f8 <tft_init+0x2f4>)
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6013      	str	r3, [r2, #0]
	tft_pixel_count = width * height;
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4ab4      	ldr	r2, [pc, #720]	; (80010fc <tft_init+0x2f8>)
 8000e2a:	6013      	str	r3, [r2, #0]

	tft = tft_interface_init(spi, cs_port, cs_pin, dc_port, dc_pin, rst_port, rst_pin);
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	8c3b      	ldrh	r3, [r7, #32]
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	8b3b      	ldrh	r3, [r7, #24]
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 fd48 	bl	80018d4 <tft_interface_init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4aae      	ldr	r2, [pc, #696]	; (8001100 <tft_init+0x2fc>)
 8000e48:	6013      	str	r3, [r2, #0]

	tft_rst_off(tft);
 8000e4a:	4bad      	ldr	r3, [pc, #692]	; (8001100 <tft_init+0x2fc>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68d8      	ldr	r0, [r3, #12]
 8000e50:	4bab      	ldr	r3, [pc, #684]	; (8001100 <tft_init+0x2fc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	8a9b      	ldrh	r3, [r3, #20]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f001 f8d9 	bl	8002010 <HAL_GPIO_WritePin>
	tft_rst_on(tft);
 8000e5e:	4ba8      	ldr	r3, [pc, #672]	; (8001100 <tft_init+0x2fc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68d8      	ldr	r0, [r3, #12]
 8000e64:	4ba6      	ldr	r3, [pc, #664]	; (8001100 <tft_init+0x2fc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	8a9b      	ldrh	r3, [r3, #20]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f001 f8cf 	bl	8002010 <HAL_GPIO_WritePin>
	tft_rst_off(tft);
 8000e72:	4ba3      	ldr	r3, [pc, #652]	; (8001100 <tft_init+0x2fc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68d8      	ldr	r0, [r3, #12]
 8000e78:	4ba1      	ldr	r3, [pc, #644]	; (8001100 <tft_init+0x2fc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	8a9b      	ldrh	r3, [r3, #20]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f001 f8c5 	bl	8002010 <HAL_GPIO_WritePin>

	tft_send_cmd(tft, TFTCMD_NOP);
 8000e86:	4b9e      	ldr	r3, [pc, #632]	; (8001100 <tft_init+0x2fc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fccf 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x00);
 8000e92:	4b9b      	ldr	r3, [pc, #620]	; (8001100 <tft_init+0x2fc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fcf2 	bl	8001882 <tft_send_data>
	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8000e9e:	4b98      	ldr	r3, [pc, #608]	; (8001100 <tft_init+0x2fc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2111      	movs	r1, #17
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fcc3 	bl	8001830 <tft_send_cmd>

	tft_delay(150);
 8000eaa:	2096      	movs	r0, #150	; 0x96
 8000eac:	f000 fdde 	bl	8001a6c <HAL_Delay>

	tft_send_cmd(tft, TFTCMD_PIXEL_FORMAT);
 8000eb0:	4b93      	ldr	r3, [pc, #588]	; (8001100 <tft_init+0x2fc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	213a      	movs	r1, #58	; 0x3a
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fcba 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x55);
 8000ebc:	4b90      	ldr	r3, [pc, #576]	; (8001100 <tft_init+0x2fc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2155      	movs	r1, #85	; 0x55
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fcdd 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_MAC);
 8000ec8:	4b8d      	ldr	r3, [pc, #564]	; (8001100 <tft_init+0x2fc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2136      	movs	r1, #54	; 0x36
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fcae 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x48);
 8000ed4:	4b8a      	ldr	r3, [pc, #552]	; (8001100 <tft_init+0x2fc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2148      	movs	r1, #72	; 0x48
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fcd1 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_POWER3);
 8000ee0:	4b87      	ldr	r3, [pc, #540]	; (8001100 <tft_init+0x2fc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	21c2      	movs	r1, #194	; 0xc2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fca2 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x44);
 8000eec:	4b84      	ldr	r3, [pc, #528]	; (8001100 <tft_init+0x2fc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2144      	movs	r1, #68	; 0x44
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fcc5 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_VCOM1);
 8000ef8:	4b81      	ldr	r3, [pc, #516]	; (8001100 <tft_init+0x2fc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	21c5      	movs	r1, #197	; 0xc5
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fc96 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x00); tft_send_data(tft, 0x00);
 8000f04:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <tft_init+0x2fc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fcb9 	bl	8001882 <tft_send_data>
 8000f10:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <tft_init+0x2fc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fcb3 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x00); tft_send_data(tft, 0x00);
 8000f1c:	4b78      	ldr	r3, [pc, #480]	; (8001100 <tft_init+0x2fc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fcad 	bl	8001882 <tft_send_data>
 8000f28:	4b75      	ldr	r3, [pc, #468]	; (8001100 <tft_init+0x2fc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fca7 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_PGAMMA);
 8000f34:	4b72      	ldr	r3, [pc, #456]	; (8001100 <tft_init+0x2fc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	21e0      	movs	r1, #224	; 0xe0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fc78 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x1f);
 8000f40:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <tft_init+0x2fc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	210f      	movs	r1, #15
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fc9b 	bl	8001882 <tft_send_data>
 8000f4c:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <tft_init+0x2fc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	211f      	movs	r1, #31
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fc95 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x1c); tft_send_data(tft, 0x0c);
 8000f58:	4b69      	ldr	r3, [pc, #420]	; (8001100 <tft_init+0x2fc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	211c      	movs	r1, #28
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fc8f 	bl	8001882 <tft_send_data>
 8000f64:	4b66      	ldr	r3, [pc, #408]	; (8001100 <tft_init+0x2fc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	210c      	movs	r1, #12
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fc89 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x08);
 8000f70:	4b63      	ldr	r3, [pc, #396]	; (8001100 <tft_init+0x2fc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	210f      	movs	r1, #15
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fc83 	bl	8001882 <tft_send_data>
 8000f7c:	4b60      	ldr	r3, [pc, #384]	; (8001100 <tft_init+0x2fc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2108      	movs	r1, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fc7d 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x48); tft_send_data(tft, 0x98);
 8000f88:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <tft_init+0x2fc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2148      	movs	r1, #72	; 0x48
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fc77 	bl	8001882 <tft_send_data>
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <tft_init+0x2fc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2198      	movs	r1, #152	; 0x98
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fc71 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x0a);
 8000fa0:	4b57      	ldr	r3, [pc, #348]	; (8001100 <tft_init+0x2fc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2137      	movs	r1, #55	; 0x37
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc6b 	bl	8001882 <tft_send_data>
 8000fac:	4b54      	ldr	r3, [pc, #336]	; (8001100 <tft_init+0x2fc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	210a      	movs	r1, #10
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fc65 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x13); tft_send_data(tft, 0x04);
 8000fb8:	4b51      	ldr	r3, [pc, #324]	; (8001100 <tft_init+0x2fc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2113      	movs	r1, #19
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fc5f 	bl	8001882 <tft_send_data>
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <tft_init+0x2fc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fc59 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x11); tft_send_data(tft, 0x0d);
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <tft_init+0x2fc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2111      	movs	r1, #17
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fc53 	bl	8001882 <tft_send_data>
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <tft_init+0x2fc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	210d      	movs	r1, #13
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fc4d 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x00);
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <tft_init+0x2fc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fc47 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_NGAMMA);
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <tft_init+0x2fc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	21e1      	movs	r1, #225	; 0xe1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc18 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x32);
 8001000:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <tft_init+0x2fc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	210f      	movs	r1, #15
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fc3b 	bl	8001882 <tft_send_data>
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <tft_init+0x2fc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2132      	movs	r1, #50	; 0x32
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc35 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x2e); tft_send_data(tft, 0x0b);
 8001018:	4b39      	ldr	r3, [pc, #228]	; (8001100 <tft_init+0x2fc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	212e      	movs	r1, #46	; 0x2e
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fc2f 	bl	8001882 <tft_send_data>
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <tft_init+0x2fc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	210b      	movs	r1, #11
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fc29 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x0d); tft_send_data(tft, 0x05);
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <tft_init+0x2fc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	210d      	movs	r1, #13
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fc23 	bl	8001882 <tft_send_data>
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <tft_init+0x2fc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2105      	movs	r1, #5
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fc1d 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x47); tft_send_data(tft, 0x75);
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <tft_init+0x2fc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2147      	movs	r1, #71	; 0x47
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fc17 	bl	8001882 <tft_send_data>
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <tft_init+0x2fc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2175      	movs	r1, #117	; 0x75
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fc11 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x06);
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <tft_init+0x2fc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2137      	movs	r1, #55	; 0x37
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fc0b 	bl	8001882 <tft_send_data>
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <tft_init+0x2fc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2106      	movs	r1, #6
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fc05 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x10); tft_send_data(tft, 0x03);
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <tft_init+0x2fc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2110      	movs	r1, #16
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fbff 	bl	8001882 <tft_send_data>
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <tft_init+0x2fc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2103      	movs	r1, #3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fbf9 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x24); tft_send_data(tft, 0x20);
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <tft_init+0x2fc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2124      	movs	r1, #36	; 0x24
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbf3 	bl	8001882 <tft_send_data>
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <tft_init+0x2fc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2120      	movs	r1, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fbed 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x00);
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <tft_init+0x2fc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fbe7 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_GAMMA_CTRL1);
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <tft_init+0x2fc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	21e2      	movs	r1, #226	; 0xe2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fbb8 	bl	8001830 <tft_send_cmd>
	tft_send_data(tft, 0x0f); tft_send_data(tft, 0x32);
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <tft_init+0x2fc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	210f      	movs	r1, #15
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fbdb 	bl	8001882 <tft_send_data>
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <tft_init+0x2fc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2132      	movs	r1, #50	; 0x32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fbd5 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x2e); tft_send_data(tft, 0x0b);
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <tft_init+0x2fc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	212e      	movs	r1, #46	; 0x2e
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fbcf 	bl	8001882 <tft_send_data>
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <tft_init+0x2fc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	210b      	movs	r1, #11
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fbc9 	bl	8001882 <tft_send_data>
 80010f0:	e008      	b.n	8001104 <tft_init+0x300>
 80010f2:	bf00      	nop
 80010f4:	200000b8 	.word	0x200000b8
 80010f8:	200000bc 	.word	0x200000bc
 80010fc:	200000c0 	.word	0x200000c0
 8001100:	200000b4 	.word	0x200000b4
	tft_send_data(tft, 0x0d); tft_send_data(tft, 0x05);
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <tft_init+0x3ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	210d      	movs	r1, #13
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fbb9 	bl	8001882 <tft_send_data>
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <tft_init+0x3ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2105      	movs	r1, #5
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbb3 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x47); tft_send_data(tft, 0x75);
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <tft_init+0x3ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2147      	movs	r1, #71	; 0x47
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fbad 	bl	8001882 <tft_send_data>
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <tft_init+0x3ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2175      	movs	r1, #117	; 0x75
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fba7 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x37); tft_send_data(tft, 0x06);
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <tft_init+0x3ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2137      	movs	r1, #55	; 0x37
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fba1 	bl	8001882 <tft_send_data>
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <tft_init+0x3ac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2106      	movs	r1, #6
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fb9b 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x10); tft_send_data(tft, 0x03);
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <tft_init+0x3ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2110      	movs	r1, #16
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fb95 	bl	8001882 <tft_send_data>
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <tft_init+0x3ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2103      	movs	r1, #3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fb8f 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x24); tft_send_data(tft, 0x20);
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <tft_init+0x3ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2124      	movs	r1, #36	; 0x24
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fb89 	bl	8001882 <tft_send_data>
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <tft_init+0x3ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2120      	movs	r1, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fb83 	bl	8001882 <tft_send_data>
	tft_send_data(tft, 0x00);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <tft_init+0x3ac>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fb7d 	bl	8001882 <tft_send_data>

	tft_send_cmd(tft, TFTCMD_SLEEP_OUT);
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <tft_init+0x3ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2111      	movs	r1, #17
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fb4e 	bl	8001830 <tft_send_cmd>
	tft_send_cmd(tft, TFTCMD_DISPLAY_ON);
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <tft_init+0x3ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2129      	movs	r1, #41	; 0x29
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fb48 	bl	8001830 <tft_send_cmd>

	tft_delay(150);
 80011a0:	2096      	movs	r0, #150	; 0x96
 80011a2:	f000 fc63 	bl	8001a6c <HAL_Delay>

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000b4 	.word	0x200000b4

080011b4 <tft_set_rotation>:

void tft_set_rotation(uint8_t rotate) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	tft_send_cmd(tft, MEMCONTROL);
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <tft_set_rotation+0xa0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2136      	movs	r1, #54	; 0x36
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fb33 	bl	8001830 <tft_send_cmd>
	switch(rotate)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d832      	bhi.n	8001238 <tft_set_rotation+0x84>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <tft_set_rotation+0x24>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	080011fd 	.word	0x080011fd
 80011e0:	08001211 	.word	0x08001211
 80011e4:	08001225 	.word	0x08001225
	{
		case 1:
			rot_num = 1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <tft_set_rotation+0xa4>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <tft_set_rotation+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2188      	movs	r1, #136	; 0x88
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fb44 	bl	8001882 <tft_send_data>
					MADCTL_MY | MADCTL_BGR);
			break;
 80011fa:	e027      	b.n	800124c <tft_set_rotation+0x98>
		case 2:
			rot_num = 2;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <tft_set_rotation+0xa4>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <tft_set_rotation+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2128      	movs	r1, #40	; 0x28
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fb3a 	bl	8001882 <tft_send_data>
					MADCTL_MV | MADCTL_BGR);
			break;
 800120e:	e01d      	b.n	800124c <tft_set_rotation+0x98>
		case 3:
			rot_num = 3;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <tft_set_rotation+0xa4>)
 8001212:	2203      	movs	r2, #3
 8001214:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <tft_set_rotation+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2148      	movs	r1, #72	; 0x48
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fb30 	bl	8001882 <tft_send_data>
					MADCTL_MX | MADCTL_BGR);
			break;
 8001222:	e013      	b.n	800124c <tft_set_rotation+0x98>
		case 4:
			rot_num = 4;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <tft_set_rotation+0xa4>)
 8001226:	2204      	movs	r2, #4
 8001228:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <tft_set_rotation+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	21e8      	movs	r1, #232	; 0xe8
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fb26 	bl	8001882 <tft_send_data>
					MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
			break;
 8001236:	e009      	b.n	800124c <tft_set_rotation+0x98>
		default:
			rot_num = 1;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <tft_set_rotation+0xa4>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
			tft_send_data(tft,
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <tft_set_rotation+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2188      	movs	r1, #136	; 0x88
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fb1c 	bl	8001882 <tft_send_data>
					MADCTL_MY | MADCTL_BGR);
			break;
 800124a:	bf00      	nop
	}
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000b4 	.word	0x200000b4
 8001258:	20000004 	.word	0x20000004

0800125c <tft_cursor_position>:
void tft_cursor_position(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	4603      	mov	r3, r0
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]

  tft_send_cmd(tft, TFTCMD_COLUMN_ADDR);
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <tft_cursor_position+0xdc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	212a      	movs	r1, #42	; 0x2a
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fad5 	bl	8001830 <tft_send_cmd>
  tft_send_data(tft, x0 >> 8);
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <tft_cursor_position+0xdc>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	4610      	mov	r0, r2
 8001296:	f000 faf4 	bl	8001882 <tft_send_data>
  tft_send_data(tft, x0 & 0xff);
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <tft_cursor_position+0xdc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 faec 	bl	8001882 <tft_send_data>
  tft_send_data(tft, x1 >> 8);
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <tft_cursor_position+0xdc>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f000 fae2 	bl	8001882 <tft_send_data>
  tft_send_data(tft, x1 & 0xff);
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <tft_cursor_position+0xdc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fada 	bl	8001882 <tft_send_data>

  tft_send_cmd(tft, TFTCMD_PAGE_ADDR);
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <tft_cursor_position+0xdc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	212b      	movs	r1, #43	; 0x2b
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 faab 	bl	8001830 <tft_send_cmd>
  tft_send_data(tft, y0 >> 8);
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <tft_cursor_position+0xdc>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	4610      	mov	r0, r2
 80012ea:	f000 faca 	bl	8001882 <tft_send_data>
  tft_send_data(tft, y0 & 0xff);
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <tft_cursor_position+0xdc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fac2 	bl	8001882 <tft_send_data>
  tft_send_data(tft, y1 >> 8);
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <tft_cursor_position+0xdc>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f000 fab8 	bl	8001882 <tft_send_data>
  tft_send_data(tft, y1 & 0xff);
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <tft_cursor_position+0xdc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	883a      	ldrh	r2, [r7, #0]
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fab0 	bl	8001882 <tft_send_data>

  tft_send_cmd(tft, TFTCMD_GRAM);
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <tft_cursor_position+0xdc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	212c      	movs	r1, #44	; 0x2c
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa81 	bl	8001830 <tft_send_cmd>
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	bf00      	nop
 8001338:	200000b4 	.word	0x200000b4

0800133c <tft_fill_rectxy>:

void tft_fill_rectxy(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4623      	mov	r3, r4
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	803b      	strh	r3, [r7, #0]
	uint32_t n =  ((x1+1)-x0)*((y1+1)-y0);
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	1c51      	adds	r1, r2, #1
 8001366:	88ba      	ldrh	r2, [r7, #4]
 8001368:	1a8a      	subs	r2, r1, r2
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]

	if(n > tft_pixel_count)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <tft_fill_rectxy+0x8c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d902      	bls.n	8001380 <tft_fill_rectxy+0x44>
		n = tft_pixel_count;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <tft_fill_rectxy+0x8c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]

	tft_cursor_position(x0, y0, x1, y1);
 8001380:	883b      	ldrh	r3, [r7, #0]
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	88b9      	ldrh	r1, [r7, #4]
 8001386:	88f8      	ldrh	r0, [r7, #6]
 8001388:	f7ff ff68 	bl	800125c <tft_cursor_position>
	for(;n > 0; n--) {
 800138c:	e014      	b.n	80013b8 <tft_fill_rectxy+0x7c>
		tft_send_data(tft, color>>8);
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <tft_fill_rectxy+0x90>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	8c3b      	ldrh	r3, [r7, #32]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f000 fa70 	bl	8001882 <tft_send_data>
		tft_send_data(tft, color&0xff);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <tft_fill_rectxy+0x90>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	8c3a      	ldrh	r2, [r7, #32]
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fa68 	bl	8001882 <tft_send_data>
	for(;n > 0; n--) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1e7      	bne.n	800138e <tft_fill_rectxy+0x52>
	}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	200000c0 	.word	0x200000c0
 80013cc:	200000b4 	.word	0x200000b4

080013d0 <tft_fill_rect>:

void tft_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	tft_fill_rectxy(x, y, x+w, y+h, color);
 80013ee:	88f8      	ldrh	r0, [r7, #6]
 80013f0:	88b9      	ldrh	r1, [r7, #4]
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4413      	add	r3, r2
 80013f8:	b29c      	uxth	r4, r3
 80013fa:	88ba      	ldrh	r2, [r7, #4]
 80013fc:	883b      	ldrh	r3, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	8b3b      	ldrh	r3, [r7, #24]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	4622      	mov	r2, r4
 800140a:	f7ff ff97 	bl	800133c <tft_fill_rectxy>
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
	...

08001418 <tft_fill_screen>:

void tft_fill_screen(uint16_t color) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]

	if(rot_num == 1 || rot_num==3)
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <tft_fill_screen+0x80>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d003      	beq.n	8001432 <tft_fill_screen+0x1a>
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <tft_fill_screen+0x80>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d113      	bne.n	800145a <tft_fill_screen+0x42>
		tft_fill_rect(0, 0, tft_height-1, tft_width-1, color);
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <tft_fill_screen+0x84>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <tft_fill_screen+0x88>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	b219      	sxth	r1, r3
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	460b      	mov	r3, r1
 8001450:	2100      	movs	r1, #0
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff ffbc 	bl	80013d0 <tft_fill_rect>
	else if(rot_num==2 || rot_num==4)
		tft_fill_rect(0, 0, tft_width-1, tft_height-1, color);

}
 8001458:	e01a      	b.n	8001490 <tft_fill_screen+0x78>
	else if(rot_num==2 || rot_num==4)
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <tft_fill_screen+0x80>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d003      	beq.n	800146a <tft_fill_screen+0x52>
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <tft_fill_screen+0x80>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d112      	bne.n	8001490 <tft_fill_screen+0x78>
		tft_fill_rect(0, 0, tft_width-1, tft_height-1, color);
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <tft_fill_screen+0x88>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	3b01      	subs	r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <tft_fill_screen+0x84>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	b219      	sxth	r1, r3
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	460b      	mov	r3, r1
 8001488:	2100      	movs	r1, #0
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ffa0 	bl	80013d0 <tft_fill_rect>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000004 	.word	0x20000004
 800149c:	200000bc 	.word	0x200000bc
 80014a0:	200000b8 	.word	0x200000b8

080014a4 <tft_draw_vertical_line>:

void tft_draw_horizontal_line(uint16_t x, uint16_t y, uint16_t w, uint16_t color) {
	tft_fill_rect(x, y, w, 0, color);
}

void tft_draw_vertical_line(uint16_t x, uint16_t y, uint16_t w, uint16_t color) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]
	tft_fill_rect(x, y, 0, w, color);
 80014c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014ce:	883b      	ldrh	r3, [r7, #0]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	f7ff ff7b 	bl	80013d0 <tft_fill_rect>
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd90      	pop	{r4, r7, pc}

080014e2 <tft_fill_round_rect>:
    tft_draw_circle_helper(x+w-r-1, y+r    , r, 2, color);
    tft_draw_circle_helper(x+w-r-1, y+h-r-1, r, 4, color);
    tft_draw_circle_helper(x+r    , y+h-r-1, r, 8, color);
}

void tft_fill_round_rect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af02      	add	r7, sp, #8
 80014e8:	4604      	mov	r4, r0
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4623      	mov	r3, r4
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4603      	mov	r3, r0
 80014f6:	80bb      	strh	r3, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2;
 8001500:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001504:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001508:	4293      	cmp	r3, r2
 800150a:	bfa8      	it	ge
 800150c:	4613      	movge	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	0fda      	lsrs	r2, r3, #31
 8001512:	4413      	add	r3, r2
 8001514:	105b      	asrs	r3, r3, #1
 8001516:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius)
 8001518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800151c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001520:	429a      	cmp	r2, r3
 8001522:	dd01      	ble.n	8001528 <tft_fill_round_rect+0x46>
    	r = max_radius;
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	843b      	strh	r3, [r7, #32]

    tft_fill_rect(x+r, y, w-2*r, h, color);
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	8c3b      	ldrh	r3, [r7, #32]
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	b218      	sxth	r0, r3
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	8c3b      	ldrh	r3, [r7, #32]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	b29b      	uxth	r3, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001544:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4623      	mov	r3, r4
 800154e:	f7ff ff3f 	bl	80013d0 <tft_fill_rect>

    tft_fill_circle_helper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4413      	add	r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	8c3b      	ldrh	r3, [r7, #32]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	b218      	sxth	r0, r3
 8001566:	88ba      	ldrh	r2, [r7, #4]
 8001568:	8c3b      	ldrh	r3, [r7, #32]
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	b219      	sxth	r1, r3
 8001570:	883a      	ldrh	r2, [r7, #0]
 8001572:	8c3b      	ldrh	r3, [r7, #32]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001588:	9201      	str	r2, [sp, #4]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	4622      	mov	r2, r4
 8001590:	f000 f820 	bl	80015d4 <tft_fill_circle_helper>
    tft_fill_circle_helper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	8c3b      	ldrh	r3, [r7, #32]
 8001598:	4413      	add	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	b218      	sxth	r0, r3
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	8c3b      	ldrh	r3, [r7, #32]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b219      	sxth	r1, r3
 80015a8:	883a      	ldrh	r2, [r7, #0]
 80015aa:	8c3b      	ldrh	r3, [r7, #32]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80015be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2302      	movs	r3, #2
 80015c6:	4622      	mov	r2, r4
 80015c8:	f000 f804 	bl	80015d4 <tft_fill_circle_helper>
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <tft_fill_circle_helper>:
        	tft_draw_pixel(x0 - x, y0 - y, color);
        }
    }
}

void tft_fill_circle_helper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	4603      	mov	r3, r0
 80015e8:	80bb      	strh	r3, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	f1c3 0301 	rsb	r3, r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	461a      	mov	r2, r3
 8001604:	03d2      	lsls	r2, r2, #15
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8001616:	8a3b      	ldrh	r3, [r7, #16]
 8001618:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	817b      	strh	r3, [r7, #10]

    delta++;
 800161e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001622:	b29b      	uxth	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 800162a:	e089      	b.n	8001740 <tft_fill_circle_helper+0x16c>
        if (f >= 0) {
 800162c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0e      	blt.n	8001652 <tft_fill_circle_helper+0x7e>
            y--;
 8001634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001638:	b29b      	uxth	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001640:	8a7b      	ldrh	r3, [r7, #18]
 8001642:	3302      	adds	r3, #2
 8001644:	b29b      	uxth	r3, r3
 8001646:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8001648:	8afa      	ldrh	r2, [r7, #22]
 800164a:	8a7b      	ldrh	r3, [r7, #18]
 800164c:	4413      	add	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001652:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800165e:	8abb      	ldrh	r3, [r7, #20]
 8001660:	3302      	adds	r3, #2
 8001662:	b29b      	uxth	r3, r3
 8001664:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8001666:	8afa      	ldrh	r2, [r7, #22]
 8001668:	8abb      	ldrh	r3, [r7, #20]
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	82fb      	strh	r3, [r7, #22]

        if(x < (y + 1)) {
 8001670:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001674:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	db2b      	blt.n	80016d4 <tft_fill_circle_helper+0x100>
            if(corners & 1) tft_draw_vertical_line(x0+x, y0-y, 2*y+delta, color);
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <tft_fill_circle_helper+0xd4>
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	8a3b      	ldrh	r3, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	b298      	uxth	r0, r3
 800168e:	88ba      	ldrh	r2, [r7, #4]
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b299      	uxth	r1, r3
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800169e:	4413      	add	r3, r2
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016a4:	f7ff fefe 	bl	80014a4 <tft_draw_vertical_line>
            if(corners & 2) tft_draw_vertical_line(x0-x, y0-y, 2*y+delta, color);
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d010      	beq.n	80016d4 <tft_fill_circle_helper+0x100>
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	8a3b      	ldrh	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b298      	uxth	r0, r3
 80016ba:	88ba      	ldrh	r2, [r7, #4]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b299      	uxth	r1, r3
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ca:	4413      	add	r3, r2
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016d0:	f7ff fee8 	bl	80014a4 <tft_draw_vertical_line>
        }
        if(y != py) {
 80016d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d02d      	beq.n	800173c <tft_fill_circle_helper+0x168>
            if(corners & 1) tft_draw_vertical_line(x0+py, y0-px, 2*px+delta, color);
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d010      	beq.n	800170c <tft_fill_circle_helper+0x138>
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	4413      	add	r3, r2
 80016f0:	b298      	uxth	r0, r3
 80016f2:	88ba      	ldrh	r2, [r7, #4]
 80016f4:	89bb      	ldrh	r3, [r7, #12]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b299      	uxth	r1, r3
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001702:	4413      	add	r3, r2
 8001704:	b29a      	uxth	r2, r3
 8001706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001708:	f7ff fecc 	bl	80014a4 <tft_draw_vertical_line>
            if(corners & 2) tft_draw_vertical_line(x0-py, y0-px, 2*px+delta, color);
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d010      	beq.n	8001738 <tft_fill_circle_helper+0x164>
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b298      	uxth	r0, r3
 800171e:	88ba      	ldrh	r2, [r7, #4]
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b299      	uxth	r1, r3
 8001726:	89bb      	ldrh	r3, [r7, #12]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800172e:	4413      	add	r3, r2
 8001730:	b29a      	uxth	r2, r3
 8001732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001734:	f7ff feb6 	bl	80014a4 <tft_draw_vertical_line>
            py = y;
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800173c:	8a3b      	ldrh	r3, [r7, #16]
 800173e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8001740:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001748:	429a      	cmp	r2, r3
 800174a:	f6ff af6f 	blt.w	800162c <tft_fill_circle_helper+0x58>
    }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}

08001758 <test_fill_round_rects>:
        red += step;
        tft_draw_round_rect(cx - i2, cy - i2, i1, i1, i1 / 8, color565(red, 0, 0));
    }
}

void test_fill_round_rects() {
 8001758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800175c:	b089      	sub	sp, #36	; 0x24
 800175e:	af02      	add	r7, sp, #8
    int i1, i2, green, step,
        cx = tft_width/2,
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <test_fill_round_rects+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
        cy = tft_height/2;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <test_fill_round_rects+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]

    tft_fill_screen(COLOR_WHITE);
 8001770:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001774:	f7ff fe50 	bl	8001418 <tft_fill_screen>

    green = 256;
 8001778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(tft_width, tft_height);
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <test_fill_round_rects+0xd4>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <test_fill_round_rects+0xd0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4293      	cmp	r3, r2
 8001788:	bf28      	it	cs
 800178a:	4613      	movcs	r3, r2
 800178c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	607b      	str	r3, [r7, #4]
    for (i1 = min(tft_width, tft_height); i1 > 20; i1 -= 6) {
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <test_fill_round_rects+0xd4>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <test_fill_round_rects+0xd0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4293      	cmp	r3, r2
 80017a0:	bf28      	it	cs
 80017a2:	4613      	movcs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e035      	b.n	8001814 <test_fill_round_rects+0xbc>
        i2 = i1 / 2;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	0fda      	lsrs	r2, r3, #31
 80017ac:	4413      	add	r3, r2
 80017ae:	105b      	asrs	r3, r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
        green -= step;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	613b      	str	r3, [r7, #16]
        tft_fill_round_rect(cx-i2, cy-i2, i1, i1, i1/8, color565(0, green, 0));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b21d      	sxth	r5, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21e      	sxth	r6, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa0f f883 	sxth.w	r8, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa0f f983 	sxth.w	r9, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <test_fill_round_rects+0x92>
 80017e8:	3307      	adds	r3, #7
 80017ea:	10db      	asrs	r3, r3, #3
 80017ec:	b21c      	sxth	r4, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fade 	bl	8000db8 <color565>
 80017fc:	4603      	mov	r3, r0
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	9400      	str	r4, [sp, #0]
 8001802:	464b      	mov	r3, r9
 8001804:	4642      	mov	r2, r8
 8001806:	4631      	mov	r1, r6
 8001808:	4628      	mov	r0, r5
 800180a:	f7ff fe6a 	bl	80014e2 <tft_fill_round_rect>
    for (i1 = min(tft_width, tft_height); i1 > 20; i1 -= 6) {
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3b06      	subs	r3, #6
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b14      	cmp	r3, #20
 8001818:	dcc6      	bgt.n	80017a8 <test_fill_round_rects+0x50>
    }

}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001826:	bf00      	nop
 8001828:	200000b8 	.word	0x200000b8
 800182c:	200000bc 	.word	0x200000bc

08001830 <tft_send_cmd>:
 *      Author: alvenan
 */

#include "tft_spi.h"

void tft_send_cmd(TFT *tft, uint8_t cmd) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	tft_dc_cmd(tft); tft_cs_on(tft);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8a5b      	ldrh	r3, [r3, #18]
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	f000 fbe2 	bl	8002010 <HAL_GPIO_WritePin>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6858      	ldr	r0, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8a1b      	ldrh	r3, [r3, #16]
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	f000 fbda 	bl	8002010 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, cmd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	1cf9      	adds	r1, r7, #3
 8001862:	2305      	movs	r3, #5
 8001864:	2201      	movs	r2, #1
 8001866:	f003 fd6a 	bl	800533e <HAL_SPI_Transmit>
	tft_cs_off(tft);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6858      	ldr	r0, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8a1b      	ldrh	r3, [r3, #16]
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f000 fbcb 	bl	8002010 <HAL_GPIO_WritePin>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <tft_send_data>:

void tft_send_data(TFT *tft, uint8_t data) {
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
	tft_dc_data(tft); tft_cs_on(tft);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6898      	ldr	r0, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8a5b      	ldrh	r3, [r3, #18]
 8001896:	2201      	movs	r2, #1
 8001898:	4619      	mov	r1, r3
 800189a:	f000 fbb9 	bl	8002010 <HAL_GPIO_WritePin>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6858      	ldr	r0, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a1b      	ldrh	r3, [r3, #16]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f000 fbb1 	bl	8002010 <HAL_GPIO_WritePin>
	tft_spi_transmit(tft, data);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	1cf9      	adds	r1, r7, #3
 80018b4:	2305      	movs	r3, #5
 80018b6:	2201      	movs	r2, #1
 80018b8:	f003 fd41 	bl	800533e <HAL_SPI_Transmit>
	tft_cs_off(tft);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6858      	ldr	r0, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8a1b      	ldrh	r3, [r3, #16]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	f000 fba2 	bl	8002010 <HAL_GPIO_WritePin>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <tft_interface_init>:

TFT* tft_interface_init(SPI_HandleTypeDef *spi,
		GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	80fb      	strh	r3, [r7, #6]

	TFT *tft = (TFT*) malloc(sizeof(TFT));
 80018e4:	2018      	movs	r0, #24
 80018e6:	f007 f90f 	bl	8008b08 <malloc>
 80018ea:	4603      	mov	r3, r0
 80018ec:	617b      	str	r3, [r7, #20]

	tft->spi_handler = spi;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]
	tft->cs_port = cs_port;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	605a      	str	r2, [r3, #4]
	tft->cs_pin = cs_pin;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	821a      	strh	r2, [r3, #16]
	tft->dc_port = dc_port;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	609a      	str	r2, [r3, #8]
	tft->dc_pin = dc_pin;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	8c3a      	ldrh	r2, [r7, #32]
 800190a:	825a      	strh	r2, [r3, #18]
	tft->rst_port = rst_port;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001910:	60da      	str	r2, [r3, #12]
	tft->rst_pin = rst_pin;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001916:	829a      	strh	r2, [r3, #20]

	tft_cs_off(tft);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	6858      	ldr	r0, [r3, #4]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	8a1b      	ldrh	r3, [r3, #16]
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	f000 fb74 	bl	8002010 <HAL_GPIO_WritePin>

	return tft;
 8001928:	697b      	ldr	r3, [r7, #20]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800195e:	f7ff fa19 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f007 f8ad 	bl	8008ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7fe fdab 	bl	80004c0 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001978:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 800197c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001980:	2000090c 	.word	0x2000090c

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f94f 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff f812 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f967 	bl	8001cbe <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a08:	f000 f92f 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	2000000c 	.word	0x2000000c
 8001a28:	20000008 	.word	0x20000008

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c
 8001a50:	2000021c 	.word	0x2000021c

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000021c 	.word	0x2000021c

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e16b      	b.n	8001fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 815a 	bne.w	8001fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80b4 	beq.w	8001fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a5f      	ldr	r2, [pc, #380]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a5b      	ldr	r2, [pc, #364]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x314>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x318>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x31c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x216>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x212>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x20a>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e00e      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f42:	4a32      	ldr	r2, [pc, #200]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_GPIO_Init+0x334>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae90 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002044:	b08f      	sub	sp, #60	; 0x3c
 8002046:	af0a      	add	r7, sp, #40	; 0x28
 8002048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e054      	b.n	80020fe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f006 fa76 	bl	8008560 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2203      	movs	r2, #3
 8002078:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fbcc 	bl	8005830 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	687e      	ldr	r6, [r7, #4]
 80020a0:	466d      	mov	r5, sp
 80020a2:	f106 0410 	add.w	r4, r6, #16
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b6:	1d33      	adds	r3, r6, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	f003 fb46 	bl	800574c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fbc3 	bl	8005852 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	687e      	ldr	r6, [r7, #4]
 80020d4:	466d      	mov	r5, sp
 80020d6:	f106 0410 	add.w	r4, r6, #16
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ea:	1d33      	adds	r3, r6, #4
 80020ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	f003 fd2a 	bl	8005b48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002106 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b089      	sub	sp, #36	; 0x24
 800210a:	af04      	add	r7, sp, #16
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	4608      	mov	r0, r1
 8002110:	4611      	mov	r1, r2
 8002112:	461a      	mov	r2, r3
 8002114:	4603      	mov	r3, r0
 8002116:	70fb      	strb	r3, [r7, #3]
 8002118:	460b      	mov	r3, r1
 800211a:	70bb      	strb	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_HCD_HC_Init+0x28>
 800212a:	2302      	movs	r3, #2
 800212c:	e076      	b.n	800221c <HAL_HCD_HC_Init+0x116>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	333d      	adds	r3, #61	; 0x3d
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3338      	adds	r3, #56	; 0x38
 8002156:	787a      	ldrb	r2, [r7, #1]
 8002158:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800216a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3339      	adds	r3, #57	; 0x39
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	333f      	adds	r3, #63	; 0x3f
 800218c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	78ba      	ldrb	r2, [r7, #2]
 8002196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219a:	b2d0      	uxtb	r0, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	333a      	adds	r3, #58	; 0x3a
 80021a8:	4602      	mov	r2, r0
 80021aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da09      	bge.n	80021c8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	333b      	adds	r3, #59	; 0x3b
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e008      	b.n	80021da <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	333b      	adds	r3, #59	; 0x3b
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	333c      	adds	r3, #60	; 0x3c
 80021e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021ec:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	787c      	ldrb	r4, [r7, #1]
 80021f4:	78ba      	ldrb	r2, [r7, #2]
 80021f6:	78f9      	ldrb	r1, [r7, #3]
 80021f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4623      	mov	r3, r4
 800220a:	f003 fe17 	bl	8005e3c <USB_HC_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_HCD_HC_Halt+0x1e>
 800223e:	2302      	movs	r3, #2
 8002240:	e00f      	b.n	8002262 <HAL_HCD_HC_Halt+0x3e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f004 f853 	bl	80062fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	70fb      	strb	r3, [r7, #3]
 800227e:	460b      	mov	r3, r1
 8002280:	70bb      	strb	r3, [r7, #2]
 8002282:	4613      	mov	r3, r2
 8002284:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	333b      	adds	r3, #59	; 0x3b
 8002294:	78ba      	ldrb	r2, [r7, #2]
 8002296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	333f      	adds	r3, #63	; 0x3f
 80022a6:	787a      	ldrb	r2, [r7, #1]
 80022a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022aa:	7c3b      	ldrb	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d112      	bne.n	80022d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3342      	adds	r3, #66	; 0x42
 80022be:	2203      	movs	r2, #3
 80022c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	333d      	adds	r3, #61	; 0x3d
 80022d0:	7f3a      	ldrb	r2, [r7, #28]
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e008      	b.n	80022e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3342      	adds	r3, #66	; 0x42
 80022e4:	2202      	movs	r2, #2
 80022e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022e8:	787b      	ldrb	r3, [r7, #1]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	f200 80c6 	bhi.w	800247c <HAL_HCD_HC_SubmitRequest+0x210>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	08002309 	.word	0x08002309
 80022fc:	08002469 	.word	0x08002469
 8002300:	0800236d 	.word	0x0800236d
 8002304:	080023eb 	.word	0x080023eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002308:	7c3b      	ldrb	r3, [r7, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 80b8 	bne.w	8002480 <HAL_HCD_HC_SubmitRequest+0x214>
 8002310:	78bb      	ldrb	r3, [r7, #2]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 80b4 	bne.w	8002480 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002318:	8b3b      	ldrh	r3, [r7, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3355      	adds	r3, #85	; 0x55
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3355      	adds	r3, #85	; 0x55
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3342      	adds	r3, #66	; 0x42
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002356:	e093      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3342      	adds	r3, #66	; 0x42
 8002366:	2202      	movs	r2, #2
 8002368:	701a      	strb	r2, [r3, #0]
      break;
 800236a:	e089      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3355      	adds	r3, #85	; 0x55
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3342      	adds	r3, #66	; 0x42
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002398:	e073      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3342      	adds	r3, #66	; 0x42
 80023a8:	2202      	movs	r2, #2
 80023aa:	701a      	strb	r2, [r3, #0]
      break;
 80023ac:	e069      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3354      	adds	r3, #84	; 0x54
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3342      	adds	r3, #66	; 0x42
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
      break;
 80023d4:	e055      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3342      	adds	r3, #66	; 0x42
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      break;
 80023e8:	e04b      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11d      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3355      	adds	r3, #85	; 0x55
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3342      	adds	r3, #66	; 0x42
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002416:	e034      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]
      break;
 800242a:	e02a      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3354      	adds	r3, #84	; 0x54
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3342      	adds	r3, #66	; 0x42
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
      break;
 8002452:	e016      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3342      	adds	r3, #66	; 0x42
 8002462:	2202      	movs	r2, #2
 8002464:	701a      	strb	r2, [r3, #0]
      break;
 8002466:	e00c      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	3342      	adds	r3, #66	; 0x42
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e002      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002480:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3344      	adds	r3, #68	; 0x44
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	8b3a      	ldrh	r2, [r7, #24]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	202c      	movs	r0, #44	; 0x2c
 800249c:	fb00 f303 	mul.w	r3, r0, r3
 80024a0:	440b      	add	r3, r1
 80024a2:	334c      	adds	r3, #76	; 0x4c
 80024a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3350      	adds	r3, #80	; 0x50
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3339      	adds	r3, #57	; 0x39
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3361      	adds	r3, #97	; 0x61
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	222c      	movs	r2, #44	; 0x2c
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	3338      	adds	r3, #56	; 0x38
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	18d1      	adds	r1, r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	f003 fda6 	bl	8006058 <USB_HC_StartXfer>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop

08002518 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fac9 	bl	8005ac6 <USB_GetMode>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 80f6 	bne.w	8002728 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 faad 	bl	8005aa0 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80ec 	beq.w	8002726 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 faa4 	bl	8005aa0 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002562:	d104      	bne.n	800256e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800256c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fa94 	bl	8005aa0 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002582:	d104      	bne.n	800258e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800258c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fa84 	bl	8005aa0 <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800259e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a2:	d104      	bne.n	80025ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fa74 	bl	8005aa0 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fa66 	bl	8005aa0 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025de:	d11c      	bne.n	800261a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025fa:	2110      	movs	r1, #16
 80025fc:	6938      	ldr	r0, [r7, #16]
 80025fe:	f003 f975 	bl	80058ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002602:	6938      	ldr	r0, [r7, #16]
 8002604:	f003 f996 	bl	8005934 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fb4e 	bl	8005cb0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f006 f821 	bl	800865c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fa3e 	bl	8005aa0 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262e:	d102      	bne.n	8002636 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f001 fa03 	bl	8003a3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fa30 	bl	8005aa0 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d106      	bne.n	8002658 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f005 ffea 	bl	8008624 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2208      	movs	r2, #8
 8002656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fa1f 	bl	8005aa0 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b10      	cmp	r3, #16
 800266a:	d101      	bne.n	8002670 <HAL_HCD_IRQHandler+0x158>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_HCD_IRQHandler+0x15a>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0210 	bic.w	r2, r2, #16
 8002684:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 f906 	bl	8003898 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 f9fd 	bl	8005aa0 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026b0:	d13a      	bne.n	8002728 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fe10 	bl	80062dc <USB_HC_ReadInterrupt>
 80026bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e025      	b.n	8002710 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d018      	beq.n	800270a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d106      	bne.n	80026fe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8ab 	bl	8002852 <HCD_HC_IN_IRQHandler>
 80026fc:	e005      	b.n	800270a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fcc6 	bl	8003096 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	429a      	cmp	r2, r3
 8002718:	d3d4      	bcc.n	80026c4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	e000      	b.n	8002728 <HAL_HCD_IRQHandler+0x210>
      return;
 8002726:	bf00      	nop
    }
  }
}
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_HCD_Start+0x16>
 8002740:	2302      	movs	r3, #2
 8002742:	e013      	b.n	800276c <HAL_HCD_Start+0x3e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fb10 	bl	8005d78 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f003 f856 	bl	800580e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_HCD_Stop+0x16>
 8002786:	2302      	movs	r3, #2
 8002788:	e00d      	b.n	80027a6 <HAL_HCD_Stop+0x32>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f003 ff0a 	bl	80065b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fab2 	bl	8005d24 <USB_ResetPort>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3360      	adds	r3, #96	; 0x60
 80027e4:	781b      	ldrb	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3350      	adds	r3, #80	; 0x50
 800280c:	681b      	ldr	r3, [r3, #0]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 faf6 	bl	8005e18 <USB_GetCurrentFrame>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fad1 	bl	8005dea <USB_GetHostSpeed>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b04      	cmp	r3, #4
 8002880:	d119      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	461a      	mov	r2, r3
 8002890:	2304      	movs	r3, #4
 8002892:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	60d3      	str	r3, [r2, #12]
 80028b4:	e101      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028cc:	d12b      	bne.n	8002926 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2207      	movs	r2, #7
 80028f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fced 	bl	80062fe <USB_HC_Halt>
 8002924:	e0c9      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d109      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2320      	movs	r3, #32
 800294c:	6093      	str	r3, [r2, #8]
 800294e:	e0b4      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d133      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	0151      	lsls	r1, r2, #5
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	440a      	add	r2, r1
 800297c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3361      	adds	r3, #97	; 0x61
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2310      	movs	r3, #16
 80029a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2308      	movs	r3, #8
 80029ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fc99 	bl	80062fe <USB_HC_Halt>
 80029cc:	e075      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e4:	d134      	bne.n	8002a50 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3361      	adds	r3, #97	; 0x61
 8002a14:	2208      	movs	r2, #8
 8002a16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2310      	movs	r3, #16
 8002a28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fc58 	bl	80062fe <USB_HC_Halt>
 8002a4e:	e034      	b.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d129      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	0151      	lsls	r1, r2, #5
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2206      	movs	r2, #6
 8002a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 fc2b 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad0:	d122      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	0151      	lsls	r1, r2, #5
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	440a      	add	r2, r1
 8002ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fbfe 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b14:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b16:	e2ba      	b.n	800308e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 811b 	bne.w	8002d66 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d019      	beq.n	8002b6c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3348      	adds	r3, #72	; 0x48
 8002b46:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	202c      	movs	r0, #44	; 0x2c
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	440b      	add	r3, r1
 8002b68:	3350      	adds	r3, #80	; 0x50
 8002b6a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3361      	adds	r3, #97	; 0x61
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	335c      	adds	r3, #92	; 0x5c
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333f      	adds	r3, #63	; 0x3f
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	333f      	adds	r3, #63	; 0x3f
 8002bc4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d121      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	0151      	lsls	r1, r2, #5
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	440a      	add	r2, r1
 8002be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fb82 	bl	80062fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	461a      	mov	r2, r3
 8002c08:	2310      	movs	r3, #16
 8002c0a:	6093      	str	r3, [r2, #8]
 8002c0c:	e066      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333f      	adds	r3, #63	; 0x3f
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d127      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c40:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	b2d9      	uxtb	r1, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	202c      	movs	r0, #44	; 0x2c
 8002c5e:	fb00 f303 	mul.w	r3, r0, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f005 fd04 	bl	8008678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c70:	e034      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	333f      	adds	r3, #63	; 0x3f
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d12a      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3354      	adds	r3, #84	; 0x54
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2d8      	uxtb	r0, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3354      	adds	r3, #84	; 0x54
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f005 fcce 	bl	8008678 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d12b      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3348      	adds	r3, #72	; 0x48
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	202c      	movs	r0, #44	; 0x2c
 8002cfa:	fb00 f202 	mul.w	r2, r0, r2
 8002cfe:	440a      	add	r2, r1
 8002d00:	3240      	adds	r2, #64	; 0x40
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 81be 	beq.w	800308e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3354      	adds	r3, #84	; 0x54
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3354      	adds	r3, #84	; 0x54
 8002d36:	4602      	mov	r2, r0
 8002d38:	701a      	strb	r2, [r3, #0]
}
 8002d3a:	e1a8      	b.n	800308e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3354      	adds	r3, #84	; 0x54
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2d8      	uxtb	r0, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3354      	adds	r3, #84	; 0x54
 8002d60:	4602      	mov	r2, r0
 8002d62:	701a      	strb	r2, [r3, #0]
}
 8002d64:	e193      	b.n	800308e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 8106 	bne.w	8002f8a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d98:	f023 0302 	bic.w	r3, r3, #2
 8002d9c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3361      	adds	r3, #97	; 0x61
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d109      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3360      	adds	r3, #96	; 0x60
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e0c9      	b.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3361      	adds	r3, #97	; 0x61
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d109      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3360      	adds	r3, #96	; 0x60
 8002de8:	2205      	movs	r2, #5
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e0b5      	b.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3361      	adds	r3, #97	; 0x61
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d009      	beq.n	8002e16 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3361      	adds	r3, #97	; 0x61
 8002e10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d150      	bne.n	8002eb8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	202c      	movs	r0, #44	; 0x2c
 8002e2e:	fb00 f303 	mul.w	r3, r0, r3
 8002e32:	440b      	add	r3, r1
 8002e34:	335c      	adds	r3, #92	; 0x5c
 8002e36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	335c      	adds	r3, #92	; 0x5c
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d912      	bls.n	8002e72 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	335c      	adds	r3, #92	; 0x5c
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3360      	adds	r3, #96	; 0x60
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e70:	e073      	b.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3360      	adds	r3, #96	; 0x60
 8002e80:	2202      	movs	r2, #2
 8002e82:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e9a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eb6:	e050      	b.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3361      	adds	r3, #97	; 0x61
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d122      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ef4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002efc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e023      	b.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3361      	adds	r3, #97	; 0x61
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	d119      	bne.n	8002f5a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	202c      	movs	r0, #44	; 0x2c
 8002f3e:	fb00 f303 	mul.w	r3, r0, r3
 8002f42:	440b      	add	r3, r1
 8002f44:	335c      	adds	r3, #92	; 0x5c
 8002f46:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3360      	adds	r3, #96	; 0x60
 8002f56:	2204      	movs	r2, #4
 8002f58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2302      	movs	r3, #2
 8002f6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	202c      	movs	r0, #44	; 0x2c
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f005 fb78 	bl	8008678 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f88:	e081      	b.n	800308e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d176      	bne.n	800308e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d121      	bne.n	8002ff8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	335c      	adds	r3, #92	; 0x5c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 f984 	bl	80062fe <USB_HC_Halt>
 8002ff6:	e041      	b.n	800307c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	333f      	adds	r3, #63	; 0x3f
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	333f      	adds	r3, #63	; 0x3f
 800301a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800301c:	2b02      	cmp	r3, #2
 800301e:	d12d      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	335c      	adds	r3, #92	; 0x5c
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d120      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3361      	adds	r3, #97	; 0x61
 8003048:	2203      	movs	r2, #3
 800304a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	0151      	lsls	r1, r2, #5
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	440a      	add	r2, r1
 8003062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 f941 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2310      	movs	r3, #16
 800308c:	6093      	str	r3, [r2, #8]
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b088      	sub	sp, #32
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d119      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	461a      	mov	r2, r3
 80030d4:	2304      	movs	r3, #4
 80030d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80030f8:	e3ca      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d13e      	bne.n	800318e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	2320      	movs	r3, #32
 8003120:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	333d      	adds	r3, #61	; 0x3d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 83ac 	bne.w	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	333d      	adds	r3, #61	; 0x3d
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3360      	adds	r3, #96	; 0x60
 8003158:	2202      	movs	r2, #2
 800315a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	0151      	lsls	r1, r2, #5
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	440a      	add	r2, r1
 8003172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f003 f8b9 	bl	80062fe <USB_HC_Halt>
}
 800318c:	e380      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d122      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	0151      	lsls	r1, r2, #5
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	440a      	add	r2, r1
 80031bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f894 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	461a      	mov	r2, r3
 80031e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e8:	6093      	str	r3, [r2, #8]
}
 80031ea:	e351      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d150      	bne.n	80032a4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	335c      	adds	r3, #92	; 0x5c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d111      	bne.n	800324e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	333d      	adds	r3, #61	; 0x3d
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2340      	movs	r3, #64	; 0x40
 800324c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	0151      	lsls	r1, r2, #5
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	440a      	add	r2, r1
 8003264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f003 f840 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	2301      	movs	r3, #1
 800328e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
}
 80032a2:	e2f5      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d13c      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3361      	adds	r3, #97	; 0x61
 80032c8:	2204      	movs	r2, #4
 80032ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	333d      	adds	r3, #61	; 0x3d
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	0151      	lsls	r1, r2, #5
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	440a      	add	r2, r1
 8003306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 ffef 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	2340      	movs	r3, #64	; 0x40
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e2ad      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d12a      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2308      	movs	r3, #8
 800335a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	440a      	add	r2, r1
 8003372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f002 ffb9 	bl	80062fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3361      	adds	r3, #97	; 0x61
 800339a:	2205      	movs	r2, #5
 800339c:	701a      	strb	r2, [r3, #0]
}
 800339e:	e277      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d150      	bne.n	8003458 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3361      	adds	r3, #97	; 0x61
 80033d6:	2203      	movs	r2, #3
 80033d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	333d      	adds	r3, #61	; 0x3d
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f002 ff5d 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	6093      	str	r3, [r2, #8]
}
 8003456:	e21b      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b80      	cmp	r3, #128	; 0x80
 800346c:	d174      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d121      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3361      	adds	r3, #97	; 0x61
 8003484:	2206      	movs	r2, #6
 8003486:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	440a      	add	r2, r1
 800349e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 ff23 	bl	80062fe <USB_HC_Halt>
 80034b8:	e044      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	202c      	movs	r0, #44	; 0x2c
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	440b      	add	r3, r1
 80034d8:	335c      	adds	r3, #92	; 0x5c
 80034da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	335c      	adds	r3, #92	; 0x5c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d920      	bls.n	8003532 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	335c      	adds	r3, #92	; 0x5c
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	2204      	movs	r2, #4
 8003512:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	b2d9      	uxtb	r1, r3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	202c      	movs	r0, #44	; 0x2c
 800351e:	fb00 f303 	mul.w	r3, r0, r3
 8003522:	4413      	add	r3, r2
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f005 f8a4 	bl	8008678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003530:	e008      	b.n	8003544 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3360      	adds	r3, #96	; 0x60
 8003540:	2202      	movs	r2, #2
 8003542:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	461a      	mov	r2, r3
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	6093      	str	r3, [r2, #8]
}
 8003556:	e19b      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356e:	d134      	bne.n	80035da <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	440a      	add	r2, r1
 8003586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f002 feaf 	bl	80062fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	2310      	movs	r3, #16
 80035b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	212c      	movs	r1, #44	; 0x2c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	3361      	adds	r3, #97	; 0x61
 80035d4:	2208      	movs	r2, #8
 80035d6:	701a      	strb	r2, [r3, #0]
}
 80035d8:	e15a      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f040 814f 	bne.w	8003890 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	440a      	add	r2, r1
 8003608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800360c:	f023 0302 	bic.w	r3, r3, #2
 8003610:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3361      	adds	r3, #97	; 0x61
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d17d      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	3360      	adds	r3, #96	; 0x60
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	333f      	adds	r3, #63	; 0x3f
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d00a      	beq.n	8003662 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	333f      	adds	r3, #63	; 0x3f
 800365a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800365c:	2b03      	cmp	r3, #3
 800365e:	f040 8100 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3355      	adds	r3, #85	; 0x55
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	f083 0301 	eor.w	r3, r3, #1
 800367e:	b2d8      	uxtb	r0, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3355      	adds	r3, #85	; 0x55
 800368e:	4602      	mov	r2, r0
 8003690:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	f040 80e3 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	334c      	adds	r3, #76	; 0x4c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80d8 	beq.w	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	334c      	adds	r3, #76	; 0x4c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	202c      	movs	r0, #44	; 0x2c
 80036c8:	fb00 f202 	mul.w	r2, r0, r2
 80036cc:	440a      	add	r2, r1
 80036ce:	3240      	adds	r2, #64	; 0x40
 80036d0:	8812      	ldrh	r2, [r2, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	3b01      	subs	r3, #1
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	202c      	movs	r0, #44	; 0x2c
 80036dc:	fb00 f202 	mul.w	r2, r0, r2
 80036e0:	440a      	add	r2, r1
 80036e2:	3240      	adds	r2, #64	; 0x40
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80b5 	beq.w	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3355      	adds	r3, #85	; 0x55
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2d8      	uxtb	r0, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3355      	adds	r3, #85	; 0x55
 800371c:	4602      	mov	r2, r0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e09f      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3361      	adds	r3, #97	; 0x61
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d109      	bne.n	800374a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3360      	adds	r3, #96	; 0x60
 8003744:	2202      	movs	r2, #2
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e08b      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3361      	adds	r3, #97	; 0x61
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d109      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e077      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3361      	adds	r3, #97	; 0x61
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d109      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	3360      	adds	r3, #96	; 0x60
 8003794:	2205      	movs	r2, #5
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e063      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3361      	adds	r3, #97	; 0x61
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d009      	beq.n	80037c2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3361      	adds	r3, #97	; 0x61
 80037bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d14f      	bne.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	202c      	movs	r0, #44	; 0x2c
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	440b      	add	r3, r1
 80037e0:	335c      	adds	r3, #92	; 0x5c
 80037e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	335c      	adds	r3, #92	; 0x5c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d912      	bls.n	800381e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	335c      	adds	r3, #92	; 0x5c
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3360      	adds	r3, #96	; 0x60
 8003818:	2204      	movs	r2, #4
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e021      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3360      	adds	r3, #96	; 0x60
 800382c:	2202      	movs	r2, #2
 800382e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003846:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800384e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386e:	461a      	mov	r2, r3
 8003870:	2302      	movs	r3, #2
 8003872:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	b2d9      	uxtb	r1, r3
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	202c      	movs	r0, #44	; 0x2c
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	4413      	add	r3, r2
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f004 fef4 	bl	8008678 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003890:	bf00      	nop
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	0c5b      	lsrs	r3, r3, #17
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d004      	beq.n	80038de <HCD_RXQLVL_IRQHandler+0x46>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	f000 80a9 	beq.w	8003a2e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038dc:	e0aa      	b.n	8003a34 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a6 	beq.w	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3344      	adds	r3, #68	; 0x44
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 809b 	beq.w	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3350      	adds	r3, #80	; 0x50
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	441a      	add	r2, r3
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	202c      	movs	r0, #44	; 0x2c
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	440b      	add	r3, r1
 800391c:	334c      	adds	r3, #76	; 0x4c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d87a      	bhi.n	8003a1a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3344      	adds	r3, #68	; 0x44
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	b292      	uxth	r2, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f002 f857 	bl	80059f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3344      	adds	r3, #68	; 0x44
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	441a      	add	r2, r3
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	202c      	movs	r0, #44	; 0x2c
 800395c:	fb00 f303 	mul.w	r3, r0, r3
 8003960:	440b      	add	r3, r1
 8003962:	3344      	adds	r3, #68	; 0x44
 8003964:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3350      	adds	r3, #80	; 0x50
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	441a      	add	r2, r3
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	202c      	movs	r0, #44	; 0x2c
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	440b      	add	r3, r1
 8003986:	3350      	adds	r3, #80	; 0x50
 8003988:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	0cdb      	lsrs	r3, r3, #19
 800399a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3340      	adds	r3, #64	; 0x40
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d13c      	bne.n	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d039      	beq.n	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3354      	adds	r3, #84	; 0x54
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f083 0301 	eor.w	r3, r3, #1
 8003a04:	b2d8      	uxtb	r0, r3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3354      	adds	r3, #84	; 0x54
 8003a14:	4602      	mov	r2, r0
 8003a16:	701a      	strb	r2, [r3, #0]
      break;
 8003a18:	e00b      	b.n	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3360      	adds	r3, #96	; 0x60
 8003a28:	2204      	movs	r2, #4
 8003a2a:	701a      	strb	r2, [r3, #0]
      break;
 8003a2c:	e001      	b.n	8003a32 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a32:	bf00      	nop
  }
}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d10b      	bne.n	8003a8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f004 fdde 	bl	8008640 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d132      	bne.n	8003afc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f043 0308 	orr.w	r3, r3, #8
 8003a9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d126      	bne.n	8003af6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d113      	bne.n	8003ad8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aba:	d106      	bne.n	8003aca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 f8f4 	bl	8005cb0 <USB_InitFSLSPClkSel>
 8003ac8:	e011      	b.n	8003aee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f002 f8ed 	bl	8005cb0 <USB_InitFSLSPClkSel>
 8003ad6:	e00a      	b.n	8003aee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003aec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f004 fdd0 	bl	8008694 <HAL_HCD_PortEnabled_Callback>
 8003af4:	e002      	b.n	8003afc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f004 fdda 	bl	80086b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d103      	bne.n	8003b0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6013      	str	r3, [r2, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e12b      	b.n	8003d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fc ff72 	bl	8000a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b88:	f001 f9fc 	bl	8004f84 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a81      	ldr	r2, [pc, #516]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d807      	bhi.n	8003ba8 <HAL_I2C_Init+0x84>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a80      	ldr	r2, [pc, #512]	; (8003d9c <HAL_I2C_Init+0x278>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bf94      	ite	ls
 8003ba0:	2301      	movls	r3, #1
 8003ba2:	2300      	movhi	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e006      	b.n	8003bb6 <HAL_I2C_Init+0x92>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a7d      	ldr	r2, [pc, #500]	; (8003da0 <HAL_I2C_Init+0x27c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bf94      	ite	ls
 8003bb0:	2301      	movls	r3, #1
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0e7      	b.n	8003d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a78      	ldr	r2, [pc, #480]	; (8003da4 <HAL_I2C_Init+0x280>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0c9b      	lsrs	r3, r3, #18
 8003bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a6a      	ldr	r2, [pc, #424]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d802      	bhi.n	8003bf8 <HAL_I2C_Init+0xd4>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	e009      	b.n	8003c0c <HAL_I2C_Init+0xe8>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <HAL_I2C_Init+0x284>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	495c      	ldr	r1, [pc, #368]	; (8003d98 <HAL_I2C_Init+0x274>)
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	d819      	bhi.n	8003c60 <HAL_I2C_Init+0x13c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1e59      	subs	r1, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3a:	1c59      	adds	r1, r3, #1
 8003c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c40:	400b      	ands	r3, r1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_I2C_Init+0x138>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e59      	subs	r1, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5a:	e051      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	e04f      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d111      	bne.n	8003c8c <HAL_I2C_Init+0x168>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e012      	b.n	8003cb2 <HAL_I2C_Init+0x18e>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	0099      	lsls	r1, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x196>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e022      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_I2C_Init+0x1bc>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e58      	subs	r0, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	440b      	add	r3, r1
 8003cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	e00f      	b.n	8003d00 <HAL_I2C_Init+0x1dc>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6809      	ldr	r1, [r1, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6911      	ldr	r1, [r2, #16]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	000186a0 	.word	0x000186a0
 8003d9c:	001e847f 	.word	0x001e847f
 8003da0:	003d08ff 	.word	0x003d08ff
 8003da4:	431bde83 	.word	0x431bde83
 8003da8:	10624dd3 	.word	0x10624dd3

08003dac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e128      	b.n	8004010 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a90      	ldr	r2, [pc, #576]	; (8004018 <HAL_I2S_Init+0x26c>)
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fc fe73 	bl	8000ac4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003df4:	f023 030f 	bic.w	r3, r3, #15
 8003df8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d060      	beq.n	8003ecc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e12:	2310      	movs	r3, #16
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e001      	b.n	8003e1c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e18:	2320      	movs	r3, #32
 8003e1a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d802      	bhi.n	8003e2a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f001 f9a0 	bl	8005170 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e30:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3a:	d125      	bne.n	8003e88 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	3305      	adds	r3, #5
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e01f      	b.n	8003ea6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	3305      	adds	r3, #5
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e00e      	b.n	8003ea6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	3305      	adds	r3, #5
 8003ea4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4a5c      	ldr	r2, [pc, #368]	; (800401c <HAL_I2S_Init+0x270>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e003      	b.n	8003ed4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d902      	bls.n	8003ee0 <HAL_I2S_Init+0x134>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	d907      	bls.n	8003ef0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	f043 0210 	orr.w	r2, r3, #16
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e08f      	b.n	8004010 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	ea42 0103 	orr.w	r1, r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f0e:	f023 030f 	bic.w	r3, r3, #15
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6851      	ldr	r1, [r2, #4]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6892      	ldr	r2, [r2, #8]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68d2      	ldr	r2, [r2, #12]
 8003f20:	4311      	orrs	r1, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6992      	ldr	r2, [r2, #24]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d161      	bne.n	8004000 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_I2S_Init+0x274>)
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a37      	ldr	r2, [pc, #220]	; (8004024 <HAL_I2S_Init+0x278>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2S_Init+0x1a4>
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_I2S_Init+0x27c>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x1a8>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	4932      	ldr	r1, [pc, #200]	; (8004024 <HAL_I2S_Init+0x278>)
 8003f5c:	428a      	cmp	r2, r1
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2S_Init+0x1b8>
 8003f60:	4a31      	ldr	r2, [pc, #196]	; (8004028 <HAL_I2S_Init+0x27c>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x1bc>
 8003f64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f6c:	f023 030f 	bic.w	r3, r3, #15
 8003f70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2b      	ldr	r2, [pc, #172]	; (8004024 <HAL_I2S_Init+0x278>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2S_Init+0x1d4>
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <HAL_I2S_Init+0x27c>)
 8003f7e:	e001      	b.n	8003f84 <HAL_I2S_Init+0x1d8>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	2202      	movs	r2, #2
 8003f86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <HAL_I2S_Init+0x278>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2S_Init+0x1ea>
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_I2S_Init+0x27c>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2S_Init+0x1ee>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa6:	d003      	beq.n	8003fb0 <HAL_I2S_Init+0x204>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	e001      	b.n	8003fbc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fe8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <HAL_I2S_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2S_Init+0x24c>
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_I2S_Init+0x27c>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2S_Init+0x250>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	897a      	ldrh	r2, [r7, #10]
 8003ffe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	08004123 	.word	0x08004123
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	08004239 	.word	0x08004239
 8004024:	40003800 	.word	0x40003800
 8004028:	40003400 	.word	0x40003400

0800402c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c9a      	adds	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10e      	bne.n	80040bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffb8 	bl	800402c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	b292      	uxth	r2, r2
 80040d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	1c9a      	adds	r2, r3, #2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800410a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff93 	bl	8004040 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b04      	cmp	r3, #4
 800413c:	d13a      	bne.n	80041b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d109      	bne.n	800415c <I2S_IRQHandler+0x3a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d102      	bne.n	800415c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ffb4 	bl	80040c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d126      	bne.n	80041b4 <I2S_IRQHandler+0x92>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b20      	cmp	r3, #32
 8004172:	d11f      	bne.n	80041b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004182:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff50 	bl	8004054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d136      	bne.n	800422e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d109      	bne.n	80041de <I2S_IRQHandler+0xbc>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b80      	cmp	r3, #128	; 0x80
 80041d6:	d102      	bne.n	80041de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff45 	bl	8004068 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d122      	bne.n	800422e <I2S_IRQHandler+0x10c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d11b      	bne.n	800422e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004204:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff13 	bl	8004054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4aa2      	ldr	r2, [pc, #648]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004252:	4ba2      	ldr	r3, [pc, #648]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004254:	e001      	b.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a9b      	ldr	r2, [pc, #620]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004270:	4b9a      	ldr	r3, [pc, #616]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004272:	e001      	b.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	d004      	beq.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8099 	bne.w	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f925 	bl	80044f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9c8 	bl	8004654 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d13a      	bne.n	8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d035      	beq.n	8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7e      	ldr	r2, [pc, #504]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042e2:	4b7e      	ldr	r3, [pc, #504]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4979      	ldr	r1, [pc, #484]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f2:	428b      	cmp	r3, r1
 80042f4:	d101      	bne.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042f6:	4b79      	ldr	r3, [pc, #484]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042f8:	e001      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004302:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004312:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe88 	bl	8004054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	f040 80be 	bne.w	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80b8 	beq.w	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800436a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a59      	ldr	r2, [pc, #356]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004376:	4b59      	ldr	r3, [pc, #356]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004378:	e001      	b.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800437a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4954      	ldr	r1, [pc, #336]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004386:	428b      	cmp	r3, r1
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800438a:	4b54      	ldr	r3, [pc, #336]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004392:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004396:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fe4a 	bl	8004054 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043c0:	e084      	b.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d107      	bne.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8be 	bl	8004558 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f8fd 	bl	80045f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d12f      	bne.n	8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02a      	beq.n	8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004418:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d101      	bne.n	8004428 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004424:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004426:	e001      	b.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4929      	ldr	r1, [pc, #164]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004434:	428b      	cmp	r3, r1
 8004436:	d101      	bne.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004438:	4b28      	ldr	r3, [pc, #160]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800443a:	e001      	b.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800443c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004440:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004444:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fdfa 	bl	8004054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d131      	bne.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d02c      	beq.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004480:	e001      	b.n	8004486 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4912      	ldr	r1, [pc, #72]	; (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800448e:	428b      	cmp	r3, r1
 8004490:	d101      	bne.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004494:	e001      	b.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800449a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800449e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ae:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fdc5 	bl	8004054 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ca:	e000      	b.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044cc:	bf00      	nop
}
 80044ce:	bf00      	nop
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40003800 	.word	0x40003800
 80044dc:	40003400 	.word	0x40003400

080044e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c99      	adds	r1, r3, #2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6251      	str	r1, [r2, #36]	; 0x24
 8004506:	881a      	ldrh	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d113      	bne.n	800454e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004534:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff ffc9 	bl	80044e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	1c99      	adds	r1, r3, #2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6251      	str	r1, [r2, #36]	; 0x24
 800456a:	8819      	ldrh	r1, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <I2SEx_TxISR_I2SExt+0x22>
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <I2SEx_TxISR_I2SExt+0x94>)
 8004578:	e001      	b.n	800457e <I2SEx_TxISR_I2SExt+0x26>
 800457a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800457e:	460a      	mov	r2, r1
 8004580:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d121      	bne.n	80045de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a12      	ldr	r2, [pc, #72]	; (80045e8 <I2SEx_TxISR_I2SExt+0x90>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <I2SEx_TxISR_I2SExt+0x50>
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <I2SEx_TxISR_I2SExt+0x94>)
 80045a6:	e001      	b.n	80045ac <I2SEx_TxISR_I2SExt+0x54>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	490d      	ldr	r1, [pc, #52]	; (80045e8 <I2SEx_TxISR_I2SExt+0x90>)
 80045b4:	428b      	cmp	r3, r1
 80045b6:	d101      	bne.n	80045bc <I2SEx_TxISR_I2SExt+0x64>
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <I2SEx_TxISR_I2SExt+0x94>)
 80045ba:	e001      	b.n	80045c0 <I2SEx_TxISR_I2SExt+0x68>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff81 	bl	80044e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40003800 	.word	0x40003800
 80045ec:	40003400 	.word	0x40003400

080045f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68d8      	ldr	r0, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	1c99      	adds	r1, r3, #2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004608:	b282      	uxth	r2, r0
 800460a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004632:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ff4a 	bl	80044e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <I2SEx_RxISR_I2SExt+0x16>
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004668:	e001      	b.n	800466e <I2SEx_RxISR_I2SExt+0x1a>
 800466a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800466e:	68d8      	ldr	r0, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	1c99      	adds	r1, r3, #2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	62d1      	str	r1, [r2, #44]	; 0x2c
 800467a:	b282      	uxth	r2, r0
 800467c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d121      	bne.n	80046da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <I2SEx_RxISR_I2SExt+0x90>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <I2SEx_RxISR_I2SExt+0x50>
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <I2SEx_RxISR_I2SExt+0x94>)
 80046a2:	e001      	b.n	80046a8 <I2SEx_RxISR_I2SExt+0x54>
 80046a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	490d      	ldr	r1, [pc, #52]	; (80046e4 <I2SEx_RxISR_I2SExt+0x90>)
 80046b0:	428b      	cmp	r3, r1
 80046b2:	d101      	bne.n	80046b8 <I2SEx_RxISR_I2SExt+0x64>
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <I2SEx_RxISR_I2SExt+0x94>)
 80046b6:	e001      	b.n	80046bc <I2SEx_RxISR_I2SExt+0x68>
 80046b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff03 	bl	80044e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40003800 	.word	0x40003800
 80046e8:	40003400 	.word	0x40003400

080046ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e264      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d075      	beq.n	80047f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470a:	4ba3      	ldr	r3, [pc, #652]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00c      	beq.n	8004730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004716:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471e:	2b08      	cmp	r3, #8
 8004720:	d112      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004722:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472e:	d10b      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	4b99      	ldr	r3, [pc, #612]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d05b      	beq.n	80047f4 <HAL_RCC_OscConfig+0x108>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d157      	bne.n	80047f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e23f      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x74>
 8004752:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a90      	ldr	r2, [pc, #576]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e01d      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0x98>
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a8a      	ldr	r2, [pc, #552]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a87      	ldr	r2, [pc, #540]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004784:	4b84      	ldr	r3, [pc, #528]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a83      	ldr	r2, [pc, #524]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd f956 	bl	8001a54 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd f952 	bl	8001a54 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e204      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0xc0>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd f942 	bl	8001a54 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fd f93e 	bl	8001a54 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1f0      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0xe8>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004802:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1c4      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b56      	ldr	r3, [pc, #344]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4952      	ldr	r1, [pc, #328]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b4f      	ldr	r3, [pc, #316]	; (800499c <HAL_RCC_OscConfig+0x2b0>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd f8f7 	bl	8001a54 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd f8f3 	bl	8001a54 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1a5      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4940      	ldr	r1, [pc, #256]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_RCC_OscConfig+0x2b0>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd f8d6 	bl	8001a54 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fd f8d2 	bl	8001a54 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e184      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d030      	beq.n	8004938 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <HAL_RCC_OscConfig+0x2b4>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd f8b6 	bl	8001a54 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fd f8b2 	bl	8001a54 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e164      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x200>
 800490a:	e015      	b.n	8004938 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_OscConfig+0x2b4>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fd f89f 	bl	8001a54 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491a:	f7fd f89b 	bl	8001a54 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e14d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a0 	beq.w	8004a86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCC_OscConfig+0x2b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d121      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_RCC_OscConfig+0x2b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <HAL_RCC_OscConfig+0x2b8>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd f861 	bl	8001a54 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	e011      	b.n	80049ba <HAL_RCC_OscConfig+0x2ce>
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800
 800499c:	42470000 	.word	0x42470000
 80049a0:	42470e80 	.word	0x42470e80
 80049a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a8:	f7fd f854 	bl	8001a54 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e106      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ba:	4b85      	ldr	r3, [pc, #532]	; (8004bd0 <HAL_RCC_OscConfig+0x4e4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d106      	bne.n	80049dc <HAL_RCC_OscConfig+0x2f0>
 80049ce:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	4a80      	ldr	r2, [pc, #512]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6713      	str	r3, [r2, #112]	; 0x70
 80049da:	e01c      	b.n	8004a16 <HAL_RCC_OscConfig+0x32a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d10c      	bne.n	80049fe <HAL_RCC_OscConfig+0x312>
 80049e4:	4b7b      	ldr	r3, [pc, #492]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a7a      	ldr	r2, [pc, #488]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
 80049f0:	4b78      	ldr	r3, [pc, #480]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a77      	ldr	r2, [pc, #476]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
 80049fc:	e00b      	b.n	8004a16 <HAL_RCC_OscConfig+0x32a>
 80049fe:	4b75      	ldr	r3, [pc, #468]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a74      	ldr	r2, [pc, #464]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a71      	ldr	r2, [pc, #452]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d015      	beq.n	8004a4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd f819 	bl	8001a54 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd f815 	bl	8001a54 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0c5      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ee      	beq.n	8004a26 <HAL_RCC_OscConfig+0x33a>
 8004a48:	e014      	b.n	8004a74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd f803 	bl	8001a54 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fc ffff 	bl	8001a54 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0af      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a55      	ldr	r2, [pc, #340]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 809b 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d05c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d141      	bne.n	8004b28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <HAL_RCC_OscConfig+0x4ec>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fc ffd3 	bl	8001a54 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fc ffcf 	bl	8001a54 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e081      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	019b      	lsls	r3, r3, #6
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	4937      	ldr	r1, [pc, #220]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afa:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_RCC_OscConfig+0x4ec>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fc ffa8 	bl	8001a54 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fc ffa4 	bl	8001a54 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e056      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x41c>
 8004b26:	e04e      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <HAL_RCC_OscConfig+0x4ec>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fc ff91 	bl	8001a54 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fc ff8d 	bl	8001a54 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e03f      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x44a>
 8004b54:	e037      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e032      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <HAL_RCC_OscConfig+0x4e8>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d028      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d11a      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b92:	4013      	ands	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d111      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40007000 	.word	0x40007000
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	42470060 	.word	0x42470060

08004bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0cc      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d90c      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d044      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e067      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4934      	ldr	r1, [pc, #208]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ccc:	f7fc fec2 	bl	8001a54 <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd4:	f7fc febe 	bl	8001a54 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e04f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 020c 	and.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1eb      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d20c      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fe22 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023c00 	.word	0x40023c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	08008ce4 	.word	0x08008ce4
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000008 	.word	0x20000008

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	2300      	movs	r3, #0
 8004dba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc0:	4b67      	ldr	r3, [pc, #412]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	f200 80bd 	bhi.w	8004f4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x34>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dda:	e0b7      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dde:	60bb      	str	r3, [r7, #8]
       break;
 8004de0:	e0b7      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de2:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004de4:	60bb      	str	r3, [r7, #8]
      break;
 8004de6:	e0b4      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de8:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04d      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b58      	ldr	r3, [pc, #352]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	461a      	mov	r2, r3
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	ea02 0800 	and.w	r8, r2, r0
 8004e16:	ea03 0901 	and.w	r9, r3, r1
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	014b      	lsls	r3, r1, #5
 8004e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e2c:	0142      	lsls	r2, r0, #5
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	ebb0 0008 	subs.w	r0, r0, r8
 8004e36:	eb61 0109 	sbc.w	r1, r1, r9
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	018b      	lsls	r3, r1, #6
 8004e44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e48:	0182      	lsls	r2, r0, #6
 8004e4a:	1a12      	subs	r2, r2, r0
 8004e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	00d9      	lsls	r1, r3, #3
 8004e5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e5e:	00d0      	lsls	r0, r2, #3
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	eb12 0208 	adds.w	r2, r2, r8
 8004e68:	eb43 0309 	adc.w	r3, r3, r9
 8004e6c:	f04f 0000 	mov.w	r0, #0
 8004e70:	f04f 0100 	mov.w	r1, #0
 8004e74:	0259      	lsls	r1, r3, #9
 8004e76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e7a:	0250      	lsls	r0, r2, #9
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	f7fb f99c 	bl	80001c8 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e04a      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	ea02 0400 	and.w	r4, r2, r0
 8004eb2:	ea03 0501 	and.w	r5, r3, r1
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	014b      	lsls	r3, r1, #5
 8004ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ec8:	0142      	lsls	r2, r0, #5
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	1b00      	subs	r0, r0, r4
 8004ed0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	018b      	lsls	r3, r1, #6
 8004ede:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ee2:	0182      	lsls	r2, r0, #6
 8004ee4:	1a12      	subs	r2, r2, r0
 8004ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	00d9      	lsls	r1, r3, #3
 8004ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ef8:	00d0      	lsls	r0, r2, #3
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	1912      	adds	r2, r2, r4
 8004f00:	eb45 0303 	adc.w	r3, r5, r3
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	0299      	lsls	r1, r3, #10
 8004f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f12:	0290      	lsls	r0, r2, #10
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f7fb f950 	bl	80001c8 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	60bb      	str	r3, [r7, #8]
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f4e:	60bb      	str	r3, [r7, #8]
      break;
 8004f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f52:	68bb      	ldr	r3, [r7, #8]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00f42400 	.word	0x00f42400
 8004f68:	007a1200 	.word	0x007a1200

08004f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000000 	.word	0x20000000

08004f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f88:	f7ff fff0 	bl	8004f6c <HAL_RCC_GetHCLKFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	0a9b      	lsrs	r3, r3, #10
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4903      	ldr	r1, [pc, #12]	; (8004fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	08008cf4 	.word	0x08008cf4

08004fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d035      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd4:	4b62      	ldr	r3, [pc, #392]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fda:	f7fc fd3b 	bl	8001a54 <HAL_GetTick>
 8004fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fe2:	f7fc fd37 	bl	8001a54 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0b0      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff4:	4b5b      	ldr	r3, [pc, #364]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	019a      	lsls	r2, r3, #6
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	071b      	lsls	r3, r3, #28
 800500c:	4955      	ldr	r1, [pc, #340]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005014:	4b52      	ldr	r3, [pc, #328]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800501a:	f7fc fd1b 	bl	8001a54 <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005022:	f7fc fd17 	bl	8001a54 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e090      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8083 	beq.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b44      	ldr	r3, [pc, #272]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a43      	ldr	r2, [pc, #268]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b41      	ldr	r3, [pc, #260]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a3e      	ldr	r2, [pc, #248]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005076:	f7fc fced 	bl	8001a54 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800507e:	f7fc fce9 	bl	8001a54 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e062      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509c:	4b31      	ldr	r3, [pc, #196]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02f      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d028      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050d0:	4a24      	ldr	r2, [pc, #144]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050d6:	4b23      	ldr	r3, [pc, #140]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d114      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fc fcb7 	bl	8001a54 <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fc fcb3 	bl	8001a54 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e02a      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ee      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005118:	d10d      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	490d      	ldr	r1, [pc, #52]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005140:	6093      	str	r3, [r2, #8]
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514e:	4905      	ldr	r1, [pc, #20]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	4313      	orrs	r3, r2
 8005152:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	42470068 	.word	0x42470068
 8005164:	40023800 	.word	0x40023800
 8005168:	40007000 	.word	0x40007000
 800516c:	42470e40 	.word	0x42470e40

08005170 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d13e      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d12f      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051a6:	617b      	str	r3, [r7, #20]
          break;
 80051a8:	e02f      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b6:	d108      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051b8:	4b18      	ldr	r3, [pc, #96]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e007      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	099b      	lsrs	r3, r3, #6
 80051e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f4:	0f1b      	lsrs	r3, r3, #28
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
          break;
 8005202:	e002      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
          break;
 8005208:	bf00      	nop
        }
      }
      break;
 800520a:	bf00      	nop
    }
  }
  return frequency;
 800520c:	697b      	ldr	r3, [r7, #20]
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	00bb8000 	.word	0x00bb8000
 8005224:	007a1200 	.word	0x007a1200
 8005228:	00f42400 	.word	0x00f42400

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07b      	b.n	8005336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fca0 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0104 	and.w	r1, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0210 	and.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_SPI_Transmit+0x22>
 800535c:	2302      	movs	r3, #2
 800535e:	e126      	b.n	80055ae <HAL_SPI_Transmit+0x270>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005368:	f7fc fb74 	bl	8001a54 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005382:	e10b      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0x52>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005394:	e102      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d10f      	bne.n	80053fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d14b      	bne.n	80054be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0xf6>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d13e      	bne.n	80054b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005458:	e02b      	b.n	80054b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	86da      	strh	r2, [r3, #54]	; 0x36
 800548c:	e011      	b.n	80054b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fc fae1 	bl	8001a54 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x168>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x16e>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b0:	e074      	b.n	800559c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ce      	bne.n	800545a <HAL_SPI_Transmit+0x11c>
 80054bc:	e04c      	b.n	8005558 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0x18e>
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d140      	bne.n	800554e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054f2:	e02c      	b.n	800554e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d113      	bne.n	800552a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	; 0x36
 8005528:	e011      	b.n	800554e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800552a:	f7fc fa93 	bl	8001a54 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d803      	bhi.n	8005542 <HAL_SPI_Transmit+0x204>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005540:	d102      	bne.n	8005548 <HAL_SPI_Transmit+0x20a>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800554c:	e026      	b.n	800559c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1cd      	bne.n	80054f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8b3 	bl	80056c8 <SPI_EndRxTxTransaction>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e000      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

error:
 800559a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055c8:	f7fc fa44 	bl	8001a54 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055d8:	f7fc fa3c 	bl	8001a54 <HAL_GetTick>
 80055dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055de:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	015b      	lsls	r3, r3, #5
 80055e4:	0d1b      	lsrs	r3, r3, #20
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ee:	e054      	b.n	800569a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f6:	d050      	beq.n	800569a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055f8:	f7fc fa2c 	bl	8001a54 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	429a      	cmp	r2, r3
 8005606:	d902      	bls.n	800560e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d13d      	bne.n	800568a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800561c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005626:	d111      	bne.n	800564c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005630:	d004      	beq.n	800563c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d107      	bne.n	800564c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d10f      	bne.n	8005676 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e017      	b.n	80056ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3b01      	subs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d19b      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000

080056c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <SPI_EndRxTxTransaction+0x7c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <SPI_EndRxTxTransaction+0x80>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	0d5b      	lsrs	r3, r3, #21
 80056e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f2:	d112      	bne.n	800571a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff ff5a 	bl	80055b8 <SPI_WaitFlagStateUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f043 0220 	orr.w	r2, r3, #32
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e00f      	b.n	800573a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3b01      	subs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d0f2      	beq.n	800571a <SPI_EndRxTxTransaction+0x52>
 8005734:	e000      	b.n	8005738 <SPI_EndRxTxTransaction+0x70>
        break;
 8005736:	bf00      	nop
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000000 	.word	0x20000000
 8005748:	165e9f81 	.word	0x165e9f81

0800574c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800574c:	b084      	sub	sp, #16
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	f107 001c 	add.w	r0, r7, #28
 800575a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	d122      	bne.n	80057aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800578c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9a0 	bl	8005ae4 <USB_CoreReset>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	e01a      	b.n	80057e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f994 	bl	8005ae4 <USB_CoreReset>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
 80057d2:	e005      	b.n	80057e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10b      	bne.n	80057fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f043 0206 	orr.w	r2, r3, #6
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f043 0220 	orr.w	r2, r3, #32
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800580a:	b004      	add	sp, #16
 800580c:	4770      	bx	lr

0800580e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f043 0201 	orr.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 0201 	bic.w	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d115      	bne.n	80058a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005880:	2001      	movs	r0, #1
 8005882:	f7fc f8f3 	bl	8001a6c <HAL_Delay>
      ms++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f91a 	bl	8005ac6 <USB_GetMode>
 8005892:	4603      	mov	r3, r0
 8005894:	2b01      	cmp	r3, #1
 8005896:	d01e      	beq.n	80058d6 <USB_SetCurrentMode+0x84>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b31      	cmp	r3, #49	; 0x31
 800589c:	d9f0      	bls.n	8005880 <USB_SetCurrentMode+0x2e>
 800589e:	e01a      	b.n	80058d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d115      	bne.n	80058d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b2:	2001      	movs	r0, #1
 80058b4:	f7fc f8da 	bl	8001a6c <HAL_Delay>
      ms++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f901 	bl	8005ac6 <USB_GetMode>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <USB_SetCurrentMode+0x84>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b31      	cmp	r3, #49	; 0x31
 80058ce:	d9f0      	bls.n	80058b2 <USB_SetCurrentMode+0x60>
 80058d0:	e001      	b.n	80058d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e005      	b.n	80058e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b32      	cmp	r3, #50	; 0x32
 80058da:	d101      	bne.n	80058e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	4a08      	ldr	r2, [pc, #32]	; (8005930 <USB_FlushTxFifo+0x44>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e006      	b.n	8005924 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b20      	cmp	r3, #32
 8005920:	d0f1      	beq.n	8005906 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	00030d40 	.word	0x00030d40

08005934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2210      	movs	r2, #16
 8005944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <USB_FlushRxFifo+0x3c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d0f1      	beq.n	8005946 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	4613      	mov	r3, r2
 8005988:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d123      	bne.n	80059e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	3303      	adds	r3, #3
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e018      	b.n	80059da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	031a      	lsls	r2, r3, #12
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b4:	461a      	mov	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3e2      	bcc.n	80059a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3724      	adds	r7, #36	; 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e014      	b.n	8005a46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	3301      	adds	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	3301      	adds	r3, #1
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	3301      	adds	r3, #1
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3e6      	bcc.n	8005a1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01e      	beq.n	8005a92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	701a      	strb	r2, [r3, #0]
      i++;
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	3301      	adds	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a86:	8bfb      	ldrh	r3, [r7, #30]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ea      	bne.n	8005a68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	372c      	adds	r7, #44	; 0x2c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <USB_CoreReset+0x60>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e01a      	b.n	8005b36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	daf3      	bge.n	8005af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f043 0201 	orr.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <USB_CoreReset+0x60>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e006      	b.n	8005b36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d0f1      	beq.n	8005b18 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	00030d40 	.word	0x00030d40

08005b48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b48:	b084      	sub	sp, #16
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	f107 001c 	add.w	r0, r7, #28
 8005b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d018      	beq.n	8005bcc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10a      	bne.n	8005bb6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e014      	b.n	8005be0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e009      	b.n	8005be0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bda:	f023 0304 	bic.w	r3, r3, #4
 8005bde:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005be0:	2110      	movs	r1, #16
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fe82 	bl	80058ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff fea3 	bl	8005934 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e015      	b.n	8005c20 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	461a      	mov	r2, r3
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3e5      	bcc.n	8005bf4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c34:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <USB_HostInit+0x154>)
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <USB_HostInit+0x158>)
 8005c54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c58:	e009      	b.n	8005c6e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <USB_HostInit+0x15c>)
 8005c64:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <USB_HostInit+0x160>)
 8005c6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f043 0210 	orr.w	r2, r3, #16
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	4b09      	ldr	r3, [pc, #36]	; (8005cac <USB_HostInit+0x164>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c98:	b004      	add	sp, #16
 8005c9a:	4770      	bx	lr
 8005c9c:	01000200 	.word	0x01000200
 8005ca0:	00e00300 	.word	0x00e00300
 8005ca4:	00600080 	.word	0x00600080
 8005ca8:	004000e0 	.word	0x004000e0
 8005cac:	a3200008 	.word	0xa3200008

08005cb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005cfe:	6053      	str	r3, [r2, #4]
 8005d00:	e009      	b.n	8005d16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d106      	bne.n	8005d16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d52:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d54:	2064      	movs	r0, #100	; 0x64
 8005d56:	f7fb fe89 	bl	8001a6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d66:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d68:	200a      	movs	r0, #10
 8005d6a:	f7fb fe7f 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <USB_DriveVbus+0x44>
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d106      	bne.n	8005dbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc6:	d109      	bne.n	8005ddc <USB_DriveVbus+0x64>
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	0c5b      	lsrs	r3, r3, #17
 8005e08:	f003 0303 	and.w	r3, r3, #3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	b29b      	uxth	r3, r3
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	70fb      	strb	r3, [r7, #3]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70bb      	strb	r3, [r7, #2]
 8005e52:	4613      	mov	r3, r2
 8005e54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d87e      	bhi.n	8005f78 <USB_HC_Init+0x13c>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <USB_HC_Init+0x44>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005f3b 	.word	0x08005f3b
 8005e88:	08005e91 	.word	0x08005e91
 8005e8c:	08005efd 	.word	0x08005efd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ea2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da10      	bge.n	8005ece <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ecc:	e057      	b.n	8005f7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d051      	beq.n	8005f7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ef8:	60d3      	str	r3, [r2, #12]
      break;
 8005efa:	e040      	b.n	8005f7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	da34      	bge.n	8005f82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f38:	e023      	b.n	8005f82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	461a      	mov	r2, r3
 8005f48:	f240 2325 	movw	r3, #549	; 0x225
 8005f4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da17      	bge.n	8005f86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f76:	e006      	b.n	8005f86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005f7c:	e004      	b.n	8005f88 <USB_HC_Init+0x14c>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <USB_HC_Init+0x14c>
      break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <USB_HC_Init+0x14c>
      break;
 8005f86:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	6939      	ldr	r1, [r7, #16]
 8005f9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	da03      	bge.n	8005fc2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	e001      	b.n	8005fc6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff0f 	bl	8005dea <USB_GetHostSpeed>
 8005fcc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d106      	bne.n	8005fe4 <USB_HC_Init+0x1a8>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d003      	beq.n	8005fe4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e001      	b.n	8005fe8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fe8:	787b      	ldrb	r3, [r7, #1]
 8005fea:	059b      	lsls	r3, r3, #22
 8005fec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ff0:	78bb      	ldrb	r3, [r7, #2]
 8005ff2:	02db      	lsls	r3, r3, #11
 8005ff4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ff8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ffa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ffe:	049b      	lsls	r3, r3, #18
 8006000:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006004:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006006:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006008:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800600c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	0159      	lsls	r1, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	440b      	add	r3, r1
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006024:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006026:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800602a:	2b03      	cmp	r3, #3
 800602c:	d10f      	bne.n	800604e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800604c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800604e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006074:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d02d      	beq.n	80060de <USB_HC_StartXfer+0x86>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	791b      	ldrb	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d129      	bne.n	80060de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d117      	bne.n	80060c0 <USB_HC_StartXfer+0x68>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	79db      	ldrb	r3, [r3, #7]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <USB_HC_StartXfer+0x48>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	79db      	ldrb	r3, [r3, #7]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d10f      	bne.n	80060c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <USB_HC_StartXfer+0x86>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	795b      	ldrb	r3, [r3, #5]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fa2f 	bl	8006538 <USB_DoPing>
      return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e0f8      	b.n	80062d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	8912      	ldrh	r2, [r2, #8]
 80060ee:	4413      	add	r3, r2
 80060f0:	3b01      	subs	r3, #1
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	8912      	ldrh	r2, [r2, #8]
 80060f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80060fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060fe:	8b7b      	ldrh	r3, [r7, #26]
 8006100:	429a      	cmp	r2, r3
 8006102:	d90b      	bls.n	800611c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006104:	8b7b      	ldrh	r3, [r7, #26]
 8006106:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006108:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	8912      	ldrh	r2, [r2, #8]
 800610e:	fb02 f203 	mul.w	r2, r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	611a      	str	r2, [r3, #16]
 8006116:	e001      	b.n	800611c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006118:	2301      	movs	r3, #1
 800611a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78db      	ldrb	r3, [r3, #3]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	8912      	ldrh	r2, [r2, #8]
 800612a:	fb02 f203 	mul.w	r2, r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	611a      	str	r2, [r3, #16]
 8006132:	e003      	b.n	800613c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006146:	04d9      	lsls	r1, r3, #19
 8006148:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <USB_HC_StartXfer+0x280>)
 800614a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800614c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	7a9b      	ldrb	r3, [r3, #10]
 8006152:	075b      	lsls	r3, r3, #29
 8006154:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006158:	69f9      	ldr	r1, [r7, #28]
 800615a:	0148      	lsls	r0, r1, #5
 800615c:	6a39      	ldr	r1, [r7, #32]
 800615e:	4401      	add	r1, r0
 8006160:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006164:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006166:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	460a      	mov	r2, r1
 8006180:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	7e7b      	ldrb	r3, [r7, #25]
 80061ca:	075b      	lsls	r3, r3, #29
 80061cc:	69f9      	ldr	r1, [r7, #28]
 80061ce:	0148      	lsls	r0, r1, #5
 80061d0:	6a39      	ldr	r1, [r7, #32]
 80061d2:	4401      	add	r1, r0
 80061d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061d8:	4313      	orrs	r3, r2
 80061da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	78db      	ldrb	r3, [r3, #3]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e003      	b.n	800620e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800620c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006214:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	461a      	mov	r2, r3
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e04e      	b.n	80062d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	78db      	ldrb	r3, [r3, #3]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d149      	bne.n	80062ce <USB_HC_StartXfer+0x276>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d045      	beq.n	80062ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	79db      	ldrb	r3, [r3, #7]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d830      	bhi.n	80062ac <USB_HC_StartXfer+0x254>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <USB_HC_StartXfer+0x1f8>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006261 	.word	0x08006261
 8006254:	08006285 	.word	0x08006285
 8006258:	08006261 	.word	0x08006261
 800625c:	08006285 	.word	0x08006285
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	3303      	adds	r3, #3
 8006266:	089b      	lsrs	r3, r3, #2
 8006268:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800626a:	8afa      	ldrh	r2, [r7, #22]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	b29b      	uxth	r3, r3
 8006272:	429a      	cmp	r2, r3
 8006274:	d91c      	bls.n	80062b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	619a      	str	r2, [r3, #24]
        }
        break;
 8006282:	e015      	b.n	80062b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	3303      	adds	r3, #3
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800628e:	8afa      	ldrh	r2, [r7, #22]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	b29b      	uxth	r3, r3
 800629a:	429a      	cmp	r2, r3
 800629c:	d90a      	bls.n	80062b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80062aa:	e003      	b.n	80062b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <USB_HC_StartXfer+0x25e>
        break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <USB_HC_StartXfer+0x25e>
        break;
 80062b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785a      	ldrb	r2, [r3, #1]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2000      	movs	r0, #0
 80062c6:	9000      	str	r0, [sp, #0]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fb53 	bl	8005974 <USB_WritePacket>
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3728      	adds	r7, #40	; 0x28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	1ff80000 	.word	0x1ff80000

080062dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	b29b      	uxth	r3, r3
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062fe:	b480      	push	{r7}
 8006300:	b089      	sub	sp, #36	; 0x24
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	0c9b      	lsrs	r3, r3, #18
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	0fdb      	lsrs	r3, r3, #31
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d104      	bne.n	8006358 <USB_HC_Halt+0x5a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e0e8      	b.n	800652a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <USB_HC_Halt+0x66>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d173      	bne.n	800644c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 80cb 	bne.w	8006528 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d143      	bne.n	8006426 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063fc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3301      	adds	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800640a:	d81d      	bhi.n	8006448 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006422:	d0ec      	beq.n	80063fe <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006424:	e080      	b.n	8006528 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	440a      	add	r2, r1
 800643c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006444:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006446:	e06f      	b.n	8006528 <USB_HC_Halt+0x22a>
            break;
 8006448:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800644a:	e06d      	b.n	8006528 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	440a      	add	r2, r1
 8006462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800646a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d143      	bne.n	8006504 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	440a      	add	r2, r1
 8006492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800649a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e8:	d81d      	bhi.n	8006526 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006500:	d0ec      	beq.n	80064dc <USB_HC_Halt+0x1de>
 8006502:	e011      	b.n	8006528 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	440a      	add	r2, r1
 800651a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e000      	b.n	8006528 <USB_HC_Halt+0x22a>
          break;
 8006526:	bf00      	nop
    }
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3724      	adds	r7, #36	; 0x24
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	04da      	lsls	r2, r3, #19
 8006554:	4b15      	ldr	r3, [pc, #84]	; (80065ac <USB_DoPing+0x74>)
 8006556:	4013      	ands	r3, r2
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	440a      	add	r2, r1
 8006560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006568:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006580:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006588:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	461a      	mov	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	1ff80000 	.word	0x1ff80000

080065b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff f935 	bl	8005830 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80065c6:	2110      	movs	r1, #16
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f98f 	bl	80058ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff f9b0 	bl	8005934 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	e01f      	b.n	800661a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006600:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	461a      	mov	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3301      	adds	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b0f      	cmp	r3, #15
 800661e:	d9dc      	bls.n	80065da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	e034      	b.n	8006690 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006644:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800664c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	461a      	mov	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3301      	adds	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666c:	d80c      	bhi.n	8006688 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006684:	d0ec      	beq.n	8006660 <USB_StopHost+0xb0>
 8006686:	e000      	b.n	800668a <USB_StopHost+0xda>
        break;
 8006688:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3301      	adds	r3, #1
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d9c7      	bls.n	8006626 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669c:	461a      	mov	r2, r3
 800669e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff f8ae 	bl	800580e <USB_EnableGlobalInt>

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066bc:	b590      	push	{r4, r7, lr}
 80066be:	b089      	sub	sp, #36	; 0x24
 80066c0:	af04      	add	r7, sp, #16
 80066c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066c4:	2301      	movs	r3, #1
 80066c6:	2202      	movs	r2, #2
 80066c8:	2102      	movs	r1, #2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc66 	bl	8006f9c <USBH_FindInterface>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2bff      	cmp	r3, #255	; 0xff
 80066d8:	d002      	beq.n	80066e0 <USBH_CDC_InterfaceInit+0x24>
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d901      	bls.n	80066e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066e0:	2302      	movs	r3, #2
 80066e2:	e13d      	b.n	8006960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fc3b 	bl	8006f64 <USBH_SelectInterface>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80066f8:	2302      	movs	r3, #2
 80066fa:	e131      	b.n	8006960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006702:	2050      	movs	r0, #80	; 0x50
 8006704:	f002 fa00 	bl	8008b08 <malloc>
 8006708:	4603      	mov	r3, r0
 800670a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800671c:	2302      	movs	r3, #2
 800671e:	e11f      	b.n	8006960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006720:	2250      	movs	r2, #80	; 0x50
 8006722:	2100      	movs	r1, #0
 8006724:	68b8      	ldr	r0, [r7, #8]
 8006726:	f002 f9ff 	bl	8008b28 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	211a      	movs	r1, #26
 8006730:	fb01 f303 	mul.w	r3, r1, r3
 8006734:	4413      	add	r3, r2
 8006736:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b25b      	sxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	da15      	bge.n	800676e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	211a      	movs	r1, #26
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	4413      	add	r3, r2
 800674e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006752:	781a      	ldrb	r2, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	211a      	movs	r1, #26
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006768:	881a      	ldrh	r2, [r3, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fe32 	bl	80083de <USBH_AllocPipe>
 800677a:	4603      	mov	r3, r0
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	7819      	ldrb	r1, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	7858      	ldrb	r0, [r3, #1]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	8952      	ldrh	r2, [r2, #10]
 800679a:	9202      	str	r2, [sp, #8]
 800679c:	2203      	movs	r2, #3
 800679e:	9201      	str	r2, [sp, #4]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4623      	mov	r3, r4
 80067a4:	4602      	mov	r2, r0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fdea 	bl	8008380 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2200      	movs	r2, #0
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 f8f9 	bl	80089ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067ba:	2300      	movs	r3, #0
 80067bc:	2200      	movs	r2, #0
 80067be:	210a      	movs	r1, #10
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fbeb 	bl	8006f9c <USBH_FindInterface>
 80067c6:	4603      	mov	r3, r0
 80067c8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2bff      	cmp	r3, #255	; 0xff
 80067ce:	d002      	beq.n	80067d6 <USBH_CDC_InterfaceInit+0x11a>
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d901      	bls.n	80067da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067d6:	2302      	movs	r3, #2
 80067d8:	e0c2      	b.n	8006960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	211a      	movs	r1, #26
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da16      	bge.n	8006820 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	211a      	movs	r1, #26
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	211a      	movs	r1, #26
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	4413      	add	r3, r2
 8006814:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	835a      	strh	r2, [r3, #26]
 800681e:	e015      	b.n	800684c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	211a      	movs	r1, #26
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	211a      	movs	r1, #26
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	211a      	movs	r1, #26
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	f203 3356 	addw	r3, r3, #854	; 0x356
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b25b      	sxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	da16      	bge.n	8006892 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	211a      	movs	r1, #26
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	211a      	movs	r1, #26
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	835a      	strh	r2, [r3, #26]
 8006890:	e015      	b.n	80068be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	211a      	movs	r1, #26
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	211a      	movs	r1, #26
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	7b9b      	ldrb	r3, [r3, #14]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fd8a 	bl	80083de <USBH_AllocPipe>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	7bdb      	ldrb	r3, [r3, #15]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fd80 	bl	80083de <USBH_AllocPipe>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	7b59      	ldrb	r1, [r3, #13]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	7b98      	ldrb	r0, [r3, #14]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	8b12      	ldrh	r2, [r2, #24]
 80068fe:	9202      	str	r2, [sp, #8]
 8006900:	2202      	movs	r2, #2
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4623      	mov	r3, r4
 8006908:	4602      	mov	r2, r0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fd38 	bl	8008380 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	7b19      	ldrb	r1, [r3, #12]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	7bd8      	ldrb	r0, [r3, #15]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	8b52      	ldrh	r2, [r2, #26]
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	2202      	movs	r2, #2
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4623      	mov	r3, r4
 8006932:	4602      	mov	r2, r0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 fd23 	bl	8008380 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7b5b      	ldrb	r3, [r3, #13]
 8006946:	2200      	movs	r2, #0
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f002 f82e 	bl	80089ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	7b1b      	ldrb	r3, [r3, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 f827 	bl	80089ac <USBH_LL_SetToggle>

  return USBH_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bd90      	pop	{r4, r7, pc}

08006968 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00e      	beq.n	80069a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fd18 	bl	80083be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fd43 	bl	8008420 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	7b1b      	ldrb	r3, [r3, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	7b1b      	ldrb	r3, [r3, #12]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 fd05 	bl	80083be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	7b1b      	ldrb	r3, [r3, #12]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fd30 	bl	8008420 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	7b5b      	ldrb	r3, [r3, #13]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	7b5b      	ldrb	r3, [r3, #13]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fcf2 	bl	80083be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	7b5b      	ldrb	r3, [r3, #13]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fd1d 	bl	8008420 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00b      	beq.n	8006a10 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 f889 	bl	8008b18 <free>
    phost->pActiveClass->pData = 0U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3340      	adds	r3, #64	; 0x40
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8b1 	bl	8006b9a <GetLineCoding>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a48:	2102      	movs	r1, #2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d877      	bhi.n	8006b6c <USBH_CDC_Process+0x114>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBH_CDC_Process+0x2c>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006a99 	.word	0x08006a99
 8006a88:	08006a9f 	.word	0x08006a9f
 8006a8c:	08006acf 	.word	0x08006acf
 8006a90:	08006b43 	.word	0x08006b43
 8006a94:	08006b51 	.word	0x08006b51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9c:	e06d      	b.n	8006b7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f897 	bl	8006bd8 <SetLineCoding>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006abc:	e058      	b.n	8006b70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d055      	beq.n	8006b70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006acc:	e050      	b.n	8006b70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3340      	adds	r3, #64	; 0x40
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f860 	bl	8006b9a <GetLineCoding>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d126      	bne.n	8006b32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d13b      	bne.n	8006b74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d133      	bne.n	8006b74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d12b      	bne.n	8006b74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d124      	bne.n	8006b74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f958 	bl	8006de0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b30:	e020      	b.n	8006b74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d01d      	beq.n	8006b74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b40:	e018      	b.n	8006b74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f867 	bl	8006c16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f8da 	bl	8006d02 <CDC_ProcessReception>
      break;
 8006b4e:	e014      	b.n	8006b7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b50:	2100      	movs	r1, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 ffe3 	bl	8007b1e <USBH_ClrFeature>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b6a:	e005      	b.n	8006b78 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b6c:	bf00      	nop
 8006b6e:	e004      	b.n	8006b7a <USBH_CDC_Process+0x122>
      break;
 8006b70:	bf00      	nop
 8006b72:	e002      	b.n	8006b7a <USBH_CDC_Process+0x122>
      break;
 8006b74:	bf00      	nop
 8006b76:	e000      	b.n	8006b7a <USBH_CDC_Process+0x122>
      break;
 8006b78:	bf00      	nop

  }

  return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	22a1      	movs	r2, #161	; 0xa1
 8006ba8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2221      	movs	r2, #33	; 0x21
 8006bae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2207      	movs	r2, #7
 8006bc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2207      	movs	r2, #7
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 f988 	bl	8007ede <USBH_CtlReq>
 8006bce:	4603      	mov	r3, r0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2221      	movs	r2, #33	; 0x21
 8006be6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2207      	movs	r2, #7
 8006bfe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2207      	movs	r2, #7
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f969 	bl	8007ede <USBH_CtlReq>
 8006c0c:	4603      	mov	r3, r0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af02      	add	r7, sp, #8
 8006c1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d002      	beq.n	8006c3c <CDC_ProcessTransmission+0x26>
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d023      	beq.n	8006c82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c3a:	e05e      	b.n	8006cfa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	8b12      	ldrh	r2, [r2, #24]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d90b      	bls.n	8006c60 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8b1a      	ldrh	r2, [r3, #24]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7b5b      	ldrb	r3, [r3, #13]
 8006c54:	2001      	movs	r0, #1
 8006c56:	9000      	str	r0, [sp, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fb4e 	bl	80082fa <USBH_BulkSendData>
 8006c5e:	e00b      	b.n	8006c78 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	7b5b      	ldrb	r3, [r3, #13]
 8006c6e:	2001      	movs	r0, #1
 8006c70:	9000      	str	r0, [sp, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fb41 	bl	80082fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c80:	e03b      	b.n	8006cfa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	7b5b      	ldrb	r3, [r3, #13]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe65 	bl	8008958 <USBH_LL_GetURBState>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d128      	bne.n	8006cea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	8b12      	ldrh	r2, [r2, #24]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d90e      	bls.n	8006cc2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	8b12      	ldrh	r2, [r2, #24]
 8006cac:	1a9a      	subs	r2, r3, r2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	8b12      	ldrh	r2, [r2, #24]
 8006cba:	441a      	add	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]
 8006cc0:	e002      	b.n	8006cc8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cd8:	e00e      	b.n	8006cf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f868 	bl	8006db8 <USBH_CDC_TransmitCallback>
      break;
 8006ce8:	e006      	b.n	8006cf8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d103      	bne.n	8006cf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cf8:	bf00      	nop
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d002      	beq.n	8006d28 <CDC_ProcessReception+0x26>
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d00e      	beq.n	8006d44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d26:	e043      	b.n	8006db0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	6a19      	ldr	r1, [r3, #32]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	8b5a      	ldrh	r2, [r3, #26]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	7b1b      	ldrb	r3, [r3, #12]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fb05 	bl	8008344 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d42:	e035      	b.n	8006db0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	7b1b      	ldrb	r3, [r3, #12]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fe04 	bl	8008958 <USBH_LL_GetURBState>
 8006d50:	4603      	mov	r3, r0
 8006d52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d129      	bne.n	8006dae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	7b1b      	ldrb	r3, [r3, #12]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fd67 	bl	8008834 <USBH_LL_GetLastXferSize>
 8006d66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d016      	beq.n	8006da0 <CDC_ProcessReception+0x9e>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	8b5b      	ldrh	r3, [r3, #26]
 8006d76:	461a      	mov	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d910      	bls.n	8006da0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	441a      	add	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d9e:	e006      	b.n	8006dae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f80f 	bl	8006dcc <USBH_CDC_ReceiveCallback>
      break;
 8006dae:	bf00      	nop
  }
}
 8006db0:	bf00      	nop
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e029      	b.n	8006e60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	79fa      	ldrb	r2, [r7, #7]
 8006e10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f81f 	bl	8006e68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f001 fc37 	bl	80086cc <USBH_LL_Init>

  return USBH_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e009      	b.n	8006e8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	33e0      	adds	r3, #224	; 0xe0
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b0e      	cmp	r3, #14
 8006e92:	d9f2      	bls.n	8006e7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e009      	b.n	8006eae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d3f1      	bcc.n	8006e9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f34:	1c59      	adds	r1, r3, #1
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	33de      	adds	r3, #222	; 0xde
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
 8006f4a:	e004      	b.n	8006f56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e001      	b.n	8006f56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d204      	bcs.n	8006f8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f88:	e001      	b.n	8006f8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	70fb      	strb	r3, [r7, #3]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70bb      	strb	r3, [r7, #2]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fc6:	e025      	b.n	8007014 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	221a      	movs	r2, #26
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	795b      	ldrb	r3, [r3, #5]
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d002      	beq.n	8006fea <USBH_FindInterface+0x4e>
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2bff      	cmp	r3, #255	; 0xff
 8006fe8:	d111      	bne.n	800700e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fee:	78ba      	ldrb	r2, [r7, #2]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d002      	beq.n	8006ffa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ff4:	78bb      	ldrb	r3, [r7, #2]
 8006ff6:	2bff      	cmp	r3, #255	; 0xff
 8006ff8:	d109      	bne.n	800700e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ffe:	787a      	ldrb	r2, [r7, #1]
 8007000:	429a      	cmp	r2, r3
 8007002:	d002      	beq.n	800700a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007004:	787b      	ldrb	r3, [r7, #1]
 8007006:	2bff      	cmp	r3, #255	; 0xff
 8007008:	d101      	bne.n	800700e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	e006      	b.n	800701c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	3301      	adds	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d9d6      	bls.n	8006fc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800701a:	23ff      	movs	r3, #255	; 0xff
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fb87 	bl	8008744 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007036:	2101      	movs	r1, #1
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fca0 	bl	800897e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af04      	add	r7, sp, #16
 800704e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d102      	bne.n	800706a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2203      	movs	r2, #3
 8007068:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b0b      	cmp	r3, #11
 8007072:	f200 81b3 	bhi.w	80073dc <USBH_Process+0x394>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBH_Process+0x34>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070ad 	.word	0x080070ad
 8007080:	080070df 	.word	0x080070df
 8007084:	08007147 	.word	0x08007147
 8007088:	08007377 	.word	0x08007377
 800708c:	080073dd 	.word	0x080073dd
 8007090:	080071eb 	.word	0x080071eb
 8007094:	0800731d 	.word	0x0800731d
 8007098:	08007221 	.word	0x08007221
 800709c:	08007241 	.word	0x08007241
 80070a0:	08007261 	.word	0x08007261
 80070a4:	0800728f 	.word	0x0800728f
 80070a8:	0800735f 	.word	0x0800735f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8193 	beq.w	80073e0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070c0:	20c8      	movs	r0, #200	; 0xc8
 80070c2:	f001 fca3 	bl	8008a0c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 fb99 	bl	80087fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070dc:	e180      	b.n	80073e0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d107      	bne.n	80070f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070f6:	e182      	b.n	80073fe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007102:	d914      	bls.n	800712e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800710a:	3301      	adds	r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800711a:	2b03      	cmp	r3, #3
 800711c:	d903      	bls.n	8007126 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	220d      	movs	r2, #13
 8007122:	701a      	strb	r2, [r3, #0]
      break;
 8007124:	e16b      	b.n	80073fe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
      break;
 800712c:	e167      	b.n	80073fe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007134:	f103 020a 	add.w	r2, r3, #10
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800713e:	200a      	movs	r0, #10
 8007140:	f001 fc64 	bl	8008a0c <USBH_Delay>
      break;
 8007144:	e15b      	b.n	80073fe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007156:	2104      	movs	r1, #4
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800715c:	2064      	movs	r0, #100	; 0x64
 800715e:	f001 fc55 	bl	8008a0c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fb24 	bl	80087b0 <USBH_LL_GetSpeed>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2205      	movs	r2, #5
 8007176:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f92f 	bl	80083de <USBH_AllocPipe>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 f927 	bl	80083de <USBH_AllocPipe>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7919      	ldrb	r1, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071ac:	b292      	uxth	r2, r2
 80071ae:	9202      	str	r2, [sp, #8]
 80071b0:	2200      	movs	r2, #0
 80071b2:	9201      	str	r2, [sp, #4]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4603      	mov	r3, r0
 80071b8:	2280      	movs	r2, #128	; 0x80
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f8e0 	bl	8008380 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7959      	ldrb	r1, [r3, #5]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071d4:	b292      	uxth	r2, r2
 80071d6:	9202      	str	r2, [sp, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	9201      	str	r2, [sp, #4]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4603      	mov	r3, r0
 80071e0:	2200      	movs	r2, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f8cc 	bl	8008380 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071e8:	e109      	b.n	80073fe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f90c 	bl	8007408 <USBH_HandleEnum>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 80f3 	bne.w	80073e4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800720c:	2b01      	cmp	r3, #1
 800720e:	d103      	bne.n	8007218 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2208      	movs	r2, #8
 8007214:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007216:	e0e5      	b.n	80073e4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2207      	movs	r2, #7
 800721c:	701a      	strb	r2, [r3, #0]
      break;
 800721e:	e0e1      	b.n	80073e4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80de 	beq.w	80073e8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007232:	2101      	movs	r1, #1
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2208      	movs	r2, #8
 800723c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800723e:	e0d3      	b.n	80073e8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007246:	b29b      	uxth	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fc20 	bl	8007a90 <USBH_SetCfg>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 80ca 	bne.w	80073ec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2209      	movs	r2, #9
 800725c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800725e:	e0c5      	b.n	80073ec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800726e:	2101      	movs	r1, #1
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc30 	bl	8007ad6 <USBH_SetFeature>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 80b9 	bne.w	80073f0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220a      	movs	r2, #10
 8007282:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007284:	e0b4      	b.n	80073f0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220a      	movs	r2, #10
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e0b0      	b.n	80073f0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80ad 	beq.w	80073f4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	e016      	b.n	80072d6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072a8:	7bfa      	ldrb	r2, [r7, #15]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32de      	adds	r2, #222	; 0xde
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	791a      	ldrb	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d108      	bne.n	80072d0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	32de      	adds	r2, #222	; 0xde
 80072c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80072ce:	e005      	b.n	80072dc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	3301      	adds	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0e5      	beq.n	80072a8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2206      	movs	r2, #6
 80072fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007304:	2103      	movs	r1, #3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800730a:	e073      	b.n	80073f4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	220d      	movs	r2, #13
 8007310:	701a      	strb	r2, [r3, #0]
      break;
 8007312:	e06f      	b.n	80073f4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	220d      	movs	r2, #13
 8007318:	701a      	strb	r2, [r3, #0]
      break;
 800731a:	e06b      	b.n	80073f4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d017      	beq.n	8007356 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220b      	movs	r2, #11
 8007342:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007344:	e058      	b.n	80073f8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d154      	bne.n	80073f8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	220d      	movs	r2, #13
 8007352:	701a      	strb	r2, [r3, #0]
      break;
 8007354:	e050      	b.n	80073f8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	220d      	movs	r2, #13
 800735a:	701a      	strb	r2, [r3, #0]
      break;
 800735c:	e04c      	b.n	80073f8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d049      	beq.n	80073fc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
      }
      break;
 8007374:	e042      	b.n	80073fc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fd72 	bl	8006e68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b2:	2105      	movs	r1, #5
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fe2b 	bl	8007028 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073d2:	e014      	b.n	80073fe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f9b5 	bl	8008744 <USBH_LL_Start>
      break;
 80073da:	e010      	b.n	80073fe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80073dc:	bf00      	nop
 80073de:	e00e      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073e0:	bf00      	nop
 80073e2:	e00c      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073e4:	bf00      	nop
 80073e6:	e00a      	b.n	80073fe <USBH_Process+0x3b6>
    break;
 80073e8:	bf00      	nop
 80073ea:	e008      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073ec:	bf00      	nop
 80073ee:	e006      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073f0:	bf00      	nop
 80073f2:	e004      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <USBH_Process+0x3b6>
      break;
 80073fc:	bf00      	nop
  }
  return USBH_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af04      	add	r7, sp, #16
 800740e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007414:	2301      	movs	r3, #1
 8007416:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b07      	cmp	r3, #7
 800741e:	f200 81c1 	bhi.w	80077a4 <USBH_HandleEnum+0x39c>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBH_HandleEnum+0x20>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007449 	.word	0x08007449
 800742c:	08007507 	.word	0x08007507
 8007430:	08007571 	.word	0x08007571
 8007434:	080075ff 	.word	0x080075ff
 8007438:	08007669 	.word	0x08007669
 800743c:	080076d9 	.word	0x080076d9
 8007440:	0800771f 	.word	0x0800771f
 8007444:	08007765 	.word	0x08007765
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007448:	2108      	movs	r1, #8
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa50 	bl	80078f0 <USBH_Get_DevDesc>
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d130      	bne.n	80074bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7919      	ldrb	r1, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800747e:	b292      	uxth	r2, r2
 8007480:	9202      	str	r2, [sp, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4603      	mov	r3, r0
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ff77 	bl	8008380 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7959      	ldrb	r1, [r3, #5]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074a6:	b292      	uxth	r2, r2
 80074a8:	9202      	str	r2, [sp, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	9201      	str	r2, [sp, #4]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4603      	mov	r3, r0
 80074b2:	2200      	movs	r2, #0
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 ff63 	bl	8008380 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074ba:	e175      	b.n	80077a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f040 8172 	bne.w	80077a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ca:	3301      	adds	r3, #1
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d903      	bls.n	80074e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	220d      	movs	r2, #13
 80074e2:	701a      	strb	r2, [r3, #0]
      break;
 80074e4:	e160      	b.n	80077a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	795b      	ldrb	r3, [r3, #5]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 ff97 	bl	8008420 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 ff91 	bl	8008420 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
      break;
 8007504:	e150      	b.n	80077a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007506:	2112      	movs	r1, #18
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f9f1 	bl	80078f0 <USBH_Get_DevDesc>
 800750e:	4603      	mov	r3, r0
 8007510:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800751e:	e145      	b.n	80077ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b03      	cmp	r3, #3
 8007524:	f040 8142 	bne.w	80077ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800752e:	3301      	adds	r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800753e:	2b03      	cmp	r3, #3
 8007540:	d903      	bls.n	800754a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220d      	movs	r2, #13
 8007546:	701a      	strb	r2, [r3, #0]
      break;
 8007548:	e130      	b.n	80077ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	795b      	ldrb	r3, [r3, #5]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ff65 	bl	8008420 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 ff5f 	bl	8008420 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
      break;
 800756e:	e11d      	b.n	80077ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007570:	2101      	movs	r1, #1
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa68 	bl	8007a48 <USBH_SetAddress>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d132      	bne.n	80075e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007582:	2002      	movs	r0, #2
 8007584:	f001 fa42 	bl	8008a0c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2203      	movs	r2, #3
 8007594:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7919      	ldrb	r1, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075aa:	b292      	uxth	r2, r2
 80075ac:	9202      	str	r2, [sp, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	9201      	str	r2, [sp, #4]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	4603      	mov	r3, r0
 80075b6:	2280      	movs	r2, #128	; 0x80
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fee1 	bl	8008380 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7959      	ldrb	r1, [r3, #5]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075d2:	b292      	uxth	r2, r2
 80075d4:	9202      	str	r2, [sp, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4603      	mov	r3, r0
 80075de:	2200      	movs	r2, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fecd 	bl	8008380 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075e6:	e0e3      	b.n	80077b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	f040 80e0 	bne.w	80077b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	220d      	movs	r2, #13
 80075f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	705a      	strb	r2, [r3, #1]
      break;
 80075fc:	e0d8      	b.n	80077b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80075fe:	2109      	movs	r1, #9
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f99d 	bl	8007940 <USBH_Get_CfgDesc>
 8007606:	4603      	mov	r3, r0
 8007608:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d103      	bne.n	8007618 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007616:	e0cd      	b.n	80077b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b03      	cmp	r3, #3
 800761c:	f040 80ca 	bne.w	80077b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007626:	3301      	adds	r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007636:	2b03      	cmp	r3, #3
 8007638:	d903      	bls.n	8007642 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	220d      	movs	r2, #13
 800763e:	701a      	strb	r2, [r3, #0]
      break;
 8007640:	e0b8      	b.n	80077b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	795b      	ldrb	r3, [r3, #5]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fee9 	bl	8008420 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	791b      	ldrb	r3, [r3, #4]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fee3 	bl	8008420 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e0a5      	b.n	80077b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f965 	bl	8007940 <USBH_Get_CfgDesc>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2205      	movs	r2, #5
 8007684:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007686:	e097      	b.n	80077b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b03      	cmp	r3, #3
 800768c:	f040 8094 	bne.w	80077b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007696:	3301      	adds	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d903      	bls.n	80076b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
      break;
 80076b0:	e082      	b.n	80077b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	795b      	ldrb	r3, [r3, #5]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 feb1 	bl	8008420 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	791b      	ldrb	r3, [r3, #4]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 feab 	bl	8008420 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
      break;
 80076d6:	e06f      	b.n	80077b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d019      	beq.n	8007716 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076ee:	23ff      	movs	r3, #255	; 0xff
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f949 	bl	8007988 <USBH_Get_StringDesc>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2206      	movs	r2, #6
 8007704:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007706:	e059      	b.n	80077bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d156      	bne.n	80077bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2206      	movs	r2, #6
 8007712:	705a      	strb	r2, [r3, #1]
      break;
 8007714:	e052      	b.n	80077bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2206      	movs	r2, #6
 800771a:	705a      	strb	r2, [r3, #1]
      break;
 800771c:	e04e      	b.n	80077bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007724:	2b00      	cmp	r3, #0
 8007726:	d019      	beq.n	800775c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007734:	23ff      	movs	r3, #255	; 0xff
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f926 	bl	8007988 <USBH_Get_StringDesc>
 800773c:	4603      	mov	r3, r0
 800773e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2207      	movs	r2, #7
 800774a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800774c:	e038      	b.n	80077c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d135      	bne.n	80077c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2207      	movs	r2, #7
 8007758:	705a      	strb	r2, [r3, #1]
      break;
 800775a:	e031      	b.n	80077c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2207      	movs	r2, #7
 8007760:	705a      	strb	r2, [r3, #1]
      break;
 8007762:	e02d      	b.n	80077c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800777a:	23ff      	movs	r3, #255	; 0xff
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f903 	bl	8007988 <USBH_Get_StringDesc>
 8007782:	4603      	mov	r3, r0
 8007784:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007790:	e018      	b.n	80077c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d115      	bne.n	80077c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e012      	b.n	80077c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
      break;
 80077a2:	e00f      	b.n	80077c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80077a4:	bf00      	nop
 80077a6:	e00e      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077a8:	bf00      	nop
 80077aa:	e00c      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077ac:	bf00      	nop
 80077ae:	e00a      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077b0:	bf00      	nop
 80077b2:	e008      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077b4:	bf00      	nop
 80077b6:	e006      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077b8:	bf00      	nop
 80077ba:	e004      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077bc:	bf00      	nop
 80077be:	e002      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <USBH_HandleEnum+0x3be>
      break;
 80077c4:	bf00      	nop
  }
  return Status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f804 	bl	8007812 <USBH_HandleSof>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b0b      	cmp	r3, #11
 8007822:	d10a      	bne.n	800783a <USBH_HandleSof+0x28>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
  }
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007852:	bf00      	nop
}
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800786e:	bf00      	nop
}
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 ff56 	bl	800877a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fda3 	bl	8008420 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	795b      	ldrb	r3, [r3, #5]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fd9d 	bl	8008420 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	b29b      	uxth	r3, r3
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800790e:	2100      	movs	r1, #0
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f864 	bl	80079de <USBH_GetDescriptor>
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	b292      	uxth	r2, r2
 8007930:	4619      	mov	r1, r3
 8007932:	f000 f918 	bl	8007b66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af02      	add	r7, sp, #8
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	331c      	adds	r3, #28
 8007950:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007952:	887b      	ldrh	r3, [r7, #2]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f83d 	bl	80079de <USBH_GetDescriptor>
 8007964:	4603      	mov	r3, r0
 8007966:	72fb      	strb	r3, [r7, #11]
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007974:	887a      	ldrh	r2, [r7, #2]
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f964 	bl	8007c46 <USBH_ParseCfgDesc>
  }

  return status;
 800797e:	7afb      	ldrb	r3, [r7, #11]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	461a      	mov	r2, r3
 8007994:	460b      	mov	r3, r1
 8007996:	72fb      	strb	r3, [r7, #11]
 8007998:	4613      	mov	r3, r2
 800799a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80079ac:	893b      	ldrh	r3, [r7, #8]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	460b      	mov	r3, r1
 80079b2:	2100      	movs	r1, #0
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f812 	bl	80079de <USBH_GetDescriptor>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d107      	bne.n	80079d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079ca:	893a      	ldrh	r2, [r7, #8]
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fa37 	bl	8007e42 <USBH_ParseStringDesc>
  }

  return status;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	72fb      	strb	r3, [r7, #11]
 80079ec:	4613      	mov	r3, r2
 80079ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	789b      	ldrb	r3, [r3, #2]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d11c      	bne.n	8007a32 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2206      	movs	r2, #6
 8007a08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	893a      	ldrh	r2, [r7, #8]
 8007a0e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a10:	893b      	ldrh	r3, [r7, #8]
 8007a12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a1a:	d104      	bne.n	8007a26 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f240 4209 	movw	r2, #1033	; 0x409
 8007a22:	829a      	strh	r2, [r3, #20]
 8007a24:	e002      	b.n	8007a2c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8b3a      	ldrh	r2, [r7, #24]
 8007a30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007a32:	8b3b      	ldrh	r3, [r7, #24]
 8007a34:	461a      	mov	r2, r3
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fa50 	bl	8007ede <USBH_CtlReq>
 8007a3e:	4603      	mov	r3, r0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d10f      	bne.n	8007a7c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2205      	movs	r2, #5
 8007a66:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa2c 	bl	8007ede <USBH_CtlReq>
 8007a86:	4603      	mov	r3, r0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	789b      	ldrb	r3, [r3, #2]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d10e      	bne.n	8007ac2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2209      	movs	r2, #9
 8007aae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa09 	bl	8007ede <USBH_CtlReq>
 8007acc:	4603      	mov	r3, r0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	789b      	ldrb	r3, [r3, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10f      	bne.n	8007b0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2203      	movs	r2, #3
 8007af4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9e5 	bl	8007ede <USBH_CtlReq>
 8007b14:	4603      	mov	r3, r0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	789b      	ldrb	r3, [r3, #2]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10f      	bne.n	8007b52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9c1 	bl	8007ede <USBH_CtlReq>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	4613      	mov	r3, r2
 8007b72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	785a      	ldrb	r2, [r3, #1]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3302      	adds	r3, #2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	3303      	adds	r3, #3
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	791a      	ldrb	r2, [r3, #4]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	795a      	ldrb	r2, [r3, #5]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	799a      	ldrb	r2, [r3, #6]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	79da      	ldrb	r2, [r3, #7]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d939      	bls.n	8007c3a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3309      	adds	r3, #9
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	330a      	adds	r3, #10
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	330b      	adds	r3, #11
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	330c      	adds	r3, #12
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	330d      	adds	r3, #13
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	021b      	lsls	r3, r3, #8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	7b9a      	ldrb	r2, [r3, #14]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7bda      	ldrb	r2, [r3, #15]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	7c1a      	ldrb	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	7c5a      	ldrb	r2, [r3, #17]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	745a      	strb	r2, [r3, #17]
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b08a      	sub	sp, #40	; 0x28
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	785a      	ldrb	r2, [r3, #1]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	3303      	adds	r3, #3
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	791a      	ldrb	r2, [r3, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	795a      	ldrb	r2, [r3, #5]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	799a      	ldrb	r2, [r3, #6]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	79da      	ldrb	r2, [r3, #7]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	7a1a      	ldrb	r2, [r3, #8]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	d95f      	bls.n	8007d82 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007cc2:	2309      	movs	r3, #9
 8007cc4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cca:	e051      	b.n	8007d70 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ccc:	f107 0316 	add.w	r3, r7, #22
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cd4:	f000 f8e8 	bl	8007ea8 <USBH_GetNextDesc>
 8007cd8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d146      	bne.n	8007d70 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ce6:	221a      	movs	r2, #26
 8007ce8:	fb02 f303 	mul.w	r3, r2, r3
 8007cec:	3308      	adds	r3, #8
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cf8:	69f8      	ldr	r0, [r7, #28]
 8007cfa:	f000 f846 	bl	8007d8a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d08:	e022      	b.n	8007d50 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d0a:	f107 0316 	add.w	r3, r7, #22
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d12:	f000 f8c9 	bl	8007ea8 <USBH_GetNextDesc>
 8007d16:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b05      	cmp	r3, #5
 8007d1e:	d117      	bne.n	8007d50 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d28:	3201      	adds	r2, #1
 8007d2a:	00d2      	lsls	r2, r2, #3
 8007d2c:	211a      	movs	r1, #26
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	4413      	add	r3, r2
 8007d34:	3308      	adds	r3, #8
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d40:	69b8      	ldr	r0, [r7, #24]
 8007d42:	f000 f851 	bl	8007de8 <USBH_ParseEPDesc>
            ep_ix++;
 8007d46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d204      	bcs.n	8007d66 <USBH_ParseCfgDesc+0x120>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	885a      	ldrh	r2, [r3, #2]
 8007d60:	8afb      	ldrh	r3, [r7, #22]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8d1      	bhi.n	8007d0a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d804      	bhi.n	8007d82 <USBH_ParseCfgDesc+0x13c>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	885a      	ldrh	r2, [r3, #2]
 8007d7c:	8afb      	ldrh	r3, [r7, #22]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d8a4      	bhi.n	8007ccc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007d82:	bf00      	nop
 8007d84:	3728      	adds	r7, #40	; 0x28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781a      	ldrb	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	785a      	ldrb	r2, [r3, #1]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	789a      	ldrb	r2, [r3, #2]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	78da      	ldrb	r2, [r3, #3]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	791a      	ldrb	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	795a      	ldrb	r2, [r3, #5]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	799a      	ldrb	r2, [r3, #6]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	79da      	ldrb	r2, [r3, #7]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	7a1a      	ldrb	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	721a      	strb	r2, [r3, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	785a      	ldrb	r2, [r3, #1]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	789a      	ldrb	r2, [r3, #2]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	78da      	ldrb	r2, [r3, #3]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	3304      	adds	r3, #4
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	3305      	adds	r3, #5
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	799a      	ldrb	r2, [r3, #6]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	719a      	strb	r2, [r3, #6]
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b087      	sub	sp, #28
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d120      	bne.n	8007e9c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	1e9a      	subs	r2, r3, #2
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bf28      	it	cs
 8007e66:	4613      	movcs	r3, r2
 8007e68:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3302      	adds	r3, #2
 8007e6e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e70:	2300      	movs	r3, #0
 8007e72:	82fb      	strh	r3, [r7, #22]
 8007e74:	e00b      	b.n	8007e8e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e76:	8afb      	ldrh	r3, [r7, #22]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e88:	8afb      	ldrh	r3, [r7, #22]
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	82fb      	strh	r3, [r7, #22]
 8007e8e:	8afa      	ldrh	r2, [r7, #22]
 8007e90:	8abb      	ldrh	r3, [r7, #20]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3ef      	bcc.n	8007e76 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	881a      	ldrh	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	789b      	ldrb	r3, [r3, #2]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d002      	beq.n	8007efe <USBH_CtlReq+0x20>
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d00f      	beq.n	8007f1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007efc:	e027      	b.n	8007f4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	88fa      	ldrh	r2, [r7, #6]
 8007f08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2202      	movs	r2, #2
 8007f14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1a:	e018      	b.n	8007f4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f81b 	bl	8007f58 <USBH_HandleControl>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <USBH_CtlReq+0x54>
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d106      	bne.n	8007f40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	761a      	strb	r2, [r3, #24]
      break;
 8007f3e:	e005      	b.n	8007f4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d102      	bne.n	8007f4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	709a      	strb	r2, [r3, #2]
      break;
 8007f4c:	bf00      	nop
  }
  return status;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7e1b      	ldrb	r3, [r3, #24]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2b0a      	cmp	r3, #10
 8007f70:	f200 8156 	bhi.w	8008220 <USBH_HandleControl+0x2c8>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <USBH_HandleControl+0x24>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	08007fc3 	.word	0x08007fc3
 8007f84:	0800802d 	.word	0x0800802d
 8007f88:	08008053 	.word	0x08008053
 8007f8c:	0800808b 	.word	0x0800808b
 8007f90:	080080b5 	.word	0x080080b5
 8007f94:	08008107 	.word	0x08008107
 8007f98:	08008129 	.word	0x08008129
 8007f9c:	08008165 	.word	0x08008165
 8007fa0:	0800818b 	.word	0x0800818b
 8007fa4:	080081c9 	.word	0x080081c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f103 0110 	add.w	r1, r3, #16
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	795b      	ldrb	r3, [r3, #5]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f943 	bl	8008240 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	761a      	strb	r2, [r3, #24]
      break;
 8007fc0:	e139      	b.n	8008236 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fcc5 	bl	8008958 <USBH_LL_GetURBState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d11e      	bne.n	8008016 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7c1b      	ldrb	r3, [r3, #16]
 8007fdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fe0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8adb      	ldrh	r3, [r3, #22]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fea:	7b7b      	ldrb	r3, [r7, #13]
 8007fec:	2b80      	cmp	r3, #128	; 0x80
 8007fee:	d103      	bne.n	8007ff8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ff6:	e115      	b.n	8008224 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2205      	movs	r2, #5
 8007ffc:	761a      	strb	r2, [r3, #24]
      break;
 8007ffe:	e111      	b.n	8008224 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008000:	7b7b      	ldrb	r3, [r7, #13]
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d103      	bne.n	800800e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2209      	movs	r2, #9
 800800a:	761a      	strb	r2, [r3, #24]
      break;
 800800c:	e10a      	b.n	8008224 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2207      	movs	r2, #7
 8008012:	761a      	strb	r2, [r3, #24]
      break;
 8008014:	e106      	b.n	8008224 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d003      	beq.n	8008024 <USBH_HandleControl+0xcc>
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b02      	cmp	r3, #2
 8008020:	f040 8100 	bne.w	8008224 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	220b      	movs	r2, #11
 8008028:	761a      	strb	r2, [r3, #24]
      break;
 800802a:	e0fb      	b.n	8008224 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6899      	ldr	r1, [r3, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	899a      	ldrh	r2, [r3, #12]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f93a 	bl	80082be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	761a      	strb	r2, [r3, #24]
      break;
 8008050:	e0f1      	b.n	8008236 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc7d 	bl	8008958 <USBH_LL_GetURBState>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d102      	bne.n	800806e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2209      	movs	r2, #9
 800806c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b05      	cmp	r3, #5
 8008072:	d102      	bne.n	800807a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008074:	2303      	movs	r3, #3
 8008076:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008078:	e0d6      	b.n	8008228 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b04      	cmp	r3, #4
 800807e:	f040 80d3 	bne.w	8008228 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220b      	movs	r2, #11
 8008086:	761a      	strb	r2, [r3, #24]
      break;
 8008088:	e0ce      	b.n	8008228 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6899      	ldr	r1, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	899a      	ldrh	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	795b      	ldrb	r3, [r3, #5]
 8008096:	2001      	movs	r0, #1
 8008098:	9000      	str	r0, [sp, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f8ea 	bl	8008274 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2206      	movs	r2, #6
 80080b0:	761a      	strb	r2, [r3, #24]
      break;
 80080b2:	e0c0      	b.n	8008236 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	795b      	ldrb	r3, [r3, #5]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fc4c 	bl	8008958 <USBH_LL_GetURBState>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d103      	bne.n	80080d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2207      	movs	r2, #7
 80080ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080d0:	e0ac      	b.n	800822c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	d105      	bne.n	80080e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	220c      	movs	r2, #12
 80080dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080de:	2303      	movs	r3, #3
 80080e0:	73fb      	strb	r3, [r7, #15]
      break;
 80080e2:	e0a3      	b.n	800822c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d103      	bne.n	80080f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2205      	movs	r2, #5
 80080ee:	761a      	strb	r2, [r3, #24]
      break;
 80080f0:	e09c      	b.n	800822c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	f040 8099 	bne.w	800822c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	220b      	movs	r2, #11
 80080fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	73fb      	strb	r3, [r7, #15]
      break;
 8008104:	e092      	b.n	800822c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8d5 	bl	80082be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2208      	movs	r2, #8
 8008124:	761a      	strb	r2, [r3, #24]

      break;
 8008126:	e086      	b.n	8008236 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	791b      	ldrb	r3, [r3, #4]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fc12 	bl	8008958 <USBH_LL_GetURBState>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d105      	bne.n	800814a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	220d      	movs	r2, #13
 8008142:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008148:	e072      	b.n	8008230 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d103      	bne.n	8008158 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	220b      	movs	r2, #11
 8008154:	761a      	strb	r2, [r3, #24]
      break;
 8008156:	e06b      	b.n	8008230 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b05      	cmp	r3, #5
 800815c:	d168      	bne.n	8008230 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
      break;
 8008162:	e065      	b.n	8008230 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	795b      	ldrb	r3, [r3, #5]
 8008168:	2201      	movs	r2, #1
 800816a:	9200      	str	r2, [sp, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f87f 	bl	8008274 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220a      	movs	r2, #10
 8008186:	761a      	strb	r2, [r3, #24]
      break;
 8008188:	e055      	b.n	8008236 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	795b      	ldrb	r3, [r3, #5]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fbe1 	bl	8008958 <USBH_LL_GetURBState>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d105      	bne.n	80081ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220d      	movs	r2, #13
 80081a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081aa:	e043      	b.n	8008234 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d103      	bne.n	80081ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2209      	movs	r2, #9
 80081b6:	761a      	strb	r2, [r3, #24]
      break;
 80081b8:	e03c      	b.n	8008234 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d139      	bne.n	8008234 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	220b      	movs	r2, #11
 80081c4:	761a      	strb	r2, [r3, #24]
      break;
 80081c6:	e035      	b.n	8008234 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	7e5b      	ldrb	r3, [r3, #25]
 80081cc:	3301      	adds	r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	765a      	strb	r2, [r3, #25]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7e5b      	ldrb	r3, [r3, #25]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d806      	bhi.n	80081ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081e8:	e025      	b.n	8008236 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081f0:	2106      	movs	r1, #6
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	795b      	ldrb	r3, [r3, #5]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f90c 	bl	8008420 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	791b      	ldrb	r3, [r3, #4]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f906 	bl	8008420 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800821a:	2302      	movs	r3, #2
 800821c:	73fb      	strb	r3, [r7, #15]
      break;
 800821e:	e00a      	b.n	8008236 <USBH_HandleControl+0x2de>

    default:
      break;
 8008220:	bf00      	nop
 8008222:	e008      	b.n	8008236 <USBH_HandleControl+0x2de>
      break;
 8008224:	bf00      	nop
 8008226:	e006      	b.n	8008236 <USBH_HandleControl+0x2de>
      break;
 8008228:	bf00      	nop
 800822a:	e004      	b.n	8008236 <USBH_HandleControl+0x2de>
      break;
 800822c:	bf00      	nop
 800822e:	e002      	b.n	8008236 <USBH_HandleControl+0x2de>
      break;
 8008230:	bf00      	nop
 8008232:	e000      	b.n	8008236 <USBH_HandleControl+0x2de>
      break;
 8008234:	bf00      	nop
  }

  return status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af04      	add	r7, sp, #16
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800824e:	79f9      	ldrb	r1, [r7, #7]
 8008250:	2300      	movs	r3, #0
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	2308      	movs	r3, #8
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	2300      	movs	r3, #0
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2300      	movs	r3, #0
 8008262:	2200      	movs	r2, #0
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 fb46 	bl	80088f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4611      	mov	r1, r2
 8008280:	461a      	mov	r2, r3
 8008282:	460b      	mov	r3, r1
 8008284:	80fb      	strh	r3, [r7, #6]
 8008286:	4613      	mov	r3, r2
 8008288:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008298:	7979      	ldrb	r1, [r7, #5]
 800829a:	7e3b      	ldrb	r3, [r7, #24]
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	2301      	movs	r3, #1
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	2300      	movs	r3, #0
 80082ac:	2200      	movs	r2, #0
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fb21 	bl	80088f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af04      	add	r7, sp, #16
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	4611      	mov	r1, r2
 80082ca:	461a      	mov	r2, r3
 80082cc:	460b      	mov	r3, r1
 80082ce:	80fb      	strh	r3, [r7, #6]
 80082d0:	4613      	mov	r3, r2
 80082d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082d4:	7979      	ldrb	r1, [r7, #5]
 80082d6:	2300      	movs	r3, #0
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	9302      	str	r3, [sp, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	2301      	movs	r3, #1
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	2300      	movs	r3, #0
 80082e8:	2201      	movs	r2, #1
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 fb03 	bl	80088f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082f0:	2300      	movs	r3, #0

}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b088      	sub	sp, #32
 80082fe:	af04      	add	r7, sp, #16
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	4611      	mov	r1, r2
 8008306:	461a      	mov	r2, r3
 8008308:	460b      	mov	r3, r1
 800830a:	80fb      	strh	r3, [r7, #6]
 800830c:	4613      	mov	r3, r2
 800830e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800831e:	7979      	ldrb	r1, [r7, #5]
 8008320:	7e3b      	ldrb	r3, [r7, #24]
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	2301      	movs	r3, #1
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2302      	movs	r3, #2
 8008332:	2200      	movs	r2, #0
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fade 	bl	80088f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af04      	add	r7, sp, #16
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4611      	mov	r1, r2
 8008350:	461a      	mov	r2, r3
 8008352:	460b      	mov	r3, r1
 8008354:	80fb      	strh	r3, [r7, #6]
 8008356:	4613      	mov	r3, r2
 8008358:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800835a:	7979      	ldrb	r1, [r7, #5]
 800835c:	2300      	movs	r3, #0
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	9302      	str	r3, [sp, #8]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	2301      	movs	r3, #1
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	2302      	movs	r3, #2
 800836e:	2201      	movs	r2, #1
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fac0 	bl	80088f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af04      	add	r7, sp, #16
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	461a      	mov	r2, r3
 800838e:	4603      	mov	r3, r0
 8008390:	70fb      	strb	r3, [r7, #3]
 8008392:	460b      	mov	r3, r1
 8008394:	70bb      	strb	r3, [r7, #2]
 8008396:	4613      	mov	r3, r2
 8008398:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800839a:	7878      	ldrb	r0, [r7, #1]
 800839c:	78ba      	ldrb	r2, [r7, #2]
 800839e:	78f9      	ldrb	r1, [r7, #3]
 80083a0:	8b3b      	ldrh	r3, [r7, #24]
 80083a2:	9302      	str	r3, [sp, #8]
 80083a4:	7d3b      	ldrb	r3, [r7, #20]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	7c3b      	ldrb	r3, [r7, #16]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4603      	mov	r3, r0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa53 	bl	800885a <USBH_LL_OpenPipe>

  return USBH_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa72 	bl	80088b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f836 	bl	800845c <USBH_GetFreePipe>
 80083f0:	4603      	mov	r3, r0
 80083f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083f4:	89fb      	ldrh	r3, [r7, #14]
 80083f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00a      	beq.n	8008414 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	89fb      	ldrh	r3, [r7, #14]
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	33e0      	adds	r3, #224	; 0xe0
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008414:	89fb      	ldrh	r3, [r7, #14]
 8008416:	b2db      	uxtb	r3, r3
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	2b0a      	cmp	r3, #10
 8008430:	d80d      	bhi.n	800844e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	33e0      	adds	r3, #224	; 0xe0
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	33e0      	adds	r3, #224	; 0xe0
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	e00f      	b.n	800848e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	33e0      	adds	r3, #224	; 0xe0
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	b29b      	uxth	r3, r3
 8008486:	e007      	b.n	8008498 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	3301      	adds	r3, #1
 800848c:	73fb      	strb	r3, [r7, #15]
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b0a      	cmp	r3, #10
 8008492:	d9ec      	bls.n	800846e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008494:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084a8:	2201      	movs	r2, #1
 80084aa:	490e      	ldr	r1, [pc, #56]	; (80084e4 <MX_USB_HOST_Init+0x40>)
 80084ac:	480e      	ldr	r0, [pc, #56]	; (80084e8 <MX_USB_HOST_Init+0x44>)
 80084ae:	f7fe fca1 	bl	8006df4 <USBH_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084b8:	f7f8 fa8e 	bl	80009d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084bc:	490b      	ldr	r1, [pc, #44]	; (80084ec <MX_USB_HOST_Init+0x48>)
 80084be:	480a      	ldr	r0, [pc, #40]	; (80084e8 <MX_USB_HOST_Init+0x44>)
 80084c0:	f7fe fd26 	bl	8006f10 <USBH_RegisterClass>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084ca:	f7f8 fa85 	bl	80009d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084ce:	4806      	ldr	r0, [pc, #24]	; (80084e8 <MX_USB_HOST_Init+0x44>)
 80084d0:	f7fe fdaa 	bl	8007028 <USBH_Start>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084da:	f7f8 fa7d 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	08008505 	.word	0x08008505
 80084e8:	20000220 	.word	0x20000220
 80084ec:	20000010 	.word	0x20000010

080084f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80084f4:	4802      	ldr	r0, [pc, #8]	; (8008500 <MX_USB_HOST_Process+0x10>)
 80084f6:	f7fe fda7 	bl	8007048 <USBH_Process>
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000220 	.word	0x20000220

08008504 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	3b01      	subs	r3, #1
 8008514:	2b04      	cmp	r3, #4
 8008516:	d819      	bhi.n	800854c <USBH_UserProcess+0x48>
 8008518:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <USBH_UserProcess+0x1c>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	0800854d 	.word	0x0800854d
 8008524:	0800853d 	.word	0x0800853d
 8008528:	0800854d 	.word	0x0800854d
 800852c:	08008545 	.word	0x08008545
 8008530:	08008535 	.word	0x08008535
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008534:	4b09      	ldr	r3, [pc, #36]	; (800855c <USBH_UserProcess+0x58>)
 8008536:	2203      	movs	r2, #3
 8008538:	701a      	strb	r2, [r3, #0]
  break;
 800853a:	e008      	b.n	800854e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <USBH_UserProcess+0x58>)
 800853e:	2202      	movs	r2, #2
 8008540:	701a      	strb	r2, [r3, #0]
  break;
 8008542:	e004      	b.n	800854e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <USBH_UserProcess+0x58>)
 8008546:	2201      	movs	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
  break;
 800854a:	e000      	b.n	800854e <USBH_UserProcess+0x4a>

  default:
  break;
 800854c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	200000c4 	.word	0x200000c4

08008560 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	; 0x28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	605a      	str	r2, [r3, #4]
 8008572:	609a      	str	r2, [r3, #8]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008580:	d147      	bne.n	8008612 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <HAL_HCD_MspInit+0xbc>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	4a24      	ldr	r2, [pc, #144]	; (800861c <HAL_HCD_MspInit+0xbc>)
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	6313      	str	r3, [r2, #48]	; 0x30
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <HAL_HCD_MspInit+0xbc>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800859e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	4619      	mov	r1, r3
 80085b2:	481b      	ldr	r0, [pc, #108]	; (8008620 <HAL_HCD_MspInit+0xc0>)
 80085b4:	f7f9 fb90 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085be:	2302      	movs	r3, #2
 80085c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c6:	2300      	movs	r3, #0
 80085c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085ca:	230a      	movs	r3, #10
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4619      	mov	r1, r3
 80085d4:	4812      	ldr	r0, [pc, #72]	; (8008620 <HAL_HCD_MspInit+0xc0>)
 80085d6:	f7f9 fb7f 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <HAL_HCD_MspInit+0xbc>)
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	4a0f      	ldr	r2, [pc, #60]	; (800861c <HAL_HCD_MspInit+0xbc>)
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	6353      	str	r3, [r2, #52]	; 0x34
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <HAL_HCD_MspInit+0xbc>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	4a0b      	ldr	r2, [pc, #44]	; (800861c <HAL_HCD_MspInit+0xbc>)
 80085f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085f4:	6453      	str	r3, [r2, #68]	; 0x44
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <HAL_HCD_MspInit+0xbc>)
 80085f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	2043      	movs	r0, #67	; 0x43
 8008608:	f7f9 fb2f 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800860c:	2043      	movs	r0, #67	; 0x43
 800860e:	f7f9 fb48 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008612:	bf00      	nop
 8008614:	3728      	adds	r7, #40	; 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800
 8008620:	40020000 	.word	0x40020000

08008624 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff f8db 	bl	80077ee <USBH_LL_IncTimer>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f913 	bl	800787a <USBH_LL_Connect>
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff f91c 	bl	80078a8 <USBH_LL_Disconnect>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
 8008684:	4613      	mov	r3, r2
 8008686:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff f8cd 	bl	8007842 <USBH_LL_PortEnabled>
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f8cd 	bl	800785e <USBH_LL_PortDisabled>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d12a      	bne.n	8008734 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086de:	4a18      	ldr	r2, [pc, #96]	; (8008740 <USBH_LL_Init+0x74>)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a15      	ldr	r2, [pc, #84]	; (8008740 <USBH_LL_Init+0x74>)
 80086ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086ee:	4b14      	ldr	r3, [pc, #80]	; (8008740 <USBH_LL_Init+0x74>)
 80086f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <USBH_LL_Init+0x74>)
 80086f8:	2208      	movs	r2, #8
 80086fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086fc:	4b10      	ldr	r3, [pc, #64]	; (8008740 <USBH_LL_Init+0x74>)
 80086fe:	2201      	movs	r2, #1
 8008700:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008702:	4b0f      	ldr	r3, [pc, #60]	; (8008740 <USBH_LL_Init+0x74>)
 8008704:	2200      	movs	r2, #0
 8008706:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008708:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <USBH_LL_Init+0x74>)
 800870a:	2202      	movs	r2, #2
 800870c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800870e:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <USBH_LL_Init+0x74>)
 8008710:	2200      	movs	r2, #0
 8008712:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008714:	480a      	ldr	r0, [pc, #40]	; (8008740 <USBH_LL_Init+0x74>)
 8008716:	f7f9 fc94 	bl	8002042 <HAL_HCD_Init>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008720:	f7f8 f95a 	bl	80009d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008724:	4806      	ldr	r0, [pc, #24]	; (8008740 <USBH_LL_Init+0x74>)
 8008726:	f7fa f878 	bl	800281a <HAL_HCD_GetCurrentFrame>
 800872a:	4603      	mov	r3, r0
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff f84e 	bl	80077d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200005f8 	.word	0x200005f8

08008744 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800875a:	4618      	mov	r0, r3
 800875c:	f7f9 ffe7 	bl	800272e <HAL_HCD_Start>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f95c 	bl	8008a24 <USBH_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008790:	4618      	mov	r0, r3
 8008792:	f7f9 ffef 	bl	8002774 <HAL_HCD_Stop>
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f941 	bl	8008a24 <USBH_Get_USB_Status>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fa f837 	bl	8002836 <HAL_HCD_GetCurrentSpeed>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d00c      	beq.n	80087e8 <USBH_LL_GetSpeed+0x38>
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d80d      	bhi.n	80087ee <USBH_LL_GetSpeed+0x3e>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <USBH_LL_GetSpeed+0x2c>
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d003      	beq.n	80087e2 <USBH_LL_GetSpeed+0x32>
 80087da:	e008      	b.n	80087ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
    break;
 80087e0:	e008      	b.n	80087f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80087e2:	2301      	movs	r3, #1
 80087e4:	73fb      	strb	r3, [r7, #15]
    break;
 80087e6:	e005      	b.n	80087f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80087e8:	2302      	movs	r3, #2
 80087ea:	73fb      	strb	r3, [r7, #15]
    break;
 80087ec:	e002      	b.n	80087f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80087ee:	2301      	movs	r3, #1
 80087f0:	73fb      	strb	r3, [r7, #15]
    break;
 80087f2:	bf00      	nop
  }
  return  speed;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008814:	4618      	mov	r0, r3
 8008816:	f7f9 ffca 	bl	80027ae <HAL_HCD_ResetPort>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f8ff 	bl	8008a24 <USBH_Get_USB_Status>
 8008826:	4603      	mov	r3, r0
 8008828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882a:	7bbb      	ldrb	r3, [r7, #14]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7f9 ffd1 	bl	80027f2 <HAL_HCD_HC_GetXferCount>
 8008850:	4603      	mov	r3, r0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800885a:	b590      	push	{r4, r7, lr}
 800885c:	b089      	sub	sp, #36	; 0x24
 800885e:	af04      	add	r7, sp, #16
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	461a      	mov	r2, r3
 8008868:	4603      	mov	r3, r0
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	460b      	mov	r3, r1
 800886e:	70bb      	strb	r3, [r7, #2]
 8008870:	4613      	mov	r3, r2
 8008872:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008882:	787c      	ldrb	r4, [r7, #1]
 8008884:	78ba      	ldrb	r2, [r7, #2]
 8008886:	78f9      	ldrb	r1, [r7, #3]
 8008888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	4623      	mov	r3, r4
 800889a:	f7f9 fc34 	bl	8002106 <HAL_HCD_HC_Init>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f8bd 	bl	8008a24 <USBH_Get_USB_Status>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd90      	pop	{r4, r7, pc}

080088b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f9 fca4 	bl	8002224 <HAL_HCD_HC_Halt>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f89e 	bl	8008a24 <USBH_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80088f6:	b590      	push	{r4, r7, lr}
 80088f8:	b089      	sub	sp, #36	; 0x24
 80088fa:	af04      	add	r7, sp, #16
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	461a      	mov	r2, r3
 8008904:	4603      	mov	r3, r0
 8008906:	70fb      	strb	r3, [r7, #3]
 8008908:	460b      	mov	r3, r1
 800890a:	70bb      	strb	r3, [r7, #2]
 800890c:	4613      	mov	r3, r2
 800890e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800891e:	787c      	ldrb	r4, [r7, #1]
 8008920:	78ba      	ldrb	r2, [r7, #2]
 8008922:	78f9      	ldrb	r1, [r7, #3]
 8008924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4623      	mov	r3, r4
 800893a:	f7f9 fc97 	bl	800226c <HAL_HCD_HC_SubmitRequest>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f86d 	bl	8008a24 <USBH_Get_USB_Status>
 800894a:	4603      	mov	r3, r0
 800894c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	bd90      	pop	{r4, r7, pc}

08008958 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7f9 ff2b 	bl	80027ca <HAL_HCD_HC_GetURBState>
 8008974:	4603      	mov	r3, r0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008990:	2b01      	cmp	r3, #1
 8008992:	d103      	bne.n	800899c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f870 	bl	8008a7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800899c:	20c8      	movs	r0, #200	; 0xc8
 800899e:	f7f9 f865 	bl	8001a6c <HAL_Delay>
  return USBH_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
 80089b8:	4613      	mov	r3, r2
 80089ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	212c      	movs	r1, #44	; 0x2c
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	333b      	adds	r3, #59	; 0x3b
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	212c      	movs	r1, #44	; 0x2c
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	4413      	add	r3, r2
 80089e4:	3354      	adds	r3, #84	; 0x54
 80089e6:	78ba      	ldrb	r2, [r7, #2]
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	e008      	b.n	80089fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	212c      	movs	r1, #44	; 0x2c
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	3355      	adds	r3, #85	; 0x55
 80089fa:	78ba      	ldrb	r2, [r7, #2]
 80089fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7f9 f829 	bl	8001a6c <HAL_Delay>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d817      	bhi.n	8008a68 <USBH_Get_USB_Status+0x44>
 8008a38:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <USBH_Get_USB_Status+0x1c>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a57 	.word	0x08008a57
 8008a48:	08008a5d 	.word	0x08008a5d
 8008a4c:	08008a63 	.word	0x08008a63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
    break;
 8008a54:	e00b      	b.n	8008a6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a56:	2302      	movs	r3, #2
 8008a58:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5a:	e008      	b.n	8008a6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a60:	e005      	b.n	8008a6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	73fb      	strb	r3, [r7, #15]
    break;
 8008a66:	e002      	b.n	8008a6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6c:	bf00      	nop
  }
  return usb_status;
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
 8008a94:	e001      	b.n	8008a9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4803      	ldr	r0, [pc, #12]	; (8008ab0 <MX_DriverVbusFS+0x34>)
 8008aa2:	f7f9 fab5 	bl	8002010 <HAL_GPIO_WritePin>
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	40020800 	.word	0x40020800

08008ab4 <__errno>:
 8008ab4:	4b01      	ldr	r3, [pc, #4]	; (8008abc <__errno+0x8>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000030 	.word	0x20000030

08008ac0 <__libc_init_array>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	4d0d      	ldr	r5, [pc, #52]	; (8008af8 <__libc_init_array+0x38>)
 8008ac4:	4c0d      	ldr	r4, [pc, #52]	; (8008afc <__libc_init_array+0x3c>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	2600      	movs	r6, #0
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	d109      	bne.n	8008ae4 <__libc_init_array+0x24>
 8008ad0:	4d0b      	ldr	r5, [pc, #44]	; (8008b00 <__libc_init_array+0x40>)
 8008ad2:	4c0c      	ldr	r4, [pc, #48]	; (8008b04 <__libc_init_array+0x44>)
 8008ad4:	f000 f8f8 	bl	8008cc8 <_init>
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	2600      	movs	r6, #0
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	d105      	bne.n	8008aee <__libc_init_array+0x2e>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae8:	4798      	blx	r3
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7ee      	b.n	8008acc <__libc_init_array+0xc>
 8008aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af2:	4798      	blx	r3
 8008af4:	3601      	adds	r6, #1
 8008af6:	e7f2      	b.n	8008ade <__libc_init_array+0x1e>
 8008af8:	08008d04 	.word	0x08008d04
 8008afc:	08008d04 	.word	0x08008d04
 8008b00:	08008d04 	.word	0x08008d04
 8008b04:	08008d08 	.word	0x08008d08

08008b08 <malloc>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <malloc+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f000 b863 	b.w	8008bd8 <_malloc_r>
 8008b12:	bf00      	nop
 8008b14:	20000030 	.word	0x20000030

08008b18 <free>:
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <free+0xc>)
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	f000 b80b 	b.w	8008b38 <_free_r>
 8008b22:	bf00      	nop
 8008b24:	20000030 	.word	0x20000030

08008b28 <memset>:
 8008b28:	4402      	add	r2, r0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d100      	bne.n	8008b32 <memset+0xa>
 8008b30:	4770      	bx	lr
 8008b32:	f803 1b01 	strb.w	r1, [r3], #1
 8008b36:	e7f9      	b.n	8008b2c <memset+0x4>

08008b38 <_free_r>:
 8008b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	d048      	beq.n	8008bd0 <_free_r+0x98>
 8008b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b42:	9001      	str	r0, [sp, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f1a1 0404 	sub.w	r4, r1, #4
 8008b4a:	bfb8      	it	lt
 8008b4c:	18e4      	addlt	r4, r4, r3
 8008b4e:	f000 f8ad 	bl	8008cac <__malloc_lock>
 8008b52:	4a20      	ldr	r2, [pc, #128]	; (8008bd4 <_free_r+0x9c>)
 8008b54:	9801      	ldr	r0, [sp, #4]
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	4615      	mov	r5, r2
 8008b5a:	b933      	cbnz	r3, 8008b6a <_free_r+0x32>
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	6014      	str	r4, [r2, #0]
 8008b60:	b003      	add	sp, #12
 8008b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b66:	f000 b8a7 	b.w	8008cb8 <__malloc_unlock>
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	d90b      	bls.n	8008b86 <_free_r+0x4e>
 8008b6e:	6821      	ldr	r1, [r4, #0]
 8008b70:	1862      	adds	r2, r4, r1
 8008b72:	4293      	cmp	r3, r2
 8008b74:	bf04      	itt	eq
 8008b76:	681a      	ldreq	r2, [r3, #0]
 8008b78:	685b      	ldreq	r3, [r3, #4]
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	bf04      	itt	eq
 8008b7e:	1852      	addeq	r2, r2, r1
 8008b80:	6022      	streq	r2, [r4, #0]
 8008b82:	602c      	str	r4, [r5, #0]
 8008b84:	e7ec      	b.n	8008b60 <_free_r+0x28>
 8008b86:	461a      	mov	r2, r3
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	b10b      	cbz	r3, 8008b90 <_free_r+0x58>
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	d9fa      	bls.n	8008b86 <_free_r+0x4e>
 8008b90:	6811      	ldr	r1, [r2, #0]
 8008b92:	1855      	adds	r5, r2, r1
 8008b94:	42a5      	cmp	r5, r4
 8008b96:	d10b      	bne.n	8008bb0 <_free_r+0x78>
 8008b98:	6824      	ldr	r4, [r4, #0]
 8008b9a:	4421      	add	r1, r4
 8008b9c:	1854      	adds	r4, r2, r1
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	d1dd      	bne.n	8008b60 <_free_r+0x28>
 8008ba4:	681c      	ldr	r4, [r3, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	6053      	str	r3, [r2, #4]
 8008baa:	4421      	add	r1, r4
 8008bac:	6011      	str	r1, [r2, #0]
 8008bae:	e7d7      	b.n	8008b60 <_free_r+0x28>
 8008bb0:	d902      	bls.n	8008bb8 <_free_r+0x80>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	6003      	str	r3, [r0, #0]
 8008bb6:	e7d3      	b.n	8008b60 <_free_r+0x28>
 8008bb8:	6825      	ldr	r5, [r4, #0]
 8008bba:	1961      	adds	r1, r4, r5
 8008bbc:	428b      	cmp	r3, r1
 8008bbe:	bf04      	itt	eq
 8008bc0:	6819      	ldreq	r1, [r3, #0]
 8008bc2:	685b      	ldreq	r3, [r3, #4]
 8008bc4:	6063      	str	r3, [r4, #4]
 8008bc6:	bf04      	itt	eq
 8008bc8:	1949      	addeq	r1, r1, r5
 8008bca:	6021      	streq	r1, [r4, #0]
 8008bcc:	6054      	str	r4, [r2, #4]
 8008bce:	e7c7      	b.n	8008b60 <_free_r+0x28>
 8008bd0:	b003      	add	sp, #12
 8008bd2:	bd30      	pop	{r4, r5, pc}
 8008bd4:	200000c8 	.word	0x200000c8

08008bd8 <_malloc_r>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	1ccd      	adds	r5, r1, #3
 8008bdc:	f025 0503 	bic.w	r5, r5, #3
 8008be0:	3508      	adds	r5, #8
 8008be2:	2d0c      	cmp	r5, #12
 8008be4:	bf38      	it	cc
 8008be6:	250c      	movcc	r5, #12
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	4606      	mov	r6, r0
 8008bec:	db01      	blt.n	8008bf2 <_malloc_r+0x1a>
 8008bee:	42a9      	cmp	r1, r5
 8008bf0:	d903      	bls.n	8008bfa <_malloc_r+0x22>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6033      	str	r3, [r6, #0]
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfa:	f000 f857 	bl	8008cac <__malloc_lock>
 8008bfe:	4921      	ldr	r1, [pc, #132]	; (8008c84 <_malloc_r+0xac>)
 8008c00:	680a      	ldr	r2, [r1, #0]
 8008c02:	4614      	mov	r4, r2
 8008c04:	b99c      	cbnz	r4, 8008c2e <_malloc_r+0x56>
 8008c06:	4f20      	ldr	r7, [pc, #128]	; (8008c88 <_malloc_r+0xb0>)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	b923      	cbnz	r3, 8008c16 <_malloc_r+0x3e>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f83c 	bl	8008c8c <_sbrk_r>
 8008c14:	6038      	str	r0, [r7, #0]
 8008c16:	4629      	mov	r1, r5
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 f837 	bl	8008c8c <_sbrk_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d123      	bne.n	8008c6a <_malloc_r+0x92>
 8008c22:	230c      	movs	r3, #12
 8008c24:	6033      	str	r3, [r6, #0]
 8008c26:	4630      	mov	r0, r6
 8008c28:	f000 f846 	bl	8008cb8 <__malloc_unlock>
 8008c2c:	e7e3      	b.n	8008bf6 <_malloc_r+0x1e>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	1b5b      	subs	r3, r3, r5
 8008c32:	d417      	bmi.n	8008c64 <_malloc_r+0x8c>
 8008c34:	2b0b      	cmp	r3, #11
 8008c36:	d903      	bls.n	8008c40 <_malloc_r+0x68>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	441c      	add	r4, r3
 8008c3c:	6025      	str	r5, [r4, #0]
 8008c3e:	e004      	b.n	8008c4a <_malloc_r+0x72>
 8008c40:	6863      	ldr	r3, [r4, #4]
 8008c42:	42a2      	cmp	r2, r4
 8008c44:	bf0c      	ite	eq
 8008c46:	600b      	streq	r3, [r1, #0]
 8008c48:	6053      	strne	r3, [r2, #4]
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f000 f834 	bl	8008cb8 <__malloc_unlock>
 8008c50:	f104 000b 	add.w	r0, r4, #11
 8008c54:	1d23      	adds	r3, r4, #4
 8008c56:	f020 0007 	bic.w	r0, r0, #7
 8008c5a:	1ac2      	subs	r2, r0, r3
 8008c5c:	d0cc      	beq.n	8008bf8 <_malloc_r+0x20>
 8008c5e:	1a1b      	subs	r3, r3, r0
 8008c60:	50a3      	str	r3, [r4, r2]
 8008c62:	e7c9      	b.n	8008bf8 <_malloc_r+0x20>
 8008c64:	4622      	mov	r2, r4
 8008c66:	6864      	ldr	r4, [r4, #4]
 8008c68:	e7cc      	b.n	8008c04 <_malloc_r+0x2c>
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d0e3      	beq.n	8008c3c <_malloc_r+0x64>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 f808 	bl	8008c8c <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d1dd      	bne.n	8008c3c <_malloc_r+0x64>
 8008c80:	e7cf      	b.n	8008c22 <_malloc_r+0x4a>
 8008c82:	bf00      	nop
 8008c84:	200000c8 	.word	0x200000c8
 8008c88:	200000cc 	.word	0x200000cc

08008c8c <_sbrk_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d06      	ldr	r5, [pc, #24]	; (8008ca8 <_sbrk_r+0x1c>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7f8 f846 	bl	8000d28 <_sbrk>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_sbrk_r+0x1a>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_sbrk_r+0x1a>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	200008fc 	.word	0x200008fc

08008cac <__malloc_lock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_lock+0x8>)
 8008cae:	f000 b809 	b.w	8008cc4 <__retarget_lock_acquire_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20000904 	.word	0x20000904

08008cb8 <__malloc_unlock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_unlock+0x8>)
 8008cba:	f000 b804 	b.w	8008cc6 <__retarget_lock_release_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20000904 	.word	0x20000904

08008cc4 <__retarget_lock_acquire_recursive>:
 8008cc4:	4770      	bx	lr

08008cc6 <__retarget_lock_release_recursive>:
 8008cc6:	4770      	bx	lr

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
