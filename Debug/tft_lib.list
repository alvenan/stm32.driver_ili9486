
tft_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000088c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000920  20000920  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001db1f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fa6  00000000  00000000  0003dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  00042e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cc4  00000000  00000000  00043ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018be6  00000000  00000000  00067bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc289  00000000  00000000  0008079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ca23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e7c  00000000  00000000  0014ca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c34 	.word	0x08008c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008c34 	.word	0x08008c34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 fa15 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f843 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f975 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8a9 	bl	8000628 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8d5 	bl	8000684 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f903 	bl	80006e4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 ff97 	bl	8008410 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004e2:	f000 f935 	bl	8000750 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	tft_init(&hspi2,
 80004e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80004ea:	9304      	str	r3, [sp, #16]
 80004ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80004f0:	9303      	str	r3, [sp, #12]
 80004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <main+0x88>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x88>)
 8000504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000508:	4910      	ldr	r1, [pc, #64]	; (800054c <main+0x8c>)
 800050a:	4811      	ldr	r0, [pc, #68]	; (8000550 <main+0x90>)
 800050c:	f000 fc68 	bl	8000de0 <tft_init>
	LCD_CS_GPIO_Port, LCD_CS_Pin,
	LCD_DC_GPIO_Port, LCD_DC_Pin,
	LCD_RST_GPIO_Port, LCD_RST_Pin, 480, 320);
	tft_set_rotation(4);
 8000510:	2004      	movs	r0, #4
 8000512:	f000 fd5b 	bl	8000fcc <tft_set_rotation>
	tft_fill_screen(COLOR_WHITE);
 8000516:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800051a:	f000 fe4b 	bl	80011b4 <tft_fill_screen>
//			COLOR_YELLOW, 10);

//	extern const unsigned short batman_256x256[65536];
//	tft_draw_RGB_bitmap(150, 50, batman_256x256, 256, 256);

	tft_draw_char(10, 10, 'A', COLOR_CYAN, COLOR_BLACK, 12);
 800051e:	230c      	movs	r3, #12
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2300      	movs	r3, #0
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800052a:	2241      	movs	r2, #65	; 0x41
 800052c:	210a      	movs	r1, #10
 800052e:	200a      	movs	r0, #10
 8000530:	f000 ffaa 	bl	8001488 <tft_draw_char>
//	test_round_rects();
	tft_fill_circle(100, 100, 30, COLOR_GREENYELLOW);
 8000534:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000538:	221e      	movs	r2, #30
 800053a:	2164      	movs	r1, #100	; 0x64
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 feb4 	bl	80012aa <tft_fill_circle>
  /* USER CODE BEGIN WHILE */
	while (1) {
//	  test_fill_screen();
//	  test_lines2(COLOR_WHITE, COLOR_ORANGE);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000542:	f007 ff8b 	bl	800845c <MX_USB_HOST_Process>
 8000546:	e7fc      	b.n	8000542 <main+0x82>
 8000548:	40021000 	.word	0x40021000
 800054c:	40020400 	.word	0x40020400
 8000550:	200000e4 	.word	0x200000e4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 fa96 	bl	8008a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f83c 	bl	8004658 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 fa0b 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fa9d 	bl	8004b48 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 f9f4 	bl	8000a00 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_I2C1_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x50>)
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_I2C1_Init+0x58>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_I2C1_Init+0x50>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_I2C1_Init+0x50>)
 8000666:	f003 fa13 	bl	8003a90 <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f9c6 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000013c 	.word	0x2000013c
 800067c:	40005400 	.word	0x40005400
 8000680:	000186a0 	.word	0x000186a0

08000684 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2S3_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_I2S3_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <MX_I2S3_Init+0x5c>)
 80006ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2S3_Init+0x54>)
 80006c4:	f003 fb28 	bl	8003d18 <HAL_I2S_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ce:	f000 f997 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001e8 	.word	0x200001e8
 80006dc:	40003c00 	.word	0x40003c00
 80006e0:	00017700 	.word	0x00017700

080006e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_SPI1_Init+0x64>)
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_SPI1_Init+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI1_Init+0x64>)
 8000730:	220a      	movs	r2, #10
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_SPI1_Init+0x64>)
 8000736:	f004 fd2f 	bl	8005198 <HAL_SPI_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000740:	f000 f95e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000190 	.word	0x20000190
 800074c:	40013000 	.word	0x40013000

08000750 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI2_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI2_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI2_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI2_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI2_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI2_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI2_Init+0x64>)
 80007a2:	f004 fcf9 	bl	8005198 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f928 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000e4 	.word	0x200000e4
 80007b8:	40003800 	.word	0x40003800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b84      	ldr	r3, [pc, #528]	; (80009e8 <MX_GPIO_Init+0x22c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a83      	ldr	r2, [pc, #524]	; (80009e8 <MX_GPIO_Init+0x22c>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <MX_GPIO_Init+0x22c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <MX_GPIO_Init+0x22c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a7c      	ldr	r2, [pc, #496]	; (80009e8 <MX_GPIO_Init+0x22c>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b7a      	ldr	r3, [pc, #488]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b76      	ldr	r3, [pc, #472]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a75      	ldr	r2, [pc, #468]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b73      	ldr	r3, [pc, #460]	; (80009e8 <MX_GPIO_Init+0x22c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <MX_GPIO_Init+0x22c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a6e      	ldr	r2, [pc, #440]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b68      	ldr	r3, [pc, #416]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a67      	ldr	r2, [pc, #412]	; (80009e8 <MX_GPIO_Init+0x22c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b65      	ldr	r3, [pc, #404]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a60      	ldr	r2, [pc, #384]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b5e      	ldr	r3, [pc, #376]	; (80009e8 <MX_GPIO_Init+0x22c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000880:	485a      	ldr	r0, [pc, #360]	; (80009ec <MX_GPIO_Init+0x230>)
 8000882:	f001 fb7b 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2101      	movs	r1, #1
 800088a:	4859      	ldr	r0, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x234>)
 800088c:	f001 fb76 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000896:	4857      	ldr	r0, [pc, #348]	; (80009f4 <MX_GPIO_Init+0x238>)
 8000898:	f001 fb70 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089c:	2200      	movs	r2, #0
 800089e:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a2:	4855      	ldr	r0, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x23c>)
 80008a4:	f001 fb6a 	bl	8001f7c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80008a8:	f24a 0308 	movw	r3, #40968	; 0xa008
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	484a      	ldr	r0, [pc, #296]	; (80009ec <MX_GPIO_Init+0x230>)
 80008c2:	f001 f9bf 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x234>)
 80008de:	f001 f9b1 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483c      	ldr	r0, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x234>)
 80008fe:	f001 f9a1 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4839      	ldr	r0, [pc, #228]	; (80009fc <MX_GPIO_Init+0x240>)
 8000918:	f001 f994 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4831      	ldr	r0, [pc, #196]	; (80009f4 <MX_GPIO_Init+0x238>)
 8000930:	f001 f988 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800093a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4828      	ldr	r0, [pc, #160]	; (80009ec <MX_GPIO_Init+0x230>)
 800094c:	f001 f97a 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4821      	ldr	r0, [pc, #132]	; (80009f4 <MX_GPIO_Init+0x238>)
 800096e:	f001 f969 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|LCD_CS_Pin;
 8000972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x238>)
 800098c:	f001 f95a 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000990:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000994:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0x23c>)
 80009aa:	f001 f94b 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_GPIO_Init+0x23c>)
 80009c2:	f001 f93f 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x230>)
 80009dc:	f001 f932 	bl	8001c44 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020000 	.word	0x40020000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f001 f8b8 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	2312      	movs	r3, #18
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab8:	f001 f8c4 	bl	8001c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <HAL_I2S_MspInit+0xf0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d15a      	bne.n	8000bd2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b20:	23c0      	movs	r3, #192	; 0xc0
 8000b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 f9f3 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b38:	f7ff ff62 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_I2S_MspInit+0xf4>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <HAL_I2S_MspInit+0xf8>)
 8000bac:	f001 f84a 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <HAL_I2S_MspInit+0xfc>)
 8000bce:	f001 f839 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40003c00 	.word	0x40003c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800

08000bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_SPI_MspInit+0xe8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12c      	bne.n	8000c68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_SPI_MspInit+0xf0>)
 8000c62:	f000 ffef 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c66:	e031      	b.n	8000ccc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_SPI_MspInit+0xf4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12c      	bne.n	8000ccc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0xec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000caa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <HAL_SPI_MspInit+0xf8>)
 8000cc8:	f000 ffbc 	bl	8001c44 <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40003800 	.word	0x40003800
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 fe30 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f001 fb9f 	bl	8002484 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000060c 	.word	0x2000060c

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f007 fe4e 	bl	8008a20 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	200000b0 	.word	0x200000b0
 8000db8:	20000920 	.word	0x20000920

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <tft_init>:
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

void tft_init(SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
		GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port,
		uint16_t rst_pin, uint32_t width, uint32_t height) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]

	tft_width = width;
 8000df0:	4a73      	ldr	r2, [pc, #460]	; (8000fc0 <tft_init+0x1e0>)
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	6013      	str	r3, [r2, #0]
	tft_height = height;
 8000df6:	4a73      	ldr	r2, [pc, #460]	; (8000fc4 <tft_init+0x1e4>)
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	6013      	str	r3, [r2, #0]
	tft_pixel_count = width * height;
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	4a70      	ldr	r2, [pc, #448]	; (8000fc8 <tft_init+0x1e8>)
 8000e06:	6013      	str	r3, [r2, #0]

	tft_interface_init(spi, cs_port, cs_pin, dc_port, dc_pin, rst_port,
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	8c3b      	ldrh	r3, [r7, #32]
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	8b3b      	ldrh	r3, [r7, #24]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 fd08 	bl	8001830 <tft_interface_init>
			rst_pin);

	tft_reset_off();
 8000e20:	f000 fcf6 	bl	8001810 <tft_reset_off>
	tft_reset_on();
 8000e24:	f000 fce4 	bl	80017f0 <tft_reset_on>
	tft_reset_off();
 8000e28:	f000 fcf2 	bl	8001810 <tft_reset_off>

	tft_send_cmd(TFTCMD_NOP);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fc7b 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x00);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 fcaa 	bl	800178c <tft_send_data>
	tft_send_cmd(TFTCMD_SLEEP_OUT);
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f000 fc75 	bl	8001728 <tft_send_cmd>

	tft_delay(150);
 8000e3e:	2096      	movs	r0, #150	; 0x96
 8000e40:	f000 fdca 	bl	80019d8 <HAL_Delay>
#ifdef TFT_ILI9486
	tft_send_cmd(TFTCMD_PIXEL_FORMAT);
 8000e44:	203a      	movs	r0, #58	; 0x3a
 8000e46:	f000 fc6f 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x55);
 8000e4a:	2055      	movs	r0, #85	; 0x55
 8000e4c:	f000 fc9e 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_MAC);
 8000e50:	2036      	movs	r0, #54	; 0x36
 8000e52:	f000 fc69 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x48);
 8000e56:	2048      	movs	r0, #72	; 0x48
 8000e58:	f000 fc98 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_POWER3);
 8000e5c:	20c2      	movs	r0, #194	; 0xc2
 8000e5e:	f000 fc63 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x44);
 8000e62:	2044      	movs	r0, #68	; 0x44
 8000e64:	f000 fc92 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_VCOM1);
 8000e68:	20c5      	movs	r0, #197	; 0xc5
 8000e6a:	f000 fc5d 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x00);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fc8c 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 fc89 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 fc86 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fc83 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_PGAMMA);
 8000e86:	20e0      	movs	r0, #224	; 0xe0
 8000e88:	f000 fc4e 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x0f);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f000 fc7d 	bl	800178c <tft_send_data>
	tft_send_data(0x1f);
 8000e92:	201f      	movs	r0, #31
 8000e94:	f000 fc7a 	bl	800178c <tft_send_data>
	tft_send_data(0x1c);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f000 fc77 	bl	800178c <tft_send_data>
	tft_send_data(0x0c);
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f000 fc74 	bl	800178c <tft_send_data>
	tft_send_data(0x0f);
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f000 fc71 	bl	800178c <tft_send_data>
	tft_send_data(0x08);
 8000eaa:	2008      	movs	r0, #8
 8000eac:	f000 fc6e 	bl	800178c <tft_send_data>
	tft_send_data(0x48);
 8000eb0:	2048      	movs	r0, #72	; 0x48
 8000eb2:	f000 fc6b 	bl	800178c <tft_send_data>
	tft_send_data(0x98);
 8000eb6:	2098      	movs	r0, #152	; 0x98
 8000eb8:	f000 fc68 	bl	800178c <tft_send_data>
	tft_send_data(0x37);
 8000ebc:	2037      	movs	r0, #55	; 0x37
 8000ebe:	f000 fc65 	bl	800178c <tft_send_data>
	tft_send_data(0x0a);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f000 fc62 	bl	800178c <tft_send_data>
	tft_send_data(0x13);
 8000ec8:	2013      	movs	r0, #19
 8000eca:	f000 fc5f 	bl	800178c <tft_send_data>
	tft_send_data(0x04);
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f000 fc5c 	bl	800178c <tft_send_data>
	tft_send_data(0x11);
 8000ed4:	2011      	movs	r0, #17
 8000ed6:	f000 fc59 	bl	800178c <tft_send_data>
	tft_send_data(0x0d);
 8000eda:	200d      	movs	r0, #13
 8000edc:	f000 fc56 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 fc53 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_NGAMMA);
 8000ee6:	20e1      	movs	r0, #225	; 0xe1
 8000ee8:	f000 fc1e 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x0f);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 fc4d 	bl	800178c <tft_send_data>
	tft_send_data(0x32);
 8000ef2:	2032      	movs	r0, #50	; 0x32
 8000ef4:	f000 fc4a 	bl	800178c <tft_send_data>
	tft_send_data(0x2e);
 8000ef8:	202e      	movs	r0, #46	; 0x2e
 8000efa:	f000 fc47 	bl	800178c <tft_send_data>
	tft_send_data(0x0b);
 8000efe:	200b      	movs	r0, #11
 8000f00:	f000 fc44 	bl	800178c <tft_send_data>
	tft_send_data(0x0d);
 8000f04:	200d      	movs	r0, #13
 8000f06:	f000 fc41 	bl	800178c <tft_send_data>
	tft_send_data(0x05);
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f000 fc3e 	bl	800178c <tft_send_data>
	tft_send_data(0x47);
 8000f10:	2047      	movs	r0, #71	; 0x47
 8000f12:	f000 fc3b 	bl	800178c <tft_send_data>
	tft_send_data(0x75);
 8000f16:	2075      	movs	r0, #117	; 0x75
 8000f18:	f000 fc38 	bl	800178c <tft_send_data>
	tft_send_data(0x37);
 8000f1c:	2037      	movs	r0, #55	; 0x37
 8000f1e:	f000 fc35 	bl	800178c <tft_send_data>
	tft_send_data(0x06);
 8000f22:	2006      	movs	r0, #6
 8000f24:	f000 fc32 	bl	800178c <tft_send_data>
	tft_send_data(0x10);
 8000f28:	2010      	movs	r0, #16
 8000f2a:	f000 fc2f 	bl	800178c <tft_send_data>
	tft_send_data(0x03);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 fc2c 	bl	800178c <tft_send_data>
	tft_send_data(0x24);
 8000f34:	2024      	movs	r0, #36	; 0x24
 8000f36:	f000 fc29 	bl	800178c <tft_send_data>
	tft_send_data(0x20);
 8000f3a:	2020      	movs	r0, #32
 8000f3c:	f000 fc26 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fc23 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_GAMMA_CTRL1);
 8000f46:	20e2      	movs	r0, #226	; 0xe2
 8000f48:	f000 fbee 	bl	8001728 <tft_send_cmd>
	tft_send_data(0x0f);
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	f000 fc1d 	bl	800178c <tft_send_data>
	tft_send_data(0x32);
 8000f52:	2032      	movs	r0, #50	; 0x32
 8000f54:	f000 fc1a 	bl	800178c <tft_send_data>
	tft_send_data(0x2e);
 8000f58:	202e      	movs	r0, #46	; 0x2e
 8000f5a:	f000 fc17 	bl	800178c <tft_send_data>
	tft_send_data(0x0b);
 8000f5e:	200b      	movs	r0, #11
 8000f60:	f000 fc14 	bl	800178c <tft_send_data>
	tft_send_data(0x0d);
 8000f64:	200d      	movs	r0, #13
 8000f66:	f000 fc11 	bl	800178c <tft_send_data>
	tft_send_data(0x05);
 8000f6a:	2005      	movs	r0, #5
 8000f6c:	f000 fc0e 	bl	800178c <tft_send_data>
	tft_send_data(0x47);
 8000f70:	2047      	movs	r0, #71	; 0x47
 8000f72:	f000 fc0b 	bl	800178c <tft_send_data>
	tft_send_data(0x75);
 8000f76:	2075      	movs	r0, #117	; 0x75
 8000f78:	f000 fc08 	bl	800178c <tft_send_data>
	tft_send_data(0x37);
 8000f7c:	2037      	movs	r0, #55	; 0x37
 8000f7e:	f000 fc05 	bl	800178c <tft_send_data>
	tft_send_data(0x06);
 8000f82:	2006      	movs	r0, #6
 8000f84:	f000 fc02 	bl	800178c <tft_send_data>
	tft_send_data(0x10);
 8000f88:	2010      	movs	r0, #16
 8000f8a:	f000 fbff 	bl	800178c <tft_send_data>
	tft_send_data(0x03);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 fbfc 	bl	800178c <tft_send_data>
	tft_send_data(0x24);
 8000f94:	2024      	movs	r0, #36	; 0x24
 8000f96:	f000 fbf9 	bl	800178c <tft_send_data>
	tft_send_data(0x20);
 8000f9a:	2020      	movs	r0, #32
 8000f9c:	f000 fbf6 	bl	800178c <tft_send_data>
	tft_send_data(0x00);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fbf3 	bl	800178c <tft_send_data>
#endif
	tft_send_cmd(TFTCMD_SLEEP_OUT);
 8000fa6:	2011      	movs	r0, #17
 8000fa8:	f000 fbbe 	bl	8001728 <tft_send_cmd>
	tft_send_cmd(TFTCMD_DISPLAY_ON);
 8000fac:	2029      	movs	r0, #41	; 0x29
 8000fae:	f000 fbbb 	bl	8001728 <tft_send_cmd>

	tft_delay(150);
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	f000 fd10 	bl	80019d8 <HAL_Delay>

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000b4 	.word	0x200000b4
 8000fc4:	200000b8 	.word	0x200000b8
 8000fc8:	200000bc 	.word	0x200000bc

08000fcc <tft_set_rotation>:

void tft_set_rotation(uint8_t rotate) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	tft_send_cmd(MEMCONTROL);
 8000fd6:	2036      	movs	r0, #54	; 0x36
 8000fd8:	f000 fba6 	bl	8001728 <tft_send_cmd>
	switch (rotate) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d827      	bhi.n	8001034 <tft_set_rotation+0x68>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <tft_set_rotation+0x20>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	0800100b 	.word	0x0800100b
 8000ff4:	08001019 	.word	0x08001019
 8000ff8:	08001027 	.word	0x08001027
	case 1:
		rot_num = 1;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <tft_set_rotation+0x80>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		tft_send_data(
 8001002:	2088      	movs	r0, #136	; 0x88
 8001004:	f000 fbc2 	bl	800178c <tft_send_data>
		MADCTL_MY | MADCTL_BGR);
		break;
 8001008:	e01b      	b.n	8001042 <tft_set_rotation+0x76>
	case 2:
		rot_num = 2;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <tft_set_rotation+0x80>)
 800100c:	2202      	movs	r2, #2
 800100e:	701a      	strb	r2, [r3, #0]
		tft_send_data(
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f000 fbbb 	bl	800178c <tft_send_data>
		MADCTL_MV | MADCTL_BGR);
		break;
 8001016:	e014      	b.n	8001042 <tft_set_rotation+0x76>
	case 3:
		rot_num = 3;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <tft_set_rotation+0x80>)
 800101a:	2203      	movs	r2, #3
 800101c:	701a      	strb	r2, [r3, #0]
		tft_send_data(
 800101e:	2048      	movs	r0, #72	; 0x48
 8001020:	f000 fbb4 	bl	800178c <tft_send_data>
		MADCTL_MX | MADCTL_BGR);
		break;
 8001024:	e00d      	b.n	8001042 <tft_set_rotation+0x76>
	case 4:
		rot_num = 4;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <tft_set_rotation+0x80>)
 8001028:	2204      	movs	r2, #4
 800102a:	701a      	strb	r2, [r3, #0]
		tft_send_data(
 800102c:	20e8      	movs	r0, #232	; 0xe8
 800102e:	f000 fbad 	bl	800178c <tft_send_data>
		MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
		break;
 8001032:	e006      	b.n	8001042 <tft_set_rotation+0x76>
	default:
		rot_num = 1;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <tft_set_rotation+0x80>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
		tft_send_data(
 800103a:	2088      	movs	r0, #136	; 0x88
 800103c:	f000 fba6 	bl	800178c <tft_send_data>
		MADCTL_MY | MADCTL_BGR);
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <tft_cursor_position>:
void tft_cursor_position(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4623      	mov	r3, r4
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	4603      	mov	r3, r0
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	803b      	strh	r3, [r7, #0]

	tft_send_cmd( TFTCMD_COLUMN_ADDR);
 800106e:	202a      	movs	r0, #42	; 0x2a
 8001070:	f000 fb5a 	bl	8001728 <tft_send_cmd>
	tft_send_data(x0 >> 8);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb85 	bl	800178c <tft_send_data>
	tft_send_data(x0 & 0xff);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fb80 	bl	800178c <tft_send_data>
	tft_send_data(x1 >> 8);
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fb79 	bl	800178c <tft_send_data>
	tft_send_data(x1 & 0xff);
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fb74 	bl	800178c <tft_send_data>

	tft_send_cmd( TFTCMD_PAGE_ADDR);
 80010a4:	202b      	movs	r0, #43	; 0x2b
 80010a6:	f000 fb3f 	bl	8001728 <tft_send_cmd>
	tft_send_data(y0 >> 8);
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fb6a 	bl	800178c <tft_send_data>
	tft_send_data(y0 & 0xff);
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb65 	bl	800178c <tft_send_data>
	tft_send_data(y1 >> 8);
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fb5e 	bl	800178c <tft_send_data>
	tft_send_data(y1 & 0xff);
 80010d0:	883b      	ldrh	r3, [r7, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fb59 	bl	800178c <tft_send_data>

	tft_send_cmd(TFTCMD_GRAM);
 80010da:	202c      	movs	r0, #44	; 0x2c
 80010dc:	f000 fb24 	bl	8001728 <tft_send_cmd>
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <tft_main_draw>:

void tft_main_draw(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		uint16_t color) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	80fb      	strh	r3, [r7, #6]
 80010fa:	4603      	mov	r3, r0
 80010fc:	80bb      	strh	r3, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	803b      	strh	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	883a      	ldrh	r2, [r7, #0]
 8001110:	1c51      	adds	r1, r2, #1
 8001112:	88ba      	ldrh	r2, [r7, #4]
 8001114:	1a8a      	subs	r2, r1, r2
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]

	if (n > tft_pixel_count)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <tft_main_draw+0x80>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	429a      	cmp	r2, r3
 8001124:	d902      	bls.n	800112c <tft_main_draw+0x44>
		n = tft_pixel_count;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <tft_main_draw+0x80>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]

	tft_cursor_position(x0, y0, x1, y1);
 800112c:	883b      	ldrh	r3, [r7, #0]
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	88b9      	ldrh	r1, [r7, #4]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	f7ff ff8c 	bl	8001050 <tft_cursor_position>
	for (; n > 0; n--) {
 8001138:	e00e      	b.n	8001158 <tft_main_draw+0x70>
		tft_send_data(color >> 8);
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fb22 	bl	800178c <tft_send_data>
		tft_send_data(color & 0xff);
 8001148:	8c3b      	ldrh	r3, [r7, #32]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fb1d 	bl	800178c <tft_send_data>
	for (; n > 0; n--) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3b01      	subs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ed      	bne.n	800113a <tft_main_draw+0x52>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	200000bc 	.word	0x200000bc

0800116c <tft_fill_rect>:

void tft_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af02      	add	r7, sp, #8
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	4603      	mov	r3, r0
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	807b      	strh	r3, [r7, #2]
 8001186:	4613      	mov	r3, r2
 8001188:	803b      	strh	r3, [r7, #0]
	tft_main_draw(x, y, x + w, y + h, color);
 800118a:	88f8      	ldrh	r0, [r7, #6]
 800118c:	88b9      	ldrh	r1, [r7, #4]
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	4413      	add	r3, r2
 8001194:	b29c      	uxth	r4, r3
 8001196:	88ba      	ldrh	r2, [r7, #4]
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	b29a      	uxth	r2, r3
 800119e:	8b3b      	ldrh	r3, [r7, #24]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	4622      	mov	r2, r4
 80011a6:	f7ff ff9f 	bl	80010e8 <tft_main_draw>
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
	...

080011b4 <tft_fill_screen>:

void tft_fill_screen(uint16_t color) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]

	if (rot_num == 1 || rot_num == 3)
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <tft_fill_screen+0x80>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d003      	beq.n	80011ce <tft_fill_screen+0x1a>
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <tft_fill_screen+0x80>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d113      	bne.n	80011f6 <tft_fill_screen+0x42>
		tft_fill_rect(0, 0, tft_height - 1, tft_width - 1, color);
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <tft_fill_screen+0x84>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <tft_fill_screen+0x88>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b219      	sxth	r1, r3
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff ffbc 	bl	800116c <tft_fill_rect>
	else if (rot_num == 2 || rot_num == 4)
		tft_fill_rect(0, 0, tft_width - 1, tft_height - 1, color);

}
 80011f4:	e01a      	b.n	800122c <tft_fill_screen+0x78>
	else if (rot_num == 2 || rot_num == 4)
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <tft_fill_screen+0x80>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d003      	beq.n	8001206 <tft_fill_screen+0x52>
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <tft_fill_screen+0x80>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d112      	bne.n	800122c <tft_fill_screen+0x78>
		tft_fill_rect(0, 0, tft_width - 1, tft_height - 1, color);
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <tft_fill_screen+0x88>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <tft_fill_screen+0x84>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	3b01      	subs	r3, #1
 800121a:	b29b      	uxth	r3, r3
 800121c:	b219      	sxth	r1, r3
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	460b      	mov	r3, r1
 8001224:	2100      	movs	r1, #0
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ffa0 	bl	800116c <tft_fill_rect>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000004 	.word	0x20000004
 8001238:	200000b8 	.word	0x200000b8
 800123c:	200000b4 	.word	0x200000b4

08001240 <tft_draw_pixel>:

void tft_draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	460b      	mov	r3, r1
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	807b      	strh	r3, [r7, #2]
	tft_main_draw(x, y, x, y, color);
 8001252:	88bc      	ldrh	r4, [r7, #4]
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	88b9      	ldrh	r1, [r7, #4]
 8001258:	88f8      	ldrh	r0, [r7, #6]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	f7ff ff42 	bl	80010e8 <tft_main_draw>
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}

0800126c <tft_draw_vertical_line>:
void tft_draw_horizontal_line(uint16_t x, uint16_t y, uint16_t w,
		uint16_t color) {
	tft_main_draw(x, y, x + w, y, color);
}

void tft_draw_vertical_line(uint16_t x, uint16_t y, uint16_t w, uint16_t color) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af02      	add	r7, sp, #8
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	4603      	mov	r3, r0
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]
 8001286:	4613      	mov	r3, r2
 8001288:	803b      	strh	r3, [r7, #0]
	tft_main_draw(x, y, x, y + w, color);
 800128a:	88ba      	ldrh	r2, [r7, #4]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4413      	add	r3, r2
 8001290:	b29c      	uxth	r4, r3
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	88b9      	ldrh	r1, [r7, #4]
 8001296:	88f8      	ldrh	r0, [r7, #6]
 8001298:	883b      	ldrh	r3, [r7, #0]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	f7ff ff23 	bl	80010e8 <tft_main_draw>
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}

080012aa <tft_fill_circle>:
		tft_draw_pixel(x0 + y, y0 - x, color);
		tft_draw_pixel(x0 - y, y0 - x, color);
	}
}

void tft_fill_circle(int16_t x, int16_t y, int16_t r, uint16_t color) {
 80012aa:	b590      	push	{r4, r7, lr}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af02      	add	r7, sp, #8
 80012b0:	4604      	mov	r4, r0
 80012b2:	4608      	mov	r0, r1
 80012b4:	4611      	mov	r1, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	4623      	mov	r3, r4
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	4603      	mov	r3, r0
 80012be:	80bb      	strh	r3, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	803b      	strh	r3, [r7, #0]
	tft_draw_vertical_line(x, y - r, 2 * r + 1, color);
 80012c8:	88f8      	ldrh	r0, [r7, #6]
 80012ca:	88ba      	ldrh	r2, [r7, #4]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b299      	uxth	r1, r3
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	883b      	ldrh	r3, [r7, #0]
 80012de:	f7ff ffc5 	bl	800126c <tft_draw_vertical_line>
	tft_fill_circle_helper(x, y, r, 3, 0, color);
 80012e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012ee:	883b      	ldrh	r3, [r7, #0]
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 f804 	bl	8001304 <tft_fill_circle_helper>
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}

08001304 <tft_fill_circle_helper>:
		}
	}
}

void tft_fill_circle_helper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
		int16_t delta, uint16_t color) {
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	4603      	mov	r3, r0
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]
 800131e:	4613      	mov	r3, r2
 8001320:	707b      	strb	r3, [r7, #1]

	int16_t f = 1 - r;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	f1c3 0301 	rsb	r3, r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	461a      	mov	r2, r3
 8001334:	03d2      	lsls	r2, r2, #15
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8001346:	8a3b      	ldrh	r3, [r7, #16]
 8001348:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	817b      	strh	r3, [r7, #10]

	delta++;
 800134e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001352:	b29b      	uxth	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	853b      	strh	r3, [r7, #40]	; 0x28

	while (x < y) {
 800135a:	e089      	b.n	8001470 <tft_fill_circle_helper+0x16c>
		if (f >= 0) {
 800135c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0e      	blt.n	8001382 <tft_fill_circle_helper+0x7e>
			y--;
 8001364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001370:	8a7b      	ldrh	r3, [r7, #18]
 8001372:	3302      	adds	r3, #2
 8001374:	b29b      	uxth	r3, r3
 8001376:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001378:	8afa      	ldrh	r2, [r7, #22]
 800137a:	8a7b      	ldrh	r3, [r7, #18]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001382:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800138e:	8abb      	ldrh	r3, [r7, #20]
 8001390:	3302      	adds	r3, #2
 8001392:	b29b      	uxth	r3, r3
 8001394:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001396:	8afa      	ldrh	r2, [r7, #22]
 8001398:	8abb      	ldrh	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	82fb      	strh	r3, [r7, #22]

		if (x < (y + 1)) {
 80013a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	db2b      	blt.n	8001404 <tft_fill_circle_helper+0x100>
			if (corners & 1)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d010      	beq.n	80013d8 <tft_fill_circle_helper+0xd4>
				tft_draw_vertical_line(x0 + x, y0 - y, 2 * y + delta, color);
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	8a3b      	ldrh	r3, [r7, #16]
 80013ba:	4413      	add	r3, r2
 80013bc:	b298      	uxth	r0, r3
 80013be:	88ba      	ldrh	r2, [r7, #4]
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b299      	uxth	r1, r3
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013d4:	f7ff ff4a 	bl	800126c <tft_draw_vertical_line>
			if (corners & 2)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d010      	beq.n	8001404 <tft_fill_circle_helper+0x100>
				tft_draw_vertical_line(x0 - x, y0 - y, 2 * y + delta, color);
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	8a3b      	ldrh	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b298      	uxth	r0, r3
 80013ea:	88ba      	ldrh	r2, [r7, #4]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b299      	uxth	r1, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013fa:	4413      	add	r3, r2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001400:	f7ff ff34 	bl	800126c <tft_draw_vertical_line>
		}
		if (y != py) {
 8001404:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001408:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800140c:	429a      	cmp	r2, r3
 800140e:	d02d      	beq.n	800146c <tft_fill_circle_helper+0x168>
			if (corners & 1)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d010      	beq.n	800143c <tft_fill_circle_helper+0x138>
				tft_draw_vertical_line(x0 + py, y0 - px, 2 * px + delta, color);
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	897b      	ldrh	r3, [r7, #10]
 800141e:	4413      	add	r3, r2
 8001420:	b298      	uxth	r0, r3
 8001422:	88ba      	ldrh	r2, [r7, #4]
 8001424:	89bb      	ldrh	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b299      	uxth	r1, r3
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001432:	4413      	add	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001438:	f7ff ff18 	bl	800126c <tft_draw_vertical_line>
			if (corners & 2)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d010      	beq.n	8001468 <tft_fill_circle_helper+0x164>
				tft_draw_vertical_line(x0 - py, y0 - px, 2 * px + delta, color);
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	897b      	ldrh	r3, [r7, #10]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b298      	uxth	r0, r3
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b299      	uxth	r1, r3
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800145e:	4413      	add	r3, r2
 8001460:	b29a      	uxth	r2, r3
 8001462:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001464:	f7ff ff02 	bl	800126c <tft_draw_vertical_line>
			py = y;
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 800146c:	8a3b      	ldrh	r3, [r7, #16]
 800146e:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8001470:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001478:	429a      	cmp	r2, r3
 800147a:	f6ff af6f 	blt.w	800135c <tft_fill_circle_helper+0x58>
	}
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}

08001488 <tft_draw_char>:
		tft_draw_horizontal_line(a, y, b - a + 1, color);
	}
}

void tft_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b087      	sub	sp, #28
 800148c:	af02      	add	r7, sp, #8
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	4603      	mov	r3, r0
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	70fb      	strb	r3, [r7, #3]
 80014a2:	4613      	mov	r3, r2
 80014a4:	803b      	strh	r3, [r7, #0]

	if (rot_num == 1 || rot_num == 3) {
 80014a6:	4b9b      	ldr	r3, [pc, #620]	; (8001714 <tft_draw_char+0x28c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d003      	beq.n	80014b6 <tft_draw_char+0x2e>
 80014ae:	4b99      	ldr	r3, [pc, #612]	; (8001714 <tft_draw_char+0x28c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d122      	bne.n	80014fc <tft_draw_char+0x74>
		if ((x >= tft_height) || // Clip right
 80014b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ba:	4b97      	ldr	r3, [pc, #604]	; (8001718 <tft_draw_char+0x290>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	f080 8122 	bcs.w	8001708 <tft_draw_char+0x280>
				(y >= tft_width) || // Clip bottom
 80014c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014c8:	4b94      	ldr	r3, [pc, #592]	; (800171c <tft_draw_char+0x294>)
 80014ca:	681b      	ldr	r3, [r3, #0]
		if ((x >= tft_height) || // Clip right
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f080 811b 	bcs.w	8001708 <tft_draw_char+0x280>
				((x + 6 * size - 1) < 0) || // Clip left
 80014d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80014d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	440b      	add	r3, r1
				(y >= tft_width) || // Clip bottom
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f340 810f 	ble.w	8001708 <tft_draw_char+0x280>
				((y + 8 * size - 1) < 0))   // Clip top
 80014ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
				((x + 6 * size - 1) < 0) || // Clip left
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dc24      	bgt.n	8001544 <tft_draw_char+0xbc>
			return;
 80014fa:	e105      	b.n	8001708 <tft_draw_char+0x280>

	} else if ((y >= tft_height) || // Clip right
 80014fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001500:	4b85      	ldr	r3, [pc, #532]	; (8001718 <tft_draw_char+0x290>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	f080 8101 	bcs.w	800170c <tft_draw_char+0x284>
			(x >= tft_width) || // Clip bottom
 800150a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150e:	4b83      	ldr	r3, [pc, #524]	; (800171c <tft_draw_char+0x294>)
 8001510:	681b      	ldr	r3, [r3, #0]
	} else if ((y >= tft_height) || // Clip right
 8001512:	429a      	cmp	r2, r3
 8001514:	f080 80fa 	bcs.w	800170c <tft_draw_char+0x284>
			((y + 6 * size - 1) < 0) || // Clip left
 8001518:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800151c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	440b      	add	r3, r1
			(x >= tft_width) || // Clip bottom
 800152a:	2b00      	cmp	r3, #0
 800152c:	f340 80ee 	ble.w	800170c <tft_draw_char+0x284>
			((x + 8 * size - 1) < 0))   // Clip top
 8001530:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
			((y + 6 * size - 1) < 0) || // Clip left
 800153c:	2b00      	cmp	r3, #0
 800153e:	f340 80e5 	ble.w	800170c <tft_draw_char+0x284>
 8001542:	e000      	b.n	8001546 <tft_draw_char+0xbe>
		if ((x >= tft_height) || // Clip right
 8001544:	bf00      	nop
		return;

	if (!_cp437 && (c >= 176))
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <tft_draw_char+0x298>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d105      	bne.n	800155a <tft_draw_char+0xd2>
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	2baf      	cmp	r3, #175	; 0xaf
 8001552:	d902      	bls.n	800155a <tft_draw_char+0xd2>
		c++; // Handle 'classic' charset behavior
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	3301      	adds	r3, #1
 8001558:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 6; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e0cd      	b.n	80016fc <tft_draw_char+0x274>
		uint8_t line;
		if (i == 5)
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d102      	bne.n	800156e <tft_draw_char+0xe6>
			line = 0x0;
 8001568:	2300      	movs	r3, #0
 800156a:	73bb      	strb	r3, [r7, #14]
 800156c:	e00b      	b.n	8001586 <tft_draw_char+0xfe>
		else
			line = pgm_read_byte(font1 + (c * 5) + i);
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	461a      	mov	r2, r3
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	4413      	add	r3, r2
 800157e:	4a69      	ldr	r2, [pc, #420]	; (8001724 <tft_draw_char+0x29c>)
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++) {
 8001586:	2300      	movs	r3, #0
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	e0ac      	b.n	80016e6 <tft_draw_char+0x25e>
			if (line & 0x1) {
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04d      	beq.n	8001632 <tft_draw_char+0x1aa>
				if (size == 1) // default size
 8001596:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159a:	2b01      	cmp	r3, #1
 800159c:	d110      	bne.n	80015c0 <tft_draw_char+0x138>
					tft_draw_pixel(x + i, y + j, color);
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	4413      	add	r3, r2
 80015a8:	b298      	uxth	r0, r3
 80015aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	88bb      	ldrh	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	883a      	ldrh	r2, [r7, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fe41 	bl	8001240 <tft_draw_pixel>
 80015be:	e089      	b.n	80016d4 <tft_draw_char+0x24c>
				else {  // big size
					tft_main_draw(x + i * size, y + j * size,
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	fb12 f303 	smulbb	r3, r2, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4413      	add	r3, r2
 80015d6:	b298      	uxth	r0, r3
 80015d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	fb12 f303 	smulbb	r3, r2, r3
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	b299      	uxth	r1, r3
							x + (i + 1) * size, y + (j + 1) * size, color);
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	3301      	adds	r3, #1
					tft_main_draw(x + i * size, y + j * size,
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	fb12 f303 	smulbb	r3, r2, r3
 8001602:	b29a      	uxth	r2, r3
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	4413      	add	r3, r2
 8001608:	b29c      	uxth	r4, r3
							x + (i + 1) * size, y + (j + 1) * size, color);
 800160a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800160e:	3301      	adds	r3, #1
					tft_main_draw(x + i * size, y + j * size,
 8001610:	b29a      	uxth	r2, r3
 8001612:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001616:	b29b      	uxth	r3, r3
 8001618:	fb12 f303 	smulbb	r3, r2, r3
 800161c:	b29a      	uxth	r2, r3
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	4622      	mov	r2, r4
 800162c:	f7ff fd5c 	bl	80010e8 <tft_main_draw>
 8001630:	e050      	b.n	80016d4 <tft_draw_char+0x24c>
				}
			} else if (bg != color) {
 8001632:	8c3a      	ldrh	r2, [r7, #32]
 8001634:	883b      	ldrh	r3, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d04c      	beq.n	80016d4 <tft_draw_char+0x24c>
				if (size == 1) // default size
 800163a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800163e:	2b01      	cmp	r3, #1
 8001640:	d110      	bne.n	8001664 <tft_draw_char+0x1dc>
					tft_draw_pixel(x + i, y + j, bg);
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	b29a      	uxth	r2, r3
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4413      	add	r3, r2
 800164c:	b298      	uxth	r0, r3
 800164e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001652:	b29a      	uxth	r2, r3
 8001654:	88bb      	ldrh	r3, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	8c3a      	ldrh	r2, [r7, #32]
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fdef 	bl	8001240 <tft_draw_pixel>
 8001662:	e037      	b.n	80016d4 <tft_draw_char+0x24c>
				else {  // big size
					tft_main_draw(x + i * size, y + j * size,
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	b29a      	uxth	r2, r3
 800166a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166e:	b29b      	uxth	r3, r3
 8001670:	fb12 f303 	smulbb	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4413      	add	r3, r2
 800167a:	b298      	uxth	r0, r3
 800167c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001680:	b29a      	uxth	r2, r3
 8001682:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001686:	b29b      	uxth	r3, r3
 8001688:	fb12 f303 	smulbb	r3, r2, r3
 800168c:	b29a      	uxth	r2, r3
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	b299      	uxth	r1, r3
							x + (i + 1) * size, y + (j + 1) * size, bg);
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
					tft_main_draw(x + i * size, y + j * size,
 800169a:	b29a      	uxth	r2, r3
 800169c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	fb12 f303 	smulbb	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4413      	add	r3, r2
 80016ac:	b29c      	uxth	r4, r3
							x + (i + 1) * size, y + (j + 1) * size, bg);
 80016ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016b2:	3301      	adds	r3, #1
					tft_main_draw(x + i * size, y + j * size,
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	fb12 f303 	smulbb	r3, r2, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	8c3b      	ldrh	r3, [r7, #32]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	4622      	mov	r2, r4
 80016d0:	f7ff fd0a 	bl	80010e8 <tft_main_draw>
				}
			}
			line >>= 1;
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++) {
 80016da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	737b      	strb	r3, [r7, #13]
 80016e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	f77f af4e 	ble.w	800158c <tft_draw_char+0x104>
	for (int8_t i = 0; i < 6; i++) {
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001700:	2b05      	cmp	r3, #5
 8001702:	f77f af2d 	ble.w	8001560 <tft_draw_char+0xd8>
 8001706:	e002      	b.n	800170e <tft_draw_char+0x286>
			return;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <tft_draw_char+0x286>
		return;
 800170c:	bf00      	nop
		}
	}
}
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	200000b8 	.word	0x200000b8
 800171c:	200000b4 	.word	0x200000b4
 8001720:	200000c0 	.word	0x200000c0
 8001724:	08008c68 	.word	0x08008c68

08001728 <tft_send_cmd>:
static GPIO_TypeDef *tft_spi_rst_port;
static uint16_t tft_spi_cs_pin;
static uint16_t tft_spi_dc_pin;
static uint16_t tft_spi_rst_pin;

void tft_send_cmd(uint8_t cmd) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	tft_spi_dc_cmd(tft_spi_dc_port, tft_spi_dc_pin);
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <tft_send_cmd+0x50>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <tft_send_cmd+0x54>)
 8001738:	8811      	ldrh	r1, [r2, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fc1d 	bl	8001f7c <HAL_GPIO_WritePin>
	tft_spi_cs_on(tft_spi_cs_port, tft_spi_cs_pin);
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <tft_send_cmd+0x58>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <tft_send_cmd+0x5c>)
 8001748:	8811      	ldrh	r1, [r2, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fc15 	bl	8001f7c <HAL_GPIO_WritePin>
	tft_spi_transmit(tft_spi_handler, cmd);
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <tft_send_cmd+0x60>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	1df9      	adds	r1, r7, #7
 8001758:	2305      	movs	r3, #5
 800175a:	2201      	movs	r2, #1
 800175c:	f003 fda5 	bl	80052aa <HAL_SPI_Transmit>
	tft_spi_cs_off(tft_spi_cs_port, tft_spi_cs_pin);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <tft_send_cmd+0x58>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <tft_send_cmd+0x5c>)
 8001766:	8811      	ldrh	r1, [r2, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fc06 	bl	8001f7c <HAL_GPIO_WritePin>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000cc 	.word	0x200000cc
 800177c:	200000d6 	.word	0x200000d6
 8001780:	200000c8 	.word	0x200000c8
 8001784:	200000d4 	.word	0x200000d4
 8001788:	200000c4 	.word	0x200000c4

0800178c <tft_send_data>:

void tft_send_data(uint8_t data) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	tft_spi_dc_data(tft_spi_dc_port, tft_spi_dc_pin);
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <tft_send_data+0x50>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <tft_send_data+0x54>)
 800179c:	8811      	ldrh	r1, [r2, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fbeb 	bl	8001f7c <HAL_GPIO_WritePin>
	tft_spi_cs_on(tft_spi_cs_port, tft_spi_cs_pin);
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <tft_send_data+0x58>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <tft_send_data+0x5c>)
 80017ac:	8811      	ldrh	r1, [r2, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fbe3 	bl	8001f7c <HAL_GPIO_WritePin>
	tft_spi_transmit(tft_spi_handler, data);
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <tft_send_data+0x60>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	1df9      	adds	r1, r7, #7
 80017bc:	2305      	movs	r3, #5
 80017be:	2201      	movs	r2, #1
 80017c0:	f003 fd73 	bl	80052aa <HAL_SPI_Transmit>
	tft_spi_cs_off(tft_spi_cs_port, tft_spi_cs_pin);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <tft_send_data+0x58>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <tft_send_data+0x5c>)
 80017ca:	8811      	ldrh	r1, [r2, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fbd4 	bl	8001f7c <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200000cc 	.word	0x200000cc
 80017e0:	200000d6 	.word	0x200000d6
 80017e4:	200000c8 	.word	0x200000c8
 80017e8:	200000d4 	.word	0x200000d4
 80017ec:	200000c4 	.word	0x200000c4

080017f0 <tft_reset_on>:
	tft_spi_cs_on(tft_spi_cs_port, tft_spi_cs_pin);
	tft_spi_transmit16(tft_spi_handler, data);
	tft_spi_cs_off(tft_spi_cs_port, tft_spi_cs_pin);
}

void tft_reset_on() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	tft_spi_rst_on(tft_spi_rst_port, tft_spi_rst_pin);
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <tft_reset_on+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <tft_reset_on+0x1c>)
 80017fa:	8811      	ldrh	r1, [r2, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fbbc 	bl	8001f7c <HAL_GPIO_WritePin>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200000d0 	.word	0x200000d0
 800180c:	200000d8 	.word	0x200000d8

08001810 <tft_reset_off>:

void tft_reset_off() {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	tft_spi_rst_off(tft_spi_rst_port, tft_spi_rst_pin);
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <tft_reset_off+0x18>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <tft_reset_off+0x1c>)
 800181a:	8811      	ldrh	r1, [r2, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fbac 	bl	8001f7c <HAL_GPIO_WritePin>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200000d0 	.word	0x200000d0
 800182c:	200000d8 	.word	0x200000d8

08001830 <tft_interface_init>:

void tft_interface_init(SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port,
		uint16_t cs_pin, GPIO_TypeDef *dc_port, uint16_t dc_pin,
		GPIO_TypeDef *rst_port, uint16_t rst_pin) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	80fb      	strh	r3, [r7, #6]

	tft_spi_handler = spi;
 8001840:	4a10      	ldr	r2, [pc, #64]	; (8001884 <tft_interface_init+0x54>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6013      	str	r3, [r2, #0]
	tft_spi_cs_port = cs_port;
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <tft_interface_init+0x58>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	6013      	str	r3, [r2, #0]
	tft_spi_cs_pin = cs_pin;
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <tft_interface_init+0x5c>)
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	8013      	strh	r3, [r2, #0]
	tft_spi_dc_port = dc_port;
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <tft_interface_init+0x60>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6013      	str	r3, [r2, #0]
	tft_spi_dc_pin = dc_pin;
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <tft_interface_init+0x64>)
 800185a:	8b3b      	ldrh	r3, [r7, #24]
 800185c:	8013      	strh	r3, [r2, #0]
	tft_spi_rst_port = rst_port;
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <tft_interface_init+0x68>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	6013      	str	r3, [r2, #0]
	tft_spi_rst_pin = rst_pin;
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <tft_interface_init+0x6c>)
 8001866:	8c3b      	ldrh	r3, [r7, #32]
 8001868:	8013      	strh	r3, [r2, #0]

	tft_spi_cs_off(tft_spi_cs_port, tft_spi_cs_pin);
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <tft_interface_init+0x58>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <tft_interface_init+0x5c>)
 8001870:	8811      	ldrh	r1, [r2, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fb81 	bl	8001f7c <HAL_GPIO_WritePin>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200000c4 	.word	0x200000c4
 8001888:	200000c8 	.word	0x200000c8
 800188c:	200000d4 	.word	0x200000d4
 8001890:	200000cc 	.word	0x200000cc
 8001894:	200000d6 	.word	0x200000d6
 8001898:	200000d0 	.word	0x200000d0
 800189c:	200000d8 	.word	0x200000d8

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018bc:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ca:	f7ff fa77 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f007 f8ad 	bl	8008a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7fe fdf5 	bl	80004c0 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80018e4:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 80018e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80018ec:	20000920 	.word	0x20000920

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f94f 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff f870 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f967 	bl	8001c2a <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001974:	f000 f92f 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	2000000c 	.word	0x2000000c
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000230 	.word	0x20000230

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000230 	.word	0x20000230

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000000c 	.word	0x2000000c

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e16b      	b.n	8001f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 815a 	bne.w	8001f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80b4 	beq.w	8001f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a5f      	ldr	r2, [pc, #380]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d025      	beq.n	8001e66 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01f      	beq.n	8001e62 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_GPIO_Init+0x324>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <HAL_GPIO_Init+0x328>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x20a>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00e      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e4e:	2308      	movs	r3, #8
 8001e50:	e00c      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e00a      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eae:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f ae90 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40021400 	.word	0x40021400
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40021c00 	.word	0x40021c00
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb0:	b08f      	sub	sp, #60	; 0x3c
 8001fb2:	af0a      	add	r7, sp, #40	; 0x28
 8001fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e054      	b.n	800206a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f006 fa76 	bl	80084cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fbcc 	bl	800579c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	687e      	ldr	r6, [r7, #4]
 800200c:	466d      	mov	r5, sp
 800200e:	f106 0410 	add.w	r4, r6, #16
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002022:	1d33      	adds	r3, r6, #4
 8002024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f003 fb46 	bl	80056b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fbc3 	bl	80057be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	687e      	ldr	r6, [r7, #4]
 8002040:	466d      	mov	r5, sp
 8002042:	f106 0410 	add.w	r4, r6, #16
 8002046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002052:	e885 0003 	stmia.w	r5, {r0, r1}
 8002056:	1d33      	adds	r3, r6, #4
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f003 fd2a 	bl	8005ab4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002072 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002072:	b590      	push	{r4, r7, lr}
 8002074:	b089      	sub	sp, #36	; 0x24
 8002076:	af04      	add	r7, sp, #16
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4603      	mov	r3, r0
 8002082:	70fb      	strb	r3, [r7, #3]
 8002084:	460b      	mov	r3, r1
 8002086:	70bb      	strb	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_HCD_HC_Init+0x28>
 8002096:	2302      	movs	r3, #2
 8002098:	e076      	b.n	8002188 <HAL_HCD_HC_Init+0x116>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	333d      	adds	r3, #61	; 0x3d
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3338      	adds	r3, #56	; 0x38
 80020c2:	787a      	ldrb	r2, [r7, #1]
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3340      	adds	r3, #64	; 0x40
 80020d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020d6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3339      	adds	r3, #57	; 0x39
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	333f      	adds	r3, #63	; 0x3f
 80020f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	78ba      	ldrb	r2, [r7, #2]
 8002102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002106:	b2d0      	uxtb	r0, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	333a      	adds	r3, #58	; 0x3a
 8002114:	4602      	mov	r2, r0
 8002116:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	da09      	bge.n	8002134 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	333b      	adds	r3, #59	; 0x3b
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e008      	b.n	8002146 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	333b      	adds	r3, #59	; 0x3b
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	333c      	adds	r3, #60	; 0x3c
 8002154:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002158:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	787c      	ldrb	r4, [r7, #1]
 8002160:	78ba      	ldrb	r2, [r7, #2]
 8002162:	78f9      	ldrb	r1, [r7, #3]
 8002164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4623      	mov	r3, r4
 8002176:	f003 fe17 	bl	8005da8 <USB_HC_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_HCD_HC_Halt+0x1e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e00f      	b.n	80021ce <HAL_HCD_HC_Halt+0x3e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f853 	bl	800626a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	70fb      	strb	r3, [r7, #3]
 80021ea:	460b      	mov	r3, r1
 80021ec:	70bb      	strb	r3, [r7, #2]
 80021ee:	4613      	mov	r3, r2
 80021f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	333b      	adds	r3, #59	; 0x3b
 8002200:	78ba      	ldrb	r2, [r7, #2]
 8002202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	787a      	ldrb	r2, [r7, #1]
 8002214:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002216:	7c3b      	ldrb	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d112      	bne.n	8002242 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2203      	movs	r2, #3
 800222c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	333d      	adds	r3, #61	; 0x3d
 800223c:	7f3a      	ldrb	r2, [r7, #28]
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e008      	b.n	8002254 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3342      	adds	r3, #66	; 0x42
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b03      	cmp	r3, #3
 8002258:	f200 80c6 	bhi.w	80023e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	08002275 	.word	0x08002275
 8002268:	080023d5 	.word	0x080023d5
 800226c:	080022d9 	.word	0x080022d9
 8002270:	08002357 	.word	0x08002357
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002274:	7c3b      	ldrb	r3, [r7, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 80b8 	bne.w	80023ec <HAL_HCD_HC_SubmitRequest+0x214>
 800227c:	78bb      	ldrb	r3, [r7, #2]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 80b4 	bne.w	80023ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002284:	8b3b      	ldrh	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3355      	adds	r3, #85	; 0x55
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3355      	adds	r3, #85	; 0x55
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3342      	adds	r3, #66	; 0x42
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022c2:	e093      	b.n	80023ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3342      	adds	r3, #66	; 0x42
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
      break;
 80022d6:	e089      	b.n	80023ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11d      	bne.n	800231a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3355      	adds	r3, #85	; 0x55
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3342      	adds	r3, #66	; 0x42
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002304:	e073      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3342      	adds	r3, #66	; 0x42
 8002314:	2202      	movs	r2, #2
 8002316:	701a      	strb	r2, [r3, #0]
      break;
 8002318:	e069      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3354      	adds	r3, #84	; 0x54
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3342      	adds	r3, #66	; 0x42
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
      break;
 8002340:	e055      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3342      	adds	r3, #66	; 0x42
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      break;
 8002354:	e04b      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002356:	78bb      	ldrb	r3, [r7, #2]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11d      	bne.n	8002398 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3355      	adds	r3, #85	; 0x55
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3342      	adds	r3, #66	; 0x42
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002382:	e034      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3342      	adds	r3, #66	; 0x42
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
      break;
 8002396:	e02a      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3354      	adds	r3, #84	; 0x54
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3342      	adds	r3, #66	; 0x42
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
      break;
 80023be:	e016      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3342      	adds	r3, #66	; 0x42
 80023ce:	2202      	movs	r2, #2
 80023d0:	701a      	strb	r2, [r3, #0]
      break;
 80023d2:	e00c      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e002      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023e8:	bf00      	nop
 80023ea:	e000      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3344      	adds	r3, #68	; 0x44
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	8b3a      	ldrh	r2, [r7, #24]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	440b      	add	r3, r1
 800240e:	334c      	adds	r3, #76	; 0x4c
 8002410:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3360      	adds	r3, #96	; 0x60
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3350      	adds	r3, #80	; 0x50
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3339      	adds	r3, #57	; 0x39
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3361      	adds	r3, #97	; 0x61
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	222c      	movs	r2, #44	; 0x2c
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	18d1      	adds	r1, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	f003 fda6 	bl	8005fc4 <USB_HC_StartXfer>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop

08002484 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fac9 	bl	8005a32 <USB_GetMode>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 80f6 	bne.w	8002694 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 faad 	bl	8005a0c <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80ec 	beq.w	8002692 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 faa4 	bl	8005a0c <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ce:	d104      	bne.n	80024da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fa94 	bl	8005a0c <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d104      	bne.n	80024fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fa84 	bl	8005a0c <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800250e:	d104      	bne.n	800251a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002518:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fa74 	bl	8005a0c <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d103      	bne.n	8002536 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2202      	movs	r2, #2
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fa66 	bl	8005a0c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254a:	d11c      	bne.n	8002586 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002554:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002566:	2110      	movs	r1, #16
 8002568:	6938      	ldr	r0, [r7, #16]
 800256a:	f003 f975 	bl	8005858 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800256e:	6938      	ldr	r0, [r7, #16]
 8002570:	f003 f996 	bl	80058a0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fb4e 	bl	8005c1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f006 f821 	bl	80085c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fa3e 	bl	8005a0c <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259a:	d102      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 fa03 	bl	80039a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fa30 	bl	8005a0c <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d106      	bne.n	80025c4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f005 ffea 	bl	8008590 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fa1f 	bl	8005a0c <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d101      	bne.n	80025dc <HAL_HCD_IRQHandler+0x158>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_HCD_IRQHandler+0x15a>
 80025dc:	2300      	movs	r3, #0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0210 	bic.w	r2, r2, #16
 80025f0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f001 f906 	bl	8003804 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0210 	orr.w	r2, r2, #16
 8002606:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 f9fd 	bl	8005a0c <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261c:	d13a      	bne.n	8002694 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fe10 	bl	8006248 <USB_HC_ReadInterrupt>
 8002628:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e025      	b.n	800267c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d018      	beq.n	8002676 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265a:	d106      	bne.n	800266a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8ab 	bl	80027be <HCD_HC_IN_IRQHandler>
 8002668:	e005      	b.n	8002676 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fcc6 	bl	8003002 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3d4      	bcc.n	8002630 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	e000      	b.n	8002694 <HAL_HCD_IRQHandler+0x210>
      return;
 8002692:	bf00      	nop
    }
  }
}
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_HCD_Start+0x16>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e013      	b.n	80026d8 <HAL_HCD_Start+0x3e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fb10 	bl	8005ce4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 f856 	bl	800577a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_HCD_Stop+0x16>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00d      	b.n	8002712 <HAL_HCD_Stop+0x32>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 ff0a 	bl	800651c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fab2 	bl	8005c90 <USB_ResetPort>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3360      	adds	r3, #96	; 0x60
 8002750:	781b      	ldrb	r3, [r3, #0]
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3350      	adds	r3, #80	; 0x50
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f003 faf6 	bl	8005d84 <USB_GetCurrentFrame>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fad1 	bl	8005d56 <USB_GetHostSpeed>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d119      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	2304      	movs	r3, #4
 80027fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	440a      	add	r2, r1
 8002816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	60d3      	str	r3, [r2, #12]
 8002820:	e101      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d12b      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	2207      	movs	r2, #7
 800285e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	440a      	add	r2, r1
 8002876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fced 	bl	800626a <USB_HC_Halt>
 8002890:	e0c9      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d109      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	2320      	movs	r3, #32
 80028b8:	6093      	str	r3, [r2, #8]
 80028ba:	e0b4      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d133      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	0151      	lsls	r1, r2, #5
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	440a      	add	r2, r1
 80028e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2205      	movs	r2, #5
 8002902:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2310      	movs	r3, #16
 8002914:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	2308      	movs	r3, #8
 8002926:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fc99 	bl	800626a <USB_HC_Halt>
 8002938:	e075      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d134      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	440a      	add	r2, r1
 8002968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3361      	adds	r3, #97	; 0x61
 8002980:	2208      	movs	r2, #8
 8002982:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2310      	movs	r3, #16
 8002994:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 fc58 	bl	800626a <USB_HC_Halt>
 80029ba:	e034      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	2b80      	cmp	r3, #128	; 0x80
 80029d0:	d129      	bne.n	8002a26 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	0151      	lsls	r1, r2, #5
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	440a      	add	r2, r1
 80029e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3361      	adds	r3, #97	; 0x61
 8002a00:	2206      	movs	r2, #6
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fc2b 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3c:	d122      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	0151      	lsls	r1, r2, #5
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	440a      	add	r2, r1
 8002a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fbfe 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a82:	e2ba      	b.n	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 811b 	bne.w	8002cd2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d019      	beq.n	8002ad8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	0159      	lsls	r1, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3350      	adds	r3, #80	; 0x50
 8002ad6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d121      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	0151      	lsls	r1, r2, #5
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	440a      	add	r2, r1
 8002b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fb82 	bl	800626a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	461a      	mov	r2, r3
 8002b74:	2310      	movs	r3, #16
 8002b76:	6093      	str	r3, [r2, #8]
 8002b78:	e066      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	333f      	adds	r3, #63	; 0x3f
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d127      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bac:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3360      	adds	r3, #96	; 0x60
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	b2d9      	uxtb	r1, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f005 fd04 	bl	80085e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bdc:	e034      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d12a      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3354      	adds	r3, #84	; 0x54
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2d8      	uxtb	r0, r3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3354      	adds	r3, #84	; 0x54
 8002c28:	4602      	mov	r2, r0
 8002c2a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	b2d9      	uxtb	r1, r3
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	202c      	movs	r0, #44	; 0x2c
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	; 0x60
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f005 fcce 	bl	80085e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d12b      	bne.n	8002ca8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3348      	adds	r3, #72	; 0x48
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	fb00 f202 	mul.w	r2, r0, r2
 8002c6a:	440a      	add	r2, r1
 8002c6c:	3240      	adds	r2, #64	; 0x40
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 81be 	beq.w	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3354      	adds	r3, #84	; 0x54
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2d8      	uxtb	r0, r3
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3354      	adds	r3, #84	; 0x54
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	701a      	strb	r2, [r3, #0]
}
 8002ca6:	e1a8      	b.n	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3354      	adds	r3, #84	; 0x54
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3354      	adds	r3, #84	; 0x54
 8002ccc:	4602      	mov	r2, r0
 8002cce:	701a      	strb	r2, [r3, #0]
}
 8002cd0:	e193      	b.n	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 8106 	bne.w	8002ef6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3361      	adds	r3, #97	; 0x61
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d109      	bne.n	8002d32 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e0c9      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3361      	adds	r3, #97	; 0x61
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d109      	bne.n	8002d5a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	2205      	movs	r2, #5
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e0b5      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3361      	adds	r3, #97	; 0x61
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d009      	beq.n	8002d82 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3361      	adds	r3, #97	; 0x61
 8002d7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d150      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	202c      	movs	r0, #44	; 0x2c
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	440b      	add	r3, r1
 8002da0:	335c      	adds	r3, #92	; 0x5c
 8002da2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d912      	bls.n	8002dde <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	335c      	adds	r3, #92	; 0x5c
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	2204      	movs	r2, #4
 8002dda:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ddc:	e073      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3360      	adds	r3, #96	; 0x60
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e06:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e22:	e050      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3361      	adds	r3, #97	; 0x61
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d122      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e68:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e023      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3361      	adds	r3, #97	; 0x61
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	d119      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	202c      	movs	r0, #44	; 0x2c
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335c      	adds	r3, #92	; 0x5c
 8002eb2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3360      	adds	r3, #96	; 0x60
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	202c      	movs	r0, #44	; 0x2c
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3360      	adds	r3, #96	; 0x60
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f005 fb78 	bl	80085e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ef4:	e081      	b.n	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d176      	bne.n	8002ffa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	333f      	adds	r3, #63	; 0x3f
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d121      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	335c      	adds	r3, #92	; 0x5c
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	0151      	lsls	r1, r2, #5
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	440a      	add	r2, r1
 8002f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 f984 	bl	800626a <USB_HC_Halt>
 8002f62:	e041      	b.n	8002fe8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333f      	adds	r3, #63	; 0x3f
 8002f86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d12d      	bne.n	8002fe8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	335c      	adds	r3, #92	; 0x5c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d120      	bne.n	8002fe8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3361      	adds	r3, #97	; 0x61
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	0151      	lsls	r1, r2, #5
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	440a      	add	r2, r1
 8002fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f941 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	6093      	str	r3, [r2, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b088      	sub	sp, #32
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d119      	bne.n	8003066 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	2304      	movs	r3, #4
 8003042:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	0151      	lsls	r1, r2, #5
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	440a      	add	r2, r1
 800305a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003064:	e3ca      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d13e      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2320      	movs	r3, #32
 800308c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	333d      	adds	r3, #61	; 0x3d
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f040 83ac 	bne.w	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	333d      	adds	r3, #61	; 0x3d
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3360      	adds	r3, #96	; 0x60
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 f8b9 	bl	800626a <USB_HC_Halt>
}
 80030f8:	e380      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d122      	bne.n	8003158 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	0151      	lsls	r1, r2, #5
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	440a      	add	r2, r1
 8003128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f003 f894 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003154:	6093      	str	r3, [r2, #8]
}
 8003156:	e351      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d150      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	335c      	adds	r3, #92	; 0x5c
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d111      	bne.n	80031ba <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	333d      	adds	r3, #61	; 0x3d
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2340      	movs	r3, #64	; 0x40
 80031b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	0151      	lsls	r1, r2, #5
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	440a      	add	r2, r1
 80031d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 f840 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3361      	adds	r3, #97	; 0x61
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
}
 800320e:	e2f5      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d13c      	bne.n	80032a0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3361      	adds	r3, #97	; 0x61
 8003234:	2204      	movs	r2, #4
 8003236:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	333d      	adds	r3, #61	; 0x3d
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	440a      	add	r2, r1
 8003272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f002 ffef 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	461a      	mov	r2, r3
 800329a:	2340      	movs	r3, #64	; 0x40
 800329c:	6093      	str	r3, [r2, #8]
}
 800329e:	e2ad      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d12a      	bne.n	800330c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2308      	movs	r3, #8
 80032c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 ffb9 	bl	800626a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3361      	adds	r3, #97	; 0x61
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
}
 800330a:	e277      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	d150      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	335c      	adds	r3, #92	; 0x5c
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3361      	adds	r3, #97	; 0x61
 8003342:	2203      	movs	r2, #3
 8003344:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	333d      	adds	r3, #61	; 0x3d
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d112      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	333c      	adds	r3, #60	; 0x3c
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	333d      	adds	r3, #61	; 0x3d
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	440a      	add	r2, r1
 8003396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 ff5d 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
}
 80033c2:	e21b      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d174      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d121      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3361      	adds	r3, #97	; 0x61
 80033f0:	2206      	movs	r2, #6
 80033f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	440a      	add	r2, r1
 800340a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f002 ff23 	bl	800626a <USB_HC_Halt>
 8003424:	e044      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	335c      	adds	r3, #92	; 0x5c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	202c      	movs	r0, #44	; 0x2c
 800343e:	fb00 f303 	mul.w	r3, r0, r3
 8003442:	440b      	add	r3, r1
 8003444:	335c      	adds	r3, #92	; 0x5c
 8003446:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	335c      	adds	r3, #92	; 0x5c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d920      	bls.n	800349e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	335c      	adds	r3, #92	; 0x5c
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	2204      	movs	r2, #4
 800347e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	b2d9      	uxtb	r1, r3
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	202c      	movs	r0, #44	; 0x2c
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	4413      	add	r3, r2
 8003490:	3360      	adds	r3, #96	; 0x60
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f005 f8a4 	bl	80085e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800349c:	e008      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3360      	adds	r3, #96	; 0x60
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	6093      	str	r3, [r2, #8]
}
 80034c2:	e19b      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d134      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f002 feaf 	bl	800626a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	2310      	movs	r3, #16
 800351c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352a:	461a      	mov	r2, r3
 800352c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003530:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3361      	adds	r3, #97	; 0x61
 8003540:	2208      	movs	r2, #8
 8003542:	701a      	strb	r2, [r3, #0]
}
 8003544:	e15a      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	f040 814f 	bne.w	80037fc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	0151      	lsls	r1, r2, #5
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	440a      	add	r2, r1
 8003574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3361      	adds	r3, #97	; 0x61
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d17d      	bne.n	800368e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3360      	adds	r3, #96	; 0x60
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333f      	adds	r3, #63	; 0x3f
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d00a      	beq.n	80035ce <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333f      	adds	r3, #63	; 0x3f
 80035c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	f040 8100 	bne.w	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d113      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3355      	adds	r3, #85	; 0x55
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f083 0301 	eor.w	r3, r3, #1
 80035ea:	b2d8      	uxtb	r0, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3355      	adds	r3, #85	; 0x55
 80035fa:	4602      	mov	r2, r0
 80035fc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 80e3 	bne.w	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	334c      	adds	r3, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80d8 	beq.w	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	334c      	adds	r3, #76	; 0x4c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	202c      	movs	r0, #44	; 0x2c
 8003634:	fb00 f202 	mul.w	r2, r0, r2
 8003638:	440a      	add	r2, r1
 800363a:	3240      	adds	r2, #64	; 0x40
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	4413      	add	r3, r2
 8003640:	3b01      	subs	r3, #1
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	202c      	movs	r0, #44	; 0x2c
 8003648:	fb00 f202 	mul.w	r2, r0, r2
 800364c:	440a      	add	r2, r1
 800364e:	3240      	adds	r2, #64	; 0x40
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	fbb3 f3f2 	udiv	r3, r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80b5 	beq.w	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3355      	adds	r3, #85	; 0x55
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2d8      	uxtb	r0, r3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3355      	adds	r3, #85	; 0x55
 8003688:	4602      	mov	r2, r0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e09f      	b.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3361      	adds	r3, #97	; 0x61
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d109      	bne.n	80036b6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3360      	adds	r3, #96	; 0x60
 80036b0:	2202      	movs	r2, #2
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e08b      	b.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3361      	adds	r3, #97	; 0x61
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d109      	bne.n	80036de <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3360      	adds	r3, #96	; 0x60
 80036d8:	2202      	movs	r2, #2
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e077      	b.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3361      	adds	r3, #97	; 0x61
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d109      	bne.n	8003706 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3360      	adds	r3, #96	; 0x60
 8003700:	2205      	movs	r2, #5
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e063      	b.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3361      	adds	r3, #97	; 0x61
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b06      	cmp	r3, #6
 8003718:	d009      	beq.n	800372e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3361      	adds	r3, #97	; 0x61
 8003728:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800372a:	2b08      	cmp	r3, #8
 800372c:	d14f      	bne.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	335c      	adds	r3, #92	; 0x5c
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	202c      	movs	r0, #44	; 0x2c
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	440b      	add	r3, r1
 800374c:	335c      	adds	r3, #92	; 0x5c
 800374e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	335c      	adds	r3, #92	; 0x5c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d912      	bls.n	800378a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	335c      	adds	r3, #92	; 0x5c
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3360      	adds	r3, #96	; 0x60
 8003784:	2204      	movs	r2, #4
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e021      	b.n	80037ce <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3360      	adds	r3, #96	; 0x60
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ba:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2302      	movs	r3, #2
 80037de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	202c      	movs	r0, #44	; 0x2c
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3360      	adds	r3, #96	; 0x60
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f004 fef4 	bl	80085e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	0c5b      	lsrs	r3, r3, #17
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003838:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d004      	beq.n	800384a <HCD_RXQLVL_IRQHandler+0x46>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b05      	cmp	r3, #5
 8003844:	f000 80a9 	beq.w	800399a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003848:	e0aa      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a6 	beq.w	800399e <HCD_RXQLVL_IRQHandler+0x19a>
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3344      	adds	r3, #68	; 0x44
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 809b 	beq.w	800399e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3350      	adds	r3, #80	; 0x50
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	441a      	add	r2, r3
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	202c      	movs	r0, #44	; 0x2c
 8003882:	fb00 f303 	mul.w	r3, r0, r3
 8003886:	440b      	add	r3, r1
 8003888:	334c      	adds	r3, #76	; 0x4c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d87a      	bhi.n	8003986 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3344      	adds	r3, #68	; 0x44
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	b292      	uxth	r2, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f002 f857 	bl	800595c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3344      	adds	r3, #68	; 0x44
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	441a      	add	r2, r3
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	202c      	movs	r0, #44	; 0x2c
 80038c8:	fb00 f303 	mul.w	r3, r0, r3
 80038cc:	440b      	add	r3, r1
 80038ce:	3344      	adds	r3, #68	; 0x44
 80038d0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3350      	adds	r3, #80	; 0x50
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	441a      	add	r2, r3
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	202c      	movs	r0, #44	; 0x2c
 80038ec:	fb00 f303 	mul.w	r3, r0, r3
 80038f0:	440b      	add	r3, r1
 80038f2:	3350      	adds	r3, #80	; 0x50
 80038f4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	0cdb      	lsrs	r3, r3, #19
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3340      	adds	r3, #64	; 0x40
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4293      	cmp	r3, r2
 8003922:	d13c      	bne.n	800399e <HCD_RXQLVL_IRQHandler+0x19a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d039      	beq.n	800399e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003940:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003948:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3354      	adds	r3, #84	; 0x54
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f083 0301 	eor.w	r3, r3, #1
 8003970:	b2d8      	uxtb	r0, r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3354      	adds	r3, #84	; 0x54
 8003980:	4602      	mov	r2, r0
 8003982:	701a      	strb	r2, [r3, #0]
      break;
 8003984:	e00b      	b.n	800399e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3360      	adds	r3, #96	; 0x60
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
      break;
 8003998:	e001      	b.n	800399e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800399e:	bf00      	nop
  }
}
 80039a0:	bf00      	nop
 80039a2:	3728      	adds	r7, #40	; 0x28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d10b      	bne.n	80039f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f004 fdde 	bl	80085ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d132      	bne.n	8003a68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d126      	bne.n	8003a62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d113      	bne.n	8003a44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a26:	d106      	bne.n	8003a36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 f8f4 	bl	8005c1c <USB_InitFSLSPClkSel>
 8003a34:	e011      	b.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 f8ed 	bl	8005c1c <USB_InitFSLSPClkSel>
 8003a42:	e00a      	b.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a52:	461a      	mov	r2, r3
 8003a54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f004 fdd0 	bl	8008600 <HAL_HCD_PortEnabled_Callback>
 8003a60:	e002      	b.n	8003a68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f004 fdda 	bl	800861c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d103      	bne.n	8003a7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6013      	str	r3, [r2, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e12b      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc ffd0 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f001 f9fc 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a81      	ldr	r2, [pc, #516]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a80      	ldr	r2, [pc, #512]	; (8003d08 <HAL_I2C_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_I2C_Init+0x27c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0e7      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a78      	ldr	r2, [pc, #480]	; (8003d10 <HAL_I2C_Init+0x280>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a69      	ldr	r2, [pc, #420]	; (8003d14 <HAL_I2C_Init+0x284>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	495c      	ldr	r1, [pc, #368]	; (8003d04 <HAL_I2C_Init+0x274>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d819      	bhi.n	8003bcc <HAL_I2C_Init+0x13c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bac:	400b      	ands	r3, r1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_I2C_Init+0x138>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e59      	subs	r1, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	e051      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x168>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x18e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x196>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e128      	b.n	8003f7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a90      	ldr	r2, [pc, #576]	; (8003f84 <HAL_I2S_Init+0x26c>)
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc fed1 	bl	8000aec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d60:	f023 030f 	bic.w	r3, r3, #15
 8003d64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d060      	beq.n	8003e38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d7e:	2310      	movs	r3, #16
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e001      	b.n	8003d88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d802      	bhi.n	8003d96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f001 f9a0 	bl	80050dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003d9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d125      	bne.n	8003df4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	3305      	adds	r3, #5
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e01f      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	3305      	adds	r3, #5
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e00e      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	3305      	adds	r3, #5
 8003e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <HAL_I2S_Init+0x270>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e003      	b.n	8003e40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d902      	bls.n	8003e4c <HAL_I2S_Init+0x134>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2bff      	cmp	r3, #255	; 0xff
 8003e4a:	d907      	bls.n	8003e5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e08f      	b.n	8003f7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	ea42 0103 	orr.w	r1, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e7a:	f023 030f 	bic.w	r3, r3, #15
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6851      	ldr	r1, [r2, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6992      	ldr	r2, [r2, #24]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d161      	bne.n	8003f6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <HAL_I2S_Init+0x274>)
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x1a4>
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x1a8>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4932      	ldr	r1, [pc, #200]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2S_Init+0x1b8>
 8003ecc:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003ece:	e001      	b.n	8003ed4 <HAL_I2S_Init+0x1bc>
 8003ed0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ed4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_I2S_Init+0x1d4>
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003eea:	e001      	b.n	8003ef0 <HAL_I2S_Init+0x1d8>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2S_Init+0x1ea>
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2S_Init+0x1ee>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f12:	d003      	beq.n	8003f1c <HAL_I2S_Init+0x204>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e001      	b.n	8003f28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2S_Init+0x24c>
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x250>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f68:	897a      	ldrh	r2, [r7, #10]
 8003f6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0800408f 	.word	0x0800408f
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	080041a5 	.word	0x080041a5
 8003f90:	40003800 	.word	0x40003800
 8003f94:	40003400 	.word	0x40003400

08003f98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004018:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffb8 	bl	8003f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10e      	bne.n	8004086 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004076:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff93 	bl	8003fac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d13a      	bne.n	8004120 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d109      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d102      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ffb4 	bl	8004030 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d126      	bne.n	8004120 <I2S_IRQHandler+0x92>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d11f      	bne.n	8004120 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f043 0202 	orr.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff50 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b03      	cmp	r3, #3
 800412a:	d136      	bne.n	800419a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <I2S_IRQHandler+0xbc>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d102      	bne.n	800414a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff45 	bl	8003fd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d122      	bne.n	800419a <I2S_IRQHandler+0x10c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d11b      	bne.n	800419a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004170:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff13 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4aa2      	ldr	r2, [pc, #648]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041be:	4ba2      	ldr	r3, [pc, #648]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c0:	e001      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a9b      	ldr	r2, [pc, #620]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041dc:	4b9a      	ldr	r3, [pc, #616]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041de:	e001      	b.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d004      	beq.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8099 	bne.w	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f925 	bl	8004460 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9c8 	bl	80045c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d13a      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d035      	beq.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7e      	ldr	r2, [pc, #504]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800424e:	4b7e      	ldr	r3, [pc, #504]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004250:	e001      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4979      	ldr	r1, [pc, #484]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800425e:	428b      	cmp	r3, r1
 8004260:	d101      	bne.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004262:	4b79      	ldr	r3, [pc, #484]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004264:	e001      	b.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800426e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800427e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fe88 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	f040 80be 	bne.w	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80b8 	beq.w	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a59      	ldr	r2, [pc, #356]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042e2:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4954      	ldr	r1, [pc, #336]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f2:	428b      	cmp	r3, r1
 80042f4:	d101      	bne.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042f8:	e001      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fe4a 	bl	8003fc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800432c:	e084      	b.n	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d107      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8be 	bl	80044c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8fd 	bl	800455c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d12f      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02a      	beq.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004384:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004392:	e001      	b.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4929      	ldr	r1, [pc, #164]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043a6:	e001      	b.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fdfa 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d131      	bne.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02c      	beq.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043ec:	e001      	b.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4912      	ldr	r1, [pc, #72]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d101      	bne.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004400:	e001      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800440a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800441a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fdc5 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	e000      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004438:	bf00      	nop
}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40003800 	.word	0x40003800
 8004448:	40003400 	.word	0x40003400

0800444c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c99      	adds	r1, r3, #2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6251      	str	r1, [r2, #36]	; 0x24
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffc9 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c99      	adds	r1, r3, #2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6251      	str	r1, [r2, #36]	; 0x24
 80044d6:	8819      	ldrh	r1, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <I2SEx_TxISR_I2SExt+0x22>
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 80044e4:	e001      	b.n	80044ea <I2SEx_TxISR_I2SExt+0x26>
 80044e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ea:	460a      	mov	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <I2SEx_TxISR_I2SExt+0x50>
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004512:	e001      	b.n	8004518 <I2SEx_TxISR_I2SExt+0x54>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	490d      	ldr	r1, [pc, #52]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 8004520:	428b      	cmp	r3, r1
 8004522:	d101      	bne.n	8004528 <I2SEx_TxISR_I2SExt+0x64>
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004526:	e001      	b.n	800452c <I2SEx_TxISR_I2SExt+0x68>
 8004528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004530:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ff81 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40003800 	.word	0x40003800
 8004558:	40003400 	.word	0x40003400

0800455c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68d8      	ldr	r0, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	1c99      	adds	r1, r3, #2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004574:	b282      	uxth	r2, r0
 8004576:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800459e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff4a 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <I2SEx_RxISR_I2SExt+0x16>
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 80045d4:	e001      	b.n	80045da <I2SEx_RxISR_I2SExt+0x1a>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045da:	68d8      	ldr	r0, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	1c99      	adds	r1, r3, #2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045e6:	b282      	uxth	r2, r0
 80045e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <I2SEx_RxISR_I2SExt+0x50>
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 800460e:	e001      	b.n	8004614 <I2SEx_RxISR_I2SExt+0x54>
 8004610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	490d      	ldr	r1, [pc, #52]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 800461c:	428b      	cmp	r3, r1
 800461e:	d101      	bne.n	8004624 <I2SEx_RxISR_I2SExt+0x64>
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 8004622:	e001      	b.n	8004628 <I2SEx_RxISR_I2SExt+0x68>
 8004624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004628:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800462c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff03 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40003800 	.word	0x40003800
 8004654:	40003400 	.word	0x40003400

08004658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e264      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d075      	beq.n	8004762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004676:	4ba3      	ldr	r3, [pc, #652]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d00c      	beq.n	800469c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4ba0      	ldr	r3, [pc, #640]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d112      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468e:	4b9d      	ldr	r3, [pc, #628]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469a:	d10b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4b99      	ldr	r3, [pc, #612]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05b      	beq.n	8004760 <HAL_RCC_OscConfig+0x108>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d157      	bne.n	8004760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e23f      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d106      	bne.n	80046cc <HAL_RCC_OscConfig+0x74>
 80046be:	4b91      	ldr	r3, [pc, #580]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a90      	ldr	r2, [pc, #576]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x98>
 80046d6:	4b8b      	ldr	r3, [pc, #556]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a8a      	ldr	r2, [pc, #552]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b88      	ldr	r3, [pc, #544]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a87      	ldr	r2, [pc, #540]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046f0:	4b84      	ldr	r3, [pc, #528]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a83      	ldr	r2, [pc, #524]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b81      	ldr	r3, [pc, #516]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a80      	ldr	r2, [pc, #512]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd f956 	bl	80019c0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd f952 	bl	80019c0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e204      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xc0>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd f942 	bl	80019c0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd f93e 	bl	80019c0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1f0      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0xe8>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b62      	ldr	r3, [pc, #392]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004786:	4b5f      	ldr	r3, [pc, #380]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b5c      	ldr	r3, [pc, #368]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1c4      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4952      	ldr	r1, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e03a      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b4f      	ldr	r3, [pc, #316]	; (8004908 <HAL_RCC_OscConfig+0x2b0>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f8f7 	bl	80019c0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fd f8f3 	bl	80019c0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1a5      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b46      	ldr	r3, [pc, #280]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b43      	ldr	r3, [pc, #268]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4940      	ldr	r1, [pc, #256]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <HAL_RCC_OscConfig+0x2b0>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd f8d6 	bl	80019c0 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004818:	f7fd f8d2 	bl	80019c0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e184      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d030      	beq.n	80048a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484a:	4b30      	ldr	r3, [pc, #192]	; (800490c <HAL_RCC_OscConfig+0x2b4>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd f8b6 	bl	80019c0 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004858:	f7fd f8b2 	bl	80019c0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e164      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	4b26      	ldr	r3, [pc, #152]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x200>
 8004876:	e015      	b.n	80048a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_OscConfig+0x2b4>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fd f89f 	bl	80019c0 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004886:	f7fd f89b 	bl	80019c0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e14d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a0 	beq.w	80049f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b13      	ldr	r3, [pc, #76]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a07      	ldr	r2, [pc, #28]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fd f861 	bl	80019c0 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	e011      	b.n	8004926 <HAL_RCC_OscConfig+0x2ce>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	42470000 	.word	0x42470000
 800490c:	42470e80 	.word	0x42470e80
 8004910:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004914:	f7fd f854 	bl	80019c0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e106      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <HAL_RCC_OscConfig+0x4e4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d106      	bne.n	8004948 <HAL_RCC_OscConfig+0x2f0>
 800493a:	4b81      	ldr	r3, [pc, #516]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a80      	ldr	r2, [pc, #512]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	e01c      	b.n	8004982 <HAL_RCC_OscConfig+0x32a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d10c      	bne.n	800496a <HAL_RCC_OscConfig+0x312>
 8004950:	4b7b      	ldr	r3, [pc, #492]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a7a      	ldr	r2, [pc, #488]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	4b78      	ldr	r3, [pc, #480]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a77      	ldr	r2, [pc, #476]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	e00b      	b.n	8004982 <HAL_RCC_OscConfig+0x32a>
 800496a:	4b75      	ldr	r3, [pc, #468]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a74      	ldr	r2, [pc, #464]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a71      	ldr	r2, [pc, #452]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d015      	beq.n	80049b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd f819 	bl	80019c0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fd f815 	bl	80019c0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0c5      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0ee      	beq.n	8004992 <HAL_RCC_OscConfig+0x33a>
 80049b4:	e014      	b.n	80049e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd f803 	bl	80019c0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fc ffff 	bl	80019c0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0af      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d4:	4b5a      	ldr	r3, [pc, #360]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ee      	bne.n	80049be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 80049ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809b 	beq.w	8004b32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fc:	4b50      	ldr	r3, [pc, #320]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d05c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d141      	bne.n	8004a94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a10:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <HAL_RCC_OscConfig+0x4ec>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fc ffd3 	bl	80019c0 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fc ffcf 	bl	80019c0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e081      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a30:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	019b      	lsls	r3, r3, #6
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	4937      	ldr	r1, [pc, #220]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x4ec>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fc ffa8 	bl	80019c0 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fc ffa4 	bl	80019c0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e056      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x41c>
 8004a92:	e04e      	b.n	8004b32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCC_OscConfig+0x4ec>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fc ff91 	bl	80019c0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fc ff8d 	bl	80019c0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e03f      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x44a>
 8004ac0:	e037      	b.n	8004b32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e032      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_RCC_OscConfig+0x4e8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d028      	beq.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d11a      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d111      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	3b01      	subs	r3, #1
 8004b18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	40023800 	.word	0x40023800
 8004b44:	42470060 	.word	0x42470060

08004b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0cc      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d90c      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b63      	ldr	r3, [pc, #396]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0b8      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b9c:	4b59      	ldr	r3, [pc, #356]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a58      	ldr	r2, [pc, #352]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb4:	4b53      	ldr	r3, [pc, #332]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a52      	ldr	r2, [pc, #328]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b50      	ldr	r3, [pc, #320]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	494d      	ldr	r1, [pc, #308]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d044      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d119      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e06f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e067      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c26:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 0203 	bic.w	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4934      	ldr	r1, [pc, #208]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c38:	f7fc fec2 	bl	80019c0 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c40:	f7fc febe 	bl	80019c0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e04f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 020c 	and.w	r2, r3, #12
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d1eb      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c68:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d20c      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4916      	ldr	r1, [pc, #88]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	490e      	ldr	r1, [pc, #56]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cce:	f000 f821 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	490a      	ldr	r1, [pc, #40]	; (8004d08 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	5ccb      	ldrb	r3, [r1, r3]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fc fe22 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023c00 	.word	0x40023c00
 8004d04:	40023800 	.word	0x40023800
 8004d08:	08008c50 	.word	0x08008c50
 8004d0c:	20000000 	.word	0x20000000
 8004d10:	20000008 	.word	0x20000008

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	2300      	movs	r3, #0
 8004d26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d2c:	4b67      	ldr	r3, [pc, #412]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d00d      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x40>
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	f200 80bd 	bhi.w	8004eb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x34>
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d46:	e0b7      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d4a:	60bb      	str	r3, [r7, #8]
       break;
 8004d4c:	e0b7      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d50:	60bb      	str	r3, [r7, #8]
      break;
 8004d52:	e0b4      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d04d      	beq.n	8004e06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6a:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	461a      	mov	r2, r3
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	ea02 0800 	and.w	r8, r2, r0
 8004d82:	ea03 0901 	and.w	r9, r3, r1
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	014b      	lsls	r3, r1, #5
 8004d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d98:	0142      	lsls	r2, r0, #5
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	ebb0 0008 	subs.w	r0, r0, r8
 8004da2:	eb61 0109 	sbc.w	r1, r1, r9
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004db4:	0182      	lsls	r2, r0, #6
 8004db6:	1a12      	subs	r2, r2, r0
 8004db8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbc:	f04f 0000 	mov.w	r0, #0
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	00d9      	lsls	r1, r3, #3
 8004dc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dca:	00d0      	lsls	r0, r2, #3
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	eb12 0208 	adds.w	r2, r2, r8
 8004dd4:	eb43 0309 	adc.w	r3, r3, r9
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	0259      	lsls	r1, r3, #9
 8004de2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004de6:	0250      	lsls	r0, r2, #9
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f7fb f9e6 	bl	80001c8 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e04a      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	ea02 0400 	and.w	r4, r2, r0
 8004e1e:	ea03 0501 	and.w	r5, r3, r1
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	014b      	lsls	r3, r1, #5
 8004e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e34:	0142      	lsls	r2, r0, #5
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	1b00      	subs	r0, r0, r4
 8004e3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	018b      	lsls	r3, r1, #6
 8004e4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e4e:	0182      	lsls	r2, r0, #6
 8004e50:	1a12      	subs	r2, r2, r0
 8004e52:	eb63 0301 	sbc.w	r3, r3, r1
 8004e56:	f04f 0000 	mov.w	r0, #0
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	00d9      	lsls	r1, r3, #3
 8004e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e64:	00d0      	lsls	r0, r2, #3
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	1912      	adds	r2, r2, r4
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	0299      	lsls	r1, r3, #10
 8004e7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e7e:	0290      	lsls	r0, r2, #10
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f7fb f99a 	bl	80001c8 <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eba:	60bb      	str	r3, [r7, #8]
      break;
 8004ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	007a1200 	.word	0x007a1200

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	08008c60 	.word	0x08008c60

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d035      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f40:	4b62      	ldr	r3, [pc, #392]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f46:	f7fc fd3b 	bl	80019c0 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f4e:	f7fc fd37 	bl	80019c0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0b0      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f60:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	019a      	lsls	r2, r3, #6
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	4955      	ldr	r1, [pc, #340]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f80:	4b52      	ldr	r3, [pc, #328]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f86:	f7fc fd1b 	bl	80019c0 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f8e:	f7fc fd17 	bl	80019c0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e090      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8083 	beq.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	4a43      	ldr	r2, [pc, #268]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe2:	f7fc fced 	bl	80019c0 <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fc fce9 	bl	80019c0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e062      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffc:	4b35      	ldr	r3, [pc, #212]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005008:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d028      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005030:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005036:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800503c:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d114      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800504e:	f7fc fcb7 	bl	80019c0 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc fcb3 	bl	80019c0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e02a      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005084:	d10d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005086:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	490d      	ldr	r1, [pc, #52]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	4313      	orrs	r3, r2
 800509e:	608b      	str	r3, [r1, #8]
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050ac:	6093      	str	r3, [r2, #8]
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ba:	4905      	ldr	r1, [pc, #20]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	42470068 	.word	0x42470068
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42470e40 	.word	0x42470e40

080050dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d13e      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d12f      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005112:	617b      	str	r3, [r7, #20]
          break;
 8005114:	e02f      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005116:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005122:	d108      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e007      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	0f1b      	lsrs	r3, r3, #28
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
          break;
 800516e:	e002      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
          break;
 8005174:	bf00      	nop
        }
      }
      break;
 8005176:	bf00      	nop
    }
  }
  return frequency;
 8005178:	697b      	ldr	r3, [r7, #20]
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	00bb8000 	.word	0x00bb8000
 8005190:	007a1200 	.word	0x007a1200
 8005194:	00f42400 	.word	0x00f42400

08005198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e07b      	b.n	80052a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d108      	bne.n	80051c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ba:	d009      	beq.n	80051d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
 80051c2:	e005      	b.n	80051d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fb fcfe 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	ea42 0103 	orr.w	r1, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	f003 0104 	and.w	r1, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	f003 0210 	and.w	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b088      	sub	sp, #32
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_SPI_Transmit+0x22>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e126      	b.n	800551a <HAL_SPI_Transmit+0x270>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d4:	f7fc fb74 	bl	80019c0 <HAL_GetTick>
 80052d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d002      	beq.n	80052f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
 80052ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052ee:	e10b      	b.n	8005508 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_SPI_Transmit+0x52>
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005300:	e102      	b.n	8005508 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2203      	movs	r2, #3
 8005306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005348:	d10f      	bne.n	800536a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d007      	beq.n	8005388 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005390:	d14b      	bne.n	800542a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_Transmit+0xf6>
 800539a:	8afb      	ldrh	r3, [r7, #22]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d13e      	bne.n	800541e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	881a      	ldrh	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	1c9a      	adds	r2, r3, #2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053c4:	e02b      	b.n	800541e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d112      	bne.n	80053fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f8:	e011      	b.n	800541e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fa:	f7fc fae1 	bl	80019c0 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_Transmit+0x168>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Transmit+0x16e>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800541c:	e074      	b.n	8005508 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ce      	bne.n	80053c6 <HAL_SPI_Transmit+0x11c>
 8005428:	e04c      	b.n	80054c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Transmit+0x18e>
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d140      	bne.n	80054ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800545e:	e02c      	b.n	80054ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b02      	cmp	r3, #2
 800546c:	d113      	bne.n	8005496 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	86da      	strh	r2, [r3, #54]	; 0x36
 8005494:	e011      	b.n	80054ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005496:	f7fc fa93 	bl	80019c0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d803      	bhi.n	80054ae <HAL_SPI_Transmit+0x204>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ac:	d102      	bne.n	80054b4 <HAL_SPI_Transmit+0x20a>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b8:	e026      	b.n	8005508 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1cd      	bne.n	8005460 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8b3 	bl	8005634 <SPI_EndRxTxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e000      	b.n	8005508 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005506:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005518:	7ffb      	ldrb	r3, [r7, #31]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005534:	f7fc fa44 	bl	80019c0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4413      	add	r3, r2
 8005542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005544:	f7fc fa3c 	bl	80019c0 <HAL_GetTick>
 8005548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	015b      	lsls	r3, r3, #5
 8005550:	0d1b      	lsrs	r3, r3, #20
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	fb02 f303 	mul.w	r3, r2, r3
 8005558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800555a:	e054      	b.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005562:	d050      	beq.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005564:	f7fc fa2c 	bl	80019c0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	429a      	cmp	r2, r3
 8005572:	d902      	bls.n	800557a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d13d      	bne.n	80055f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d111      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559c:	d004      	beq.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d107      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d10f      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e017      	b.n	8005626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3b01      	subs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	bf0c      	ite	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	2300      	movne	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	429a      	cmp	r2, r3
 8005622:	d19b      	bne.n	800555c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000000 	.word	0x20000000

08005634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <SPI_EndRxTxTransaction+0x7c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <SPI_EndRxTxTransaction+0x80>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0d5b      	lsrs	r3, r3, #21
 800564c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565e:	d112      	bne.n	8005686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ff5a 	bl	8005524 <SPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00f      	b.n	80056a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3b01      	subs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d0f2      	beq.n	8005686 <SPI_EndRxTxTransaction+0x52>
 80056a0:	e000      	b.n	80056a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80056a2:	bf00      	nop
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000000 	.word	0x20000000
 80056b4:	165e9f81 	.word	0x165e9f81

080056b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b8:	b084      	sub	sp, #16
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	f107 001c 	add.w	r0, r7, #28
 80056c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d122      	bne.n	8005716 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9a0 	bl	8005a50 <USB_CoreReset>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
 8005714:	e01a      	b.n	800574c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f994 	bl	8005a50 <USB_CoreReset>
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800572c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
 800573e:	e005      	b.n	800574c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10b      	bne.n	800576a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f043 0206 	orr.w	r2, r3, #6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005776:	b004      	add	sp, #16
 8005778:	4770      	bx	lr

0800577a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 0201 	bic.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	460b      	mov	r3, r1
 80057c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d115      	bne.n	800580c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057ec:	2001      	movs	r0, #1
 80057ee:	f7fc f8f3 	bl	80019d8 <HAL_Delay>
      ms++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f91a 	bl	8005a32 <USB_GetMode>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d01e      	beq.n	8005842 <USB_SetCurrentMode+0x84>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b31      	cmp	r3, #49	; 0x31
 8005808:	d9f0      	bls.n	80057ec <USB_SetCurrentMode+0x2e>
 800580a:	e01a      	b.n	8005842 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d115      	bne.n	800583e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800581e:	2001      	movs	r0, #1
 8005820:	f7fc f8da 	bl	80019d8 <HAL_Delay>
      ms++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f901 	bl	8005a32 <USB_GetMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <USB_SetCurrentMode+0x84>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b31      	cmp	r3, #49	; 0x31
 800583a:	d9f0      	bls.n	800581e <USB_SetCurrentMode+0x60>
 800583c:	e001      	b.n	8005842 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e005      	b.n	800584e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b32      	cmp	r3, #50	; 0x32
 8005846:	d101      	bne.n	800584c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <USB_FlushTxFifo+0x44>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e006      	b.n	8005890 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b20      	cmp	r3, #32
 800588c:	d0f1      	beq.n	8005872 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	00030d40 	.word	0x00030d40

080058a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2210      	movs	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <USB_FlushRxFifo+0x3c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d0f1      	beq.n	80058b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	00030d40 	.word	0x00030d40

080058e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b089      	sub	sp, #36	; 0x24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4611      	mov	r1, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	460b      	mov	r3, r1
 80058f0:	71fb      	strb	r3, [r7, #7]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d123      	bne.n	800594e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005906:	88bb      	ldrh	r3, [r7, #4]
 8005908:	3303      	adds	r3, #3
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e018      	b.n	8005946 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	031a      	lsls	r2, r3, #12
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005920:	461a      	mov	r2, r3
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3301      	adds	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3301      	adds	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	3301      	adds	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	d3e2      	bcc.n	8005914 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3724      	adds	r7, #36	; 0x24
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800595c:	b480      	push	{r7}
 800595e:	b08b      	sub	sp, #44	; 0x2c
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	b29b      	uxth	r3, r3
 8005978:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005982:	2300      	movs	r3, #0
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	e014      	b.n	80059b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	601a      	str	r2, [r3, #0]
    pDest++;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	3301      	adds	r3, #1
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	3301      	adds	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	3301      	adds	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	3301      	adds	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	3301      	adds	r3, #1
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3e6      	bcc.n	8005988 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059ba:	8bfb      	ldrh	r3, [r7, #30]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ca:	461a      	mov	r2, r3
 80059cc:	f107 0310 	add.w	r3, r7, #16
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	701a      	strb	r2, [r3, #0]
      i++;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	3301      	adds	r3, #1
 80059ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	3301      	adds	r3, #1
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059f2:	8bfb      	ldrh	r3, [r7, #30]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059f8:	8bfb      	ldrh	r3, [r7, #30]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ea      	bne.n	80059d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	372c      	adds	r7, #44	; 0x2c
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4013      	ands	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <USB_CoreReset+0x60>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01a      	b.n	8005aa2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	daf3      	bge.n	8005a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <USB_CoreReset+0x60>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e006      	b.n	8005aa2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d0f1      	beq.n	8005a84 <USB_CoreReset+0x34>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	00030d40 	.word	0x00030d40

08005ab4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	f107 001c 	add.w	r0, r7, #28
 8005ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10a      	bne.n	8005b22 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e014      	b.n	8005b4c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e009      	b.n	8005b4c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b46:	f023 0304 	bic.w	r3, r3, #4
 8005b4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005b4c:	2110      	movs	r1, #16
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fe82 	bl	8005858 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fea3 	bl	80058a0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e015      	b.n	8005b8c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b80:	461a      	mov	r2, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3e5      	bcc.n	8005b60 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <USB_HostInit+0x154>)
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <USB_HostInit+0x158>)
 8005bc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bc4:	e009      	b.n	8005bda <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2280      	movs	r2, #128	; 0x80
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <USB_HostInit+0x15c>)
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <USB_HostInit+0x160>)
 8005bd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	f043 0210 	orr.w	r2, r3, #16
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <USB_HostInit+0x164>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c04:	b004      	add	sp, #16
 8005c06:	4770      	bx	lr
 8005c08:	01000200 	.word	0x01000200
 8005c0c:	00e00300 	.word	0x00e00300
 8005c10:	00600080 	.word	0x00600080
 8005c14:	004000e0 	.word	0x004000e0
 8005c18:	a3200008 	.word	0xa3200008

08005c1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c64:	461a      	mov	r2, r3
 8005c66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c6a:	6053      	str	r3, [r2, #4]
 8005c6c:	e009      	b.n	8005c82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d106      	bne.n	8005c82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cc0:	2064      	movs	r0, #100	; 0x64
 8005cc2:	f7fb fe89 	bl	80019d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cd4:	200a      	movs	r0, #10
 8005cd6:	f7fb fe7f 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <USB_DriveVbus+0x44>
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d106      	bne.n	8005d28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d109      	bne.n	8005d48 <USB_DriveVbus+0x64>
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	0c5b      	lsrs	r3, r3, #17
 8005d74:	f003 0303 	and.w	r3, r3, #3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	b29b      	uxth	r3, r3
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	70fb      	strb	r3, [r7, #3]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70bb      	strb	r3, [r7, #2]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ddc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005dde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d87e      	bhi.n	8005ee4 <USB_HC_Init+0x13c>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USB_HC_Init+0x44>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005ea7 	.word	0x08005ea7
 8005df4:	08005dfd 	.word	0x08005dfd
 8005df8:	08005e69 	.word	0x08005e69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da10      	bge.n	8005e3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e36:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e38:	e057      	b.n	8005eea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d051      	beq.n	8005eea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e64:	60d3      	str	r3, [r2, #12]
      break;
 8005e66:	e040      	b.n	8005eea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	461a      	mov	r2, r3
 8005e76:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	da34      	bge.n	8005eee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ea4:	e023      	b.n	8005eee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f240 2325 	movw	r3, #549	; 0x225
 8005eb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005eba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da17      	bge.n	8005ef2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005edc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ee0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ee2:	e006      	b.n	8005ef2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ee8:	e004      	b.n	8005ef4 <USB_HC_Init+0x14c>
      break;
 8005eea:	bf00      	nop
 8005eec:	e002      	b.n	8005ef4 <USB_HC_Init+0x14c>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <USB_HC_Init+0x14c>
      break;
 8005ef2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	6939      	ldr	r1, [r7, #16]
 8005f0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da03      	bge.n	8005f2e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e001      	b.n	8005f32 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ff0f 	bl	8005d56 <USB_GetHostSpeed>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d106      	bne.n	8005f50 <USB_HC_Init+0x1a8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d003      	beq.n	8005f50 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e001      	b.n	8005f54 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f54:	787b      	ldrb	r3, [r7, #1]
 8005f56:	059b      	lsls	r3, r3, #22
 8005f58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f5c:	78bb      	ldrb	r3, [r7, #2]
 8005f5e:	02db      	lsls	r3, r3, #11
 8005f60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f6a:	049b      	lsls	r3, r3, #18
 8005f6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	440b      	add	r3, r1
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f90:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d10f      	bne.n	8005fba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08c      	sub	sp, #48	; 0x30
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d02d      	beq.n	800604a <USB_HC_StartXfer+0x86>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	791b      	ldrb	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d129      	bne.n	800604a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d117      	bne.n	800602c <USB_HC_StartXfer+0x68>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	79db      	ldrb	r3, [r3, #7]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <USB_HC_StartXfer+0x48>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	79db      	ldrb	r3, [r3, #7]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d10f      	bne.n	800602c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <USB_HC_StartXfer+0x86>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	795b      	ldrb	r3, [r3, #5]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa2f 	bl	80064a4 <USB_DoPing>
      return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e0f8      	b.n	800623c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	8912      	ldrh	r2, [r2, #8]
 800605a:	4413      	add	r3, r2
 800605c:	3b01      	subs	r3, #1
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	8912      	ldrh	r2, [r2, #8]
 8006062:	fbb3 f3f2 	udiv	r3, r3, r2
 8006066:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800606a:	8b7b      	ldrh	r3, [r7, #26]
 800606c:	429a      	cmp	r2, r3
 800606e:	d90b      	bls.n	8006088 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006070:	8b7b      	ldrh	r3, [r7, #26]
 8006072:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	8912      	ldrh	r2, [r2, #8]
 800607a:	fb02 f203 	mul.w	r2, r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	611a      	str	r2, [r3, #16]
 8006082:	e001      	b.n	8006088 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006084:	2301      	movs	r3, #1
 8006086:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	8912      	ldrh	r2, [r2, #8]
 8006096:	fb02 f203 	mul.w	r2, r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	611a      	str	r2, [r3, #16]
 800609e:	e003      	b.n	80060a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060b2:	04d9      	lsls	r1, r3, #19
 80060b4:	4b63      	ldr	r3, [pc, #396]	; (8006244 <USB_HC_StartXfer+0x280>)
 80060b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	7a9b      	ldrb	r3, [r3, #10]
 80060be:	075b      	lsls	r3, r3, #29
 80060c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	0148      	lsls	r0, r1, #5
 80060c8:	6a39      	ldr	r1, [r7, #32]
 80060ca:	4401      	add	r1, r0
 80060cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	460a      	mov	r2, r1
 80060ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006120:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006124:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	7e7b      	ldrb	r3, [r7, #25]
 8006136:	075b      	lsls	r3, r3, #29
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	0148      	lsls	r0, r1, #5
 800613c:	6a39      	ldr	r1, [r7, #32]
 800613e:	4401      	add	r1, r0
 8006140:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800615e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e003      	b.n	800617a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006178:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006180:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618e:	461a      	mov	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e04e      	b.n	800623c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d149      	bne.n	800623a <USB_HC_StartXfer+0x276>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d045      	beq.n	800623a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	79db      	ldrb	r3, [r3, #7]
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d830      	bhi.n	8006218 <USB_HC_StartXfer+0x254>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USB_HC_StartXfer+0x1f8>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080061cd 	.word	0x080061cd
 80061c8:	080061f1 	.word	0x080061f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	3303      	adds	r3, #3
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061d6:	8afa      	ldrh	r2, [r7, #22]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	b29b      	uxth	r3, r3
 80061de:	429a      	cmp	r2, r3
 80061e0:	d91c      	bls.n	800621c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80061ee:	e015      	b.n	800621c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	3303      	adds	r3, #3
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061fa:	8afa      	ldrh	r2, [r7, #22]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	b29b      	uxth	r3, r3
 8006206:	429a      	cmp	r2, r3
 8006208:	d90a      	bls.n	8006220 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]
        }
        break;
 8006216:	e003      	b.n	8006220 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <USB_HC_StartXfer+0x25e>
        break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <USB_HC_StartXfer+0x25e>
        break;
 8006220:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	785a      	ldrb	r2, [r3, #1]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	b29b      	uxth	r3, r3
 8006230:	2000      	movs	r0, #0
 8006232:	9000      	str	r0, [sp, #0]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fb53 	bl	80058e0 <USB_WritePacket>
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3728      	adds	r7, #40	; 0x28
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	1ff80000 	.word	0x1ff80000

08006248 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	b29b      	uxth	r3, r3
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800626a:	b480      	push	{r7}
 800626c:	b089      	sub	sp, #36	; 0x24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	0c9b      	lsrs	r3, r3, #18
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	0fdb      	lsrs	r3, r3, #31
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d104      	bne.n	80062c4 <USB_HC_Halt+0x5a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e0e8      	b.n	8006496 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <USB_HC_Halt+0x66>
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d173      	bne.n	80063b8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 80cb 	bne.w	8006494 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d143      	bne.n	8006392 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	440a      	add	r2, r1
 8006320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006328:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006348:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	440a      	add	r2, r1
 8006360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006368:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006376:	d81d      	bhi.n	80063b4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800638e:	d0ec      	beq.n	800636a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006390:	e080      	b.n	8006494 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063b2:	e06f      	b.n	8006494 <USB_HC_Halt+0x22a>
            break;
 80063b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063b6:	e06d      	b.n	8006494 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d143      	bne.n	8006470 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006406:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	440a      	add	r2, r1
 800643e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006446:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006454:	d81d      	bhi.n	8006492 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646c:	d0ec      	beq.n	8006448 <USB_HC_Halt+0x1de>
 800646e:	e011      	b.n	8006494 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	440a      	add	r2, r1
 8006486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e000      	b.n	8006494 <USB_HC_Halt+0x22a>
          break;
 8006492:	bf00      	nop
    }
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3724      	adds	r7, #36	; 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	04da      	lsls	r2, r3, #19
 80064c0:	4b15      	ldr	r3, [pc, #84]	; (8006518 <USB_DoPing+0x74>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	1ff80000 	.word	0x1ff80000

0800651c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff f935 	bl	800579c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006532:	2110      	movs	r1, #16
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff f98f 	bl	8005858 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff f9b0 	bl	80058a0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e01f      	b.n	8006586 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3301      	adds	r3, #1
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	d9dc      	bls.n	8006546 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	e034      	b.n	80065fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3301      	adds	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d8:	d80c      	bhi.n	80065f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f0:	d0ec      	beq.n	80065cc <USB_StopHost+0xb0>
 80065f2:	e000      	b.n	80065f6 <USB_StopHost+0xda>
        break;
 80065f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b0f      	cmp	r3, #15
 8006600:	d9c7      	bls.n	8006592 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006608:	461a      	mov	r2, r3
 800660a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006616:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff f8ae 	bl	800577a <USB_EnableGlobalInt>

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af04      	add	r7, sp, #16
 800662e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006630:	2301      	movs	r3, #1
 8006632:	2202      	movs	r2, #2
 8006634:	2102      	movs	r1, #2
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fc66 	bl	8006f08 <USBH_FindInterface>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2bff      	cmp	r3, #255	; 0xff
 8006644:	d002      	beq.n	800664c <USBH_CDC_InterfaceInit+0x24>
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d901      	bls.n	8006650 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800664c:	2302      	movs	r3, #2
 800664e:	e13d      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fc3b 	bl	8006ed0 <USBH_SelectInterface>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	e131      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800666e:	2050      	movs	r0, #80	; 0x50
 8006670:	f002 fa00 	bl	8008a74 <malloc>
 8006674:	4603      	mov	r3, r0
 8006676:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006688:	2302      	movs	r3, #2
 800668a:	e11f      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800668c:	2250      	movs	r2, #80	; 0x50
 800668e:	2100      	movs	r1, #0
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f002 f9ff 	bl	8008a94 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	211a      	movs	r1, #26
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da15      	bge.n	80066da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	211a      	movs	r1, #26
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	211a      	movs	r1, #26
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fe32 	bl	800834a <USBH_AllocPipe>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	7858      	ldrb	r0, [r3, #1]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	8952      	ldrh	r2, [r2, #10]
 8006706:	9202      	str	r2, [sp, #8]
 8006708:	2203      	movs	r2, #3
 800670a:	9201      	str	r2, [sp, #4]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4623      	mov	r3, r4
 8006710:	4602      	mov	r2, r0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fdea 	bl	80082ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f002 f8f9 	bl	8008918 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006726:	2300      	movs	r3, #0
 8006728:	2200      	movs	r2, #0
 800672a:	210a      	movs	r1, #10
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fbeb 	bl	8006f08 <USBH_FindInterface>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2bff      	cmp	r3, #255	; 0xff
 800673a:	d002      	beq.n	8006742 <USBH_CDC_InterfaceInit+0x11a>
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d901      	bls.n	8006746 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006742:	2302      	movs	r3, #2
 8006744:	e0c2      	b.n	80068cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	211a      	movs	r1, #26
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	da16      	bge.n	800678c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	211a      	movs	r1, #26
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	835a      	strh	r2, [r3, #26]
 800678a:	e015      	b.n	80067b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	211a      	movs	r1, #26
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	211a      	movs	r1, #26
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067b2:	881a      	ldrh	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	211a      	movs	r1, #26
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da16      	bge.n	80067fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	211a      	movs	r1, #26
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	4413      	add	r3, r2
 80067dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	211a      	movs	r1, #26
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067f6:	881a      	ldrh	r2, [r3, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	835a      	strh	r2, [r3, #26]
 80067fc:	e015      	b.n	800682a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	211a      	movs	r1, #26
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	211a      	movs	r1, #26
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	7b9b      	ldrb	r3, [r3, #14]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fd8a 	bl	800834a <USBH_AllocPipe>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	7bdb      	ldrb	r3, [r3, #15]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fd80 	bl	800834a <USBH_AllocPipe>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	7b59      	ldrb	r1, [r3, #13]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b98      	ldrb	r0, [r3, #14]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	8b12      	ldrh	r2, [r2, #24]
 800686a:	9202      	str	r2, [sp, #8]
 800686c:	2202      	movs	r2, #2
 800686e:	9201      	str	r2, [sp, #4]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4623      	mov	r3, r4
 8006874:	4602      	mov	r2, r0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fd38 	bl	80082ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	7b19      	ldrb	r1, [r3, #12]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	7bd8      	ldrb	r0, [r3, #15]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	8b52      	ldrh	r2, [r2, #26]
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	2202      	movs	r2, #2
 8006898:	9201      	str	r2, [sp, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4623      	mov	r3, r4
 800689e:	4602      	mov	r2, r0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fd23 	bl	80082ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	2200      	movs	r2, #0
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f002 f82e 	bl	8008918 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 f827 	bl	8008918 <USBH_LL_SetToggle>

  return USBH_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}

080068d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fd18 	bl	800832a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fd43 	bl	800838c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	7b1b      	ldrb	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	7b1b      	ldrb	r3, [r3, #12]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fd05 	bl	800832a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fd30 	bl	800838c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	7b5b      	ldrb	r3, [r3, #13]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7b5b      	ldrb	r3, [r3, #13]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fcf2 	bl	800832a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	7b5b      	ldrb	r3, [r3, #13]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fd1d 	bl	800838c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	4618      	mov	r0, r3
 800696e:	f002 f889 	bl	8008a84 <free>
    phost->pActiveClass->pData = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006978:	2200      	movs	r2, #0
 800697a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3340      	adds	r3, #64	; 0x40
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8b1 	bl	8006b06 <GetLineCoding>
 80069a4:	4603      	mov	r3, r0
 80069a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b4:	2102      	movs	r1, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069ba:	7afb      	ldrb	r3, [r7, #11]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d877      	bhi.n	8006ad8 <USBH_CDC_Process+0x114>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_CDC_Process+0x2c>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a05 	.word	0x08006a05
 80069f4:	08006a0b 	.word	0x08006a0b
 80069f8:	08006a3b 	.word	0x08006a3b
 80069fc:	08006aaf 	.word	0x08006aaf
 8006a00:	08006abd 	.word	0x08006abd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
      break;
 8006a08:	e06d      	b.n	8006ae6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f897 	bl	8006b44 <SetLineCoding>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a28:	e058      	b.n	8006adc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d055      	beq.n	8006adc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a38:	e050      	b.n	8006adc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3340      	adds	r3, #64	; 0x40
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f860 	bl	8006b06 <GetLineCoding>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d126      	bne.n	8006a9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	791b      	ldrb	r3, [r3, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d13b      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d133      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d12b      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d124      	bne.n	8006ae0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f958 	bl	8006d4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a9c:	e020      	b.n	8006ae0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d01d      	beq.n	8006ae0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006aac:	e018      	b.n	8006ae0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f867 	bl	8006b82 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8da 	bl	8006c6e <CDC_ProcessReception>
      break;
 8006aba:	e014      	b.n	8006ae6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 ffe3 	bl	8007a8a <USBH_ClrFeature>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ad6:	e005      	b.n	8006ae4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ad8:	bf00      	nop
 8006ada:	e004      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006adc:	bf00      	nop
 8006ade:	e002      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006ae0:	bf00      	nop
 8006ae2:	e000      	b.n	8006ae6 <USBH_CDC_Process+0x122>
      break;
 8006ae4:	bf00      	nop

  }

  return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	22a1      	movs	r2, #161	; 0xa1
 8006b14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2207      	movs	r2, #7
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 f988 	bl	8007e4a <USBH_CtlReq>
 8006b3a:	4603      	mov	r3, r0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2221      	movs	r2, #33	; 0x21
 8006b52:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2207      	movs	r2, #7
 8006b6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2207      	movs	r2, #7
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f969 	bl	8007e4a <USBH_CtlReq>
 8006b78:	4603      	mov	r3, r0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af02      	add	r7, sp, #8
 8006b88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d002      	beq.n	8006ba8 <CDC_ProcessTransmission+0x26>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d023      	beq.n	8006bee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ba6:	e05e      	b.n	8006c66 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	8b12      	ldrh	r2, [r2, #24]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d90b      	bls.n	8006bcc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	69d9      	ldr	r1, [r3, #28]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8b1a      	ldrh	r2, [r3, #24]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	7b5b      	ldrb	r3, [r3, #13]
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	9000      	str	r0, [sp, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fb4e 	bl	8008266 <USBH_BulkSendData>
 8006bca:	e00b      	b.n	8006be4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	7b5b      	ldrb	r3, [r3, #13]
 8006bda:	2001      	movs	r0, #1
 8006bdc:	9000      	str	r0, [sp, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fb41 	bl	8008266 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bec:	e03b      	b.n	8006c66 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	7b5b      	ldrb	r3, [r3, #13]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fe65 	bl	80088c4 <USBH_LL_GetURBState>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d128      	bne.n	8006c56 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	8b12      	ldrh	r2, [r2, #24]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d90e      	bls.n	8006c2e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	8b12      	ldrh	r2, [r2, #24]
 8006c18:	1a9a      	subs	r2, r3, r2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	8b12      	ldrh	r2, [r2, #24]
 8006c26:	441a      	add	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	61da      	str	r2, [r3, #28]
 8006c2c:	e002      	b.n	8006c34 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c44:	e00e      	b.n	8006c64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f868 	bl	8006d24 <USBH_CDC_TransmitCallback>
      break;
 8006c54:	e006      	b.n	8006c64 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d103      	bne.n	8006c64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c64:	bf00      	nop
  }
}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d002      	beq.n	8006c94 <CDC_ProcessReception+0x26>
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d00e      	beq.n	8006cb0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c92:	e043      	b.n	8006d1c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	6a19      	ldr	r1, [r3, #32]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	8b5a      	ldrh	r2, [r3, #26]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fb05 	bl	80082b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cae:	e035      	b.n	8006d1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fe04 	bl	80088c4 <USBH_LL_GetURBState>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cc0:	7cfb      	ldrb	r3, [r7, #19]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d129      	bne.n	8006d1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	7b1b      	ldrb	r3, [r3, #12]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd67 	bl	80087a0 <USBH_LL_GetLastXferSize>
 8006cd2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d016      	beq.n	8006d0c <CDC_ProcessReception+0x9e>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	8b5b      	ldrh	r3, [r3, #26]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d910      	bls.n	8006d0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad2      	subs	r2, r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d0a:	e006      	b.n	8006d1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f80f 	bl	8006d38 <USBH_CDC_ReceiveCallback>
      break;
 8006d1a:	bf00      	nop
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d74:	2302      	movs	r3, #2
 8006d76:	e029      	b.n	8006dcc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	79fa      	ldrb	r2, [r7, #7]
 8006d7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f81f 	bl	8006dd4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f001 fc37 	bl	8008638 <USBH_LL_Init>

  return USBH_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e009      	b.n	8006dfa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	33e0      	adds	r3, #224	; 0xe0
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b0e      	cmp	r3, #14
 8006dfe:	d9f2      	bls.n	8006de6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e009      	b.n	8006e1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e20:	d3f1      	bcc.n	8006e06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2240      	movs	r2, #64	; 0x40
 8006e46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10e      	bne.n	8006eb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	33de      	adds	r3, #222	; 0xde
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
 8006eb6:	e004      	b.n	8006ec2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	73fb      	strb	r3, [r7, #15]
 8006ebc:	e001      	b.n	8006ec2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d204      	bcs.n	8006ef6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ef4:	e001      	b.n	8006efa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	70fb      	strb	r3, [r7, #3]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70bb      	strb	r3, [r7, #2]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f32:	e025      	b.n	8006f80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	221a      	movs	r2, #26
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	3302      	adds	r3, #2
 8006f44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	795b      	ldrb	r3, [r3, #5]
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <USBH_FindInterface+0x4e>
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d111      	bne.n	8006f7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f5a:	78ba      	ldrb	r2, [r7, #2]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f60:	78bb      	ldrb	r3, [r7, #2]
 8006f62:	2bff      	cmp	r3, #255	; 0xff
 8006f64:	d109      	bne.n	8006f7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f6a:	787a      	ldrb	r2, [r7, #1]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f70:	787b      	ldrb	r3, [r7, #1]
 8006f72:	2bff      	cmp	r3, #255	; 0xff
 8006f74:	d101      	bne.n	8006f7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	e006      	b.n	8006f88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d9d6      	bls.n	8006f34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f86:	23ff      	movs	r3, #255	; 0xff
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fb87 	bl	80086b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fca0 	bl	80088ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d102      	bne.n	8006fd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b0b      	cmp	r3, #11
 8006fde:	f200 81b3 	bhi.w	8007348 <USBH_Process+0x394>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <USBH_Process+0x34>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007019 	.word	0x08007019
 8006fec:	0800704b 	.word	0x0800704b
 8006ff0:	080070b3 	.word	0x080070b3
 8006ff4:	080072e3 	.word	0x080072e3
 8006ff8:	08007349 	.word	0x08007349
 8006ffc:	08007157 	.word	0x08007157
 8007000:	08007289 	.word	0x08007289
 8007004:	0800718d 	.word	0x0800718d
 8007008:	080071ad 	.word	0x080071ad
 800700c:	080071cd 	.word	0x080071cd
 8007010:	080071fb 	.word	0x080071fb
 8007014:	080072cb 	.word	0x080072cb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8193 	beq.w	800734c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800702c:	20c8      	movs	r0, #200	; 0xc8
 800702e:	f001 fca3 	bl	8008978 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fb99 	bl	800876a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007048:	e180      	b.n	800734c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007050:	2b01      	cmp	r3, #1
 8007052:	d107      	bne.n	8007064 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007062:	e182      	b.n	800736a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800706a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800706e:	d914      	bls.n	800709a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007076:	3301      	adds	r3, #1
 8007078:	b2da      	uxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007086:	2b03      	cmp	r3, #3
 8007088:	d903      	bls.n	8007092 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	220d      	movs	r2, #13
 800708e:	701a      	strb	r2, [r3, #0]
      break;
 8007090:	e16b      	b.n	800736a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
      break;
 8007098:	e167      	b.n	800736a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070a0:	f103 020a 	add.w	r2, r3, #10
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80070aa:	200a      	movs	r0, #10
 80070ac:	f001 fc64 	bl	8008978 <USBH_Delay>
      break;
 80070b0:	e15b      	b.n	800736a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070c2:	2104      	movs	r1, #4
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070c8:	2064      	movs	r0, #100	; 0x64
 80070ca:	f001 fc55 	bl	8008978 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fb24 	bl	800871c <USBH_LL_GetSpeed>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2205      	movs	r2, #5
 80070e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070e4:	2100      	movs	r1, #0
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 f92f 	bl	800834a <USBH_AllocPipe>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070f4:	2180      	movs	r1, #128	; 0x80
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f927 	bl	800834a <USBH_AllocPipe>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7919      	ldrb	r1, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007118:	b292      	uxth	r2, r2
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	9201      	str	r2, [sp, #4]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4603      	mov	r3, r0
 8007124:	2280      	movs	r2, #128	; 0x80
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f8e0 	bl	80082ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7959      	ldrb	r1, [r3, #5]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007140:	b292      	uxth	r2, r2
 8007142:	9202      	str	r2, [sp, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	9201      	str	r2, [sp, #4]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4603      	mov	r3, r0
 800714c:	2200      	movs	r2, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 f8cc 	bl	80082ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007154:	e109      	b.n	800736a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f90c 	bl	8007374 <USBH_HandleEnum>
 800715c:	4603      	mov	r3, r0
 800715e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 80f3 	bne.w	8007350 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007178:	2b01      	cmp	r3, #1
 800717a:	d103      	bne.n	8007184 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2208      	movs	r2, #8
 8007180:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007182:	e0e5      	b.n	8007350 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2207      	movs	r2, #7
 8007188:	701a      	strb	r2, [r3, #0]
      break;
 800718a:	e0e1      	b.n	8007350 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80de 	beq.w	8007354 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80071aa:	e0d3      	b.n	8007354 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc20 	bl	80079fc <USBH_SetCfg>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f040 80ca 	bne.w	8007358 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2209      	movs	r2, #9
 80071c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071ca:	e0c5      	b.n	8007358 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc30 	bl	8007a42 <USBH_SetFeature>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 80b9 	bne.w	800735c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220a      	movs	r2, #10
 80071ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071f0:	e0b4      	b.n	800735c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	220a      	movs	r2, #10
 80071f6:	701a      	strb	r2, [r3, #0]
      break;
 80071f8:	e0b0      	b.n	800735c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80ad 	beq.w	8007360 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
 8007212:	e016      	b.n	8007242 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007214:	7bfa      	ldrb	r2, [r7, #15]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	32de      	adds	r2, #222	; 0xde
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	791a      	ldrb	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007226:	429a      	cmp	r2, r3
 8007228:	d108      	bne.n	800723c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800722a:	7bfa      	ldrb	r2, [r7, #15]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	32de      	adds	r2, #222	; 0xde
 8007230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800723a:	e005      	b.n	8007248 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	3301      	adds	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0e5      	beq.n	8007214 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2206      	movs	r2, #6
 8007268:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007270:	2103      	movs	r1, #3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007276:	e073      	b.n	8007360 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e06f      	b.n	8007360 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e06b      	b.n	8007360 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220b      	movs	r2, #11
 80072ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072b0:	e058      	b.n	8007364 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d154      	bne.n	8007364 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e050      	b.n	8007364 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e04c      	b.n	8007364 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d049      	beq.n	8007368 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      }
      break;
 80072e0:	e042      	b.n	8007368 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd72 	bl	8006dd4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800731e:	2105      	movs	r1, #5
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d107      	bne.n	8007340 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fe2b 	bl	8006f94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800733e:	e014      	b.n	800736a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f9b5 	bl	80086b0 <USBH_LL_Start>
      break;
 8007346:	e010      	b.n	800736a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007348:	bf00      	nop
 800734a:	e00e      	b.n	800736a <USBH_Process+0x3b6>
      break;
 800734c:	bf00      	nop
 800734e:	e00c      	b.n	800736a <USBH_Process+0x3b6>
      break;
 8007350:	bf00      	nop
 8007352:	e00a      	b.n	800736a <USBH_Process+0x3b6>
    break;
 8007354:	bf00      	nop
 8007356:	e008      	b.n	800736a <USBH_Process+0x3b6>
      break;
 8007358:	bf00      	nop
 800735a:	e006      	b.n	800736a <USBH_Process+0x3b6>
      break;
 800735c:	bf00      	nop
 800735e:	e004      	b.n	800736a <USBH_Process+0x3b6>
      break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USBH_Process+0x3b6>
      break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USBH_Process+0x3b6>
      break;
 8007368:	bf00      	nop
  }
  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007380:	2301      	movs	r3, #1
 8007382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b07      	cmp	r3, #7
 800738a:	f200 81c1 	bhi.w	8007710 <USBH_HandleEnum+0x39c>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <USBH_HandleEnum+0x20>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b5 	.word	0x080073b5
 8007398:	08007473 	.word	0x08007473
 800739c:	080074dd 	.word	0x080074dd
 80073a0:	0800756b 	.word	0x0800756b
 80073a4:	080075d5 	.word	0x080075d5
 80073a8:	08007645 	.word	0x08007645
 80073ac:	0800768b 	.word	0x0800768b
 80073b0:	080076d1 	.word	0x080076d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073b4:	2108      	movs	r1, #8
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa50 	bl	800785c <USBH_Get_DevDesc>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d130      	bne.n	8007428 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7919      	ldrb	r1, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073ea:	b292      	uxth	r2, r2
 80073ec:	9202      	str	r2, [sp, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	9201      	str	r2, [sp, #4]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	4603      	mov	r3, r0
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ff77 	bl	80082ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7959      	ldrb	r1, [r3, #5]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007412:	b292      	uxth	r2, r2
 8007414:	9202      	str	r2, [sp, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4603      	mov	r3, r0
 800741e:	2200      	movs	r2, #0
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 ff63 	bl	80082ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007426:	e175      	b.n	8007714 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b03      	cmp	r3, #3
 800742c:	f040 8172 	bne.w	8007714 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007436:	3301      	adds	r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007446:	2b03      	cmp	r3, #3
 8007448:	d903      	bls.n	8007452 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	220d      	movs	r2, #13
 800744e:	701a      	strb	r2, [r3, #0]
      break;
 8007450:	e160      	b.n	8007714 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	795b      	ldrb	r3, [r3, #5]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ff97 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	791b      	ldrb	r3, [r3, #4]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 ff91 	bl	800838c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
      break;
 8007470:	e150      	b.n	8007714 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007472:	2112      	movs	r1, #18
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9f1 	bl	800785c <USBH_Get_DevDesc>
 800747a:	4603      	mov	r3, r0
 800747c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800748a:	e145      	b.n	8007718 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	2b03      	cmp	r3, #3
 8007490:	f040 8142 	bne.w	8007718 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800749a:	3301      	adds	r3, #1
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d903      	bls.n	80074b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	220d      	movs	r2, #13
 80074b2:	701a      	strb	r2, [r3, #0]
      break;
 80074b4:	e130      	b.n	8007718 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	795b      	ldrb	r3, [r3, #5]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 ff65 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	791b      	ldrb	r3, [r3, #4]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff5f 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	e11d      	b.n	8007718 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074dc:	2101      	movs	r1, #1
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa68 	bl	80079b4 <USBH_SetAddress>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d132      	bne.n	8007554 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074ee:	2002      	movs	r0, #2
 80074f0:	f001 fa42 	bl	8008978 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2203      	movs	r2, #3
 8007500:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7919      	ldrb	r1, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007516:	b292      	uxth	r2, r2
 8007518:	9202      	str	r2, [sp, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	9201      	str	r2, [sp, #4]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4603      	mov	r3, r0
 8007522:	2280      	movs	r2, #128	; 0x80
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fee1 	bl	80082ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7959      	ldrb	r1, [r3, #5]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800753e:	b292      	uxth	r2, r2
 8007540:	9202      	str	r2, [sp, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	9201      	str	r2, [sp, #4]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4603      	mov	r3, r0
 800754a:	2200      	movs	r2, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fecd 	bl	80082ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007552:	e0e3      	b.n	800771c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f040 80e0 	bne.w	800771c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	220d      	movs	r2, #13
 8007560:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	705a      	strb	r2, [r3, #1]
      break;
 8007568:	e0d8      	b.n	800771c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800756a:	2109      	movs	r1, #9
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f99d 	bl	80078ac <USBH_Get_CfgDesc>
 8007572:	4603      	mov	r3, r0
 8007574:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007582:	e0cd      	b.n	8007720 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b03      	cmp	r3, #3
 8007588:	f040 80ca 	bne.w	8007720 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007592:	3301      	adds	r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d903      	bls.n	80075ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	220d      	movs	r2, #13
 80075aa:	701a      	strb	r2, [r3, #0]
      break;
 80075ac:	e0b8      	b.n	8007720 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	795b      	ldrb	r3, [r3, #5]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fee9 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fee3 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
      break;
 80075d2:	e0a5      	b.n	8007720 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f965 	bl	80078ac <USBH_Get_CfgDesc>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2205      	movs	r2, #5
 80075f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075f2:	e097      	b.n	8007724 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f040 8094 	bne.w	8007724 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007602:	3301      	adds	r3, #1
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007612:	2b03      	cmp	r3, #3
 8007614:	d903      	bls.n	800761e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	220d      	movs	r2, #13
 800761a:	701a      	strb	r2, [r3, #0]
      break;
 800761c:	e082      	b.n	8007724 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	795b      	ldrb	r3, [r3, #5]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 feb1 	bl	800838c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 feab 	bl	800838c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
      break;
 8007642:	e06f      	b.n	8007724 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800764a:	2b00      	cmp	r3, #0
 800764c:	d019      	beq.n	8007682 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800765a:	23ff      	movs	r3, #255	; 0xff
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f949 	bl	80078f4 <USBH_Get_StringDesc>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2206      	movs	r2, #6
 8007670:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007672:	e059      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d156      	bne.n	8007728 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2206      	movs	r2, #6
 800767e:	705a      	strb	r2, [r3, #1]
      break;
 8007680:	e052      	b.n	8007728 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2206      	movs	r2, #6
 8007686:	705a      	strb	r2, [r3, #1]
      break;
 8007688:	e04e      	b.n	8007728 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007690:	2b00      	cmp	r3, #0
 8007692:	d019      	beq.n	80076c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076a0:	23ff      	movs	r3, #255	; 0xff
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f926 	bl	80078f4 <USBH_Get_StringDesc>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2207      	movs	r2, #7
 80076b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076b8:	e038      	b.n	800772c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d135      	bne.n	800772c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2207      	movs	r2, #7
 80076c4:	705a      	strb	r2, [r3, #1]
      break;
 80076c6:	e031      	b.n	800772c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2207      	movs	r2, #7
 80076cc:	705a      	strb	r2, [r3, #1]
      break;
 80076ce:	e02d      	b.n	800772c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076e6:	23ff      	movs	r3, #255	; 0xff
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f903 	bl	80078f4 <USBH_Get_StringDesc>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076fc:	e018      	b.n	8007730 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d115      	bne.n	8007730 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	e012      	b.n	8007730 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
      break;
 800770e:	e00f      	b.n	8007730 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007710:	bf00      	nop
 8007712:	e00e      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007714:	bf00      	nop
 8007716:	e00c      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007718:	bf00      	nop
 800771a:	e00a      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 800771c:	bf00      	nop
 800771e:	e008      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007720:	bf00      	nop
 8007722:	e006      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007724:	bf00      	nop
 8007726:	e004      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007728:	bf00      	nop
 800772a:	e002      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <USBH_HandleEnum+0x3be>
      break;
 8007730:	bf00      	nop
  }
  return Status;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f804 	bl	800777e <USBH_HandleSof>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b0b      	cmp	r3, #11
 800778e:	d10a      	bne.n	80077a6 <USBH_HandleSof+0x28>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80077be:	bf00      	nop
}
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80077da:	bf00      	nop
}
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 ff56 	bl	80086e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fda3 	bl	800838c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	795b      	ldrb	r3, [r3, #5]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd9d 	bl	800838c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b29b      	uxth	r3, r3
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f864 	bl	800794a <USBH_GetDescriptor>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	b292      	uxth	r2, r2
 800789c:	4619      	mov	r1, r3
 800789e:	f000 f918 	bl	8007ad2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	331c      	adds	r3, #28
 80078bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c8:	2100      	movs	r1, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f83d 	bl	800794a <USBH_GetDescriptor>
 80078d0:	4603      	mov	r3, r0
 80078d2:	72fb      	strb	r3, [r7, #11]
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078e0:	887a      	ldrh	r2, [r7, #2]
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f964 	bl	8007bb2 <USBH_ParseCfgDesc>
  }

  return status;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	461a      	mov	r2, r3
 8007900:	460b      	mov	r3, r1
 8007902:	72fb      	strb	r3, [r7, #11]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007910:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007918:	893b      	ldrh	r3, [r7, #8]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	460b      	mov	r3, r1
 800791e:	2100      	movs	r1, #0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f812 	bl	800794a <USBH_GetDescriptor>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007936:	893a      	ldrh	r2, [r7, #8]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fa37 	bl	8007dae <USBH_ParseStringDesc>
  }

  return status;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	72fb      	strb	r3, [r7, #11]
 8007958:	4613      	mov	r3, r2
 800795a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	789b      	ldrb	r3, [r3, #2]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d11c      	bne.n	800799e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800796a:	b2da      	uxtb	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2206      	movs	r2, #6
 8007974:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	893a      	ldrh	r2, [r7, #8]
 800797a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007986:	d104      	bne.n	8007992 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f240 4209 	movw	r2, #1033	; 0x409
 800798e:	829a      	strh	r2, [r3, #20]
 8007990:	e002      	b.n	8007998 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8b3a      	ldrh	r2, [r7, #24]
 800799c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800799e:	8b3b      	ldrh	r3, [r7, #24]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fa50 	bl	8007e4a <USBH_CtlReq>
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	789b      	ldrb	r3, [r3, #2]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10f      	bne.n	80079e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2205      	movs	r2, #5
 80079d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa2c 	bl	8007e4a <USBH_CtlReq>
 80079f2:	4603      	mov	r3, r0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	789b      	ldrb	r3, [r3, #2]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10e      	bne.n	8007a2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2209      	movs	r2, #9
 8007a1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa09 	bl	8007e4a <USBH_CtlReq>
 8007a38:	4603      	mov	r3, r0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d10f      	bne.n	8007a76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9e5 	bl	8007e4a <USBH_CtlReq>
 8007a80:	4603      	mov	r3, r0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	789b      	ldrb	r3, [r3, #2]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10f      	bne.n	8007abe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9c1 	bl	8007e4a <USBH_CtlReq>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785a      	ldrb	r2, [r3, #1]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3302      	adds	r3, #2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3303      	adds	r3, #3
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4313      	orrs	r3, r2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	791a      	ldrb	r2, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	795a      	ldrb	r2, [r3, #5]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	799a      	ldrb	r2, [r3, #6]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	79da      	ldrb	r2, [r3, #7]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d939      	bls.n	8007ba6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3308      	adds	r3, #8
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	3309      	adds	r3, #9
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330a      	adds	r3, #10
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330b      	adds	r3, #11
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	330d      	adds	r3, #13
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7b9a      	ldrb	r2, [r3, #14]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	7bda      	ldrb	r2, [r3, #15]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7c1a      	ldrb	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	7c5a      	ldrb	r2, [r3, #17]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b08a      	sub	sp, #40	; 0x28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785a      	ldrb	r2, [r3, #1]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3302      	adds	r3, #2
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3303      	adds	r3, #3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	791a      	ldrb	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	795a      	ldrb	r2, [r3, #5]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	799a      	ldrb	r2, [r3, #6]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	79da      	ldrb	r2, [r3, #7]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	7a1a      	ldrb	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d95f      	bls.n	8007cee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c2e:	2309      	movs	r3, #9
 8007c30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c36:	e051      	b.n	8007cdc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c38:	f107 0316 	add.w	r3, r7, #22
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	f000 f8e8 	bl	8007e14 <USBH_GetNextDesc>
 8007c44:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d146      	bne.n	8007cdc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c52:	221a      	movs	r2, #26
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
 8007c58:	3308      	adds	r3, #8
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3302      	adds	r3, #2
 8007c60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c64:	69f8      	ldr	r0, [r7, #28]
 8007c66:	f000 f846 	bl	8007cf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c74:	e022      	b.n	8007cbc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c76:	f107 0316 	add.w	r3, r7, #22
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c7e:	f000 f8c9 	bl	8007e14 <USBH_GetNextDesc>
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	d117      	bne.n	8007cbc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c94:	3201      	adds	r2, #1
 8007c96:	00d2      	lsls	r2, r2, #3
 8007c98:	211a      	movs	r1, #26
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	f000 f851 	bl	8007d54 <USBH_ParseEPDesc>
            ep_ix++;
 8007cb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d204      	bcs.n	8007cd2 <USBH_ParseCfgDesc+0x120>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	885a      	ldrh	r2, [r3, #2]
 8007ccc:	8afb      	ldrh	r3, [r7, #22]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d8d1      	bhi.n	8007c76 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d804      	bhi.n	8007cee <USBH_ParseCfgDesc+0x13c>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	885a      	ldrh	r2, [r3, #2]
 8007ce8:	8afb      	ldrh	r3, [r7, #22]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d8a4      	bhi.n	8007c38 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	785a      	ldrb	r2, [r3, #1]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	789a      	ldrb	r2, [r3, #2]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78da      	ldrb	r2, [r3, #3]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	791a      	ldrb	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	795a      	ldrb	r2, [r3, #5]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	799a      	ldrb	r2, [r3, #6]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	79da      	ldrb	r2, [r3, #7]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7a1a      	ldrb	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	721a      	strb	r2, [r3, #8]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785a      	ldrb	r2, [r3, #1]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	789a      	ldrb	r2, [r3, #2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	78da      	ldrb	r2, [r3, #3]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	3305      	adds	r3, #5
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	799a      	ldrb	r2, [r3, #6]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	719a      	strb	r2, [r3, #6]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b087      	sub	sp, #28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d120      	bne.n	8007e08 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	1e9a      	subs	r2, r3, #2
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bf28      	it	cs
 8007dd2:	4613      	movcs	r3, r2
 8007dd4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	82fb      	strh	r3, [r7, #22]
 8007de0:	e00b      	b.n	8007dfa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007de2:	8afb      	ldrh	r3, [r7, #22]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007df4:	8afb      	ldrh	r3, [r7, #22]
 8007df6:	3302      	adds	r3, #2
 8007df8:	82fb      	strh	r3, [r7, #22]
 8007dfa:	8afa      	ldrh	r2, [r7, #22]
 8007dfc:	8abb      	ldrh	r3, [r7, #20]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3ef      	bcc.n	8007de2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
  }
}
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	881a      	ldrh	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	4613      	mov	r3, r2
 8007e56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	789b      	ldrb	r3, [r3, #2]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d002      	beq.n	8007e6a <USBH_CtlReq+0x20>
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d00f      	beq.n	8007e88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e68:	e027      	b.n	8007eba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
      break;
 8007e86:	e018      	b.n	8007eba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f81b 	bl	8007ec4 <USBH_HandleControl>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <USBH_CtlReq+0x54>
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d106      	bne.n	8007eac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	761a      	strb	r2, [r3, #24]
      break;
 8007eaa:	e005      	b.n	8007eb8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d102      	bne.n	8007eb8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	709a      	strb	r2, [r3, #2]
      break;
 8007eb8:	bf00      	nop
  }
  return status;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7e1b      	ldrb	r3, [r3, #24]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	2b0a      	cmp	r3, #10
 8007edc:	f200 8156 	bhi.w	800818c <USBH_HandleControl+0x2c8>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBH_HandleControl+0x24>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007f15 	.word	0x08007f15
 8007eec:	08007f2f 	.word	0x08007f2f
 8007ef0:	08007f99 	.word	0x08007f99
 8007ef4:	08007fbf 	.word	0x08007fbf
 8007ef8:	08007ff7 	.word	0x08007ff7
 8007efc:	08008021 	.word	0x08008021
 8007f00:	08008073 	.word	0x08008073
 8007f04:	08008095 	.word	0x08008095
 8007f08:	080080d1 	.word	0x080080d1
 8007f0c:	080080f7 	.word	0x080080f7
 8007f10:	08008135 	.word	0x08008135
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f103 0110 	add.w	r1, r3, #16
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	795b      	ldrb	r3, [r3, #5]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f943 	bl	80081ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	761a      	strb	r2, [r3, #24]
      break;
 8007f2c:	e139      	b.n	80081a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	795b      	ldrb	r3, [r3, #5]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fcc5 	bl	80088c4 <USBH_LL_GetURBState>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d11e      	bne.n	8007f82 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7c1b      	ldrb	r3, [r3, #16]
 8007f48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8adb      	ldrh	r3, [r3, #22]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b80      	cmp	r3, #128	; 0x80
 8007f5a:	d103      	bne.n	8007f64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2203      	movs	r2, #3
 8007f60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f62:	e115      	b.n	8008190 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2205      	movs	r2, #5
 8007f68:	761a      	strb	r2, [r3, #24]
      break;
 8007f6a:	e111      	b.n	8008190 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f6c:	7b7b      	ldrb	r3, [r7, #13]
 8007f6e:	2b80      	cmp	r3, #128	; 0x80
 8007f70:	d103      	bne.n	8007f7a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2209      	movs	r2, #9
 8007f76:	761a      	strb	r2, [r3, #24]
      break;
 8007f78:	e10a      	b.n	8008190 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	761a      	strb	r2, [r3, #24]
      break;
 8007f80:	e106      	b.n	8008190 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d003      	beq.n	8007f90 <USBH_HandleControl+0xcc>
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	f040 8100 	bne.w	8008190 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	220b      	movs	r2, #11
 8007f94:	761a      	strb	r2, [r3, #24]
      break;
 8007f96:	e0fb      	b.n	8008190 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6899      	ldr	r1, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	899a      	ldrh	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f93a 	bl	800822a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	761a      	strb	r2, [r3, #24]
      break;
 8007fbc:	e0f1      	b.n	80081a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fc7d 	bl	80088c4 <USBH_LL_GetURBState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d102      	bne.n	8007fda <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2209      	movs	r2, #9
 8007fd8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d102      	bne.n	8007fe6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fe4:	e0d6      	b.n	8008194 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	f040 80d3 	bne.w	8008194 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	220b      	movs	r2, #11
 8007ff2:	761a      	strb	r2, [r3, #24]
      break;
 8007ff4:	e0ce      	b.n	8008194 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6899      	ldr	r1, [r3, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	899a      	ldrh	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	795b      	ldrb	r3, [r3, #5]
 8008002:	2001      	movs	r0, #1
 8008004:	9000      	str	r0, [sp, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f8ea 	bl	80081e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2206      	movs	r2, #6
 800801c:	761a      	strb	r2, [r3, #24]
      break;
 800801e:	e0c0      	b.n	80081a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	795b      	ldrb	r3, [r3, #5]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc4c 	bl	80088c4 <USBH_LL_GetURBState>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d103      	bne.n	800803e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2207      	movs	r2, #7
 800803a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800803c:	e0ac      	b.n	8008198 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b05      	cmp	r3, #5
 8008042:	d105      	bne.n	8008050 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	220c      	movs	r2, #12
 8008048:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800804a:	2303      	movs	r3, #3
 800804c:	73fb      	strb	r3, [r7, #15]
      break;
 800804e:	e0a3      	b.n	8008198 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d103      	bne.n	800805e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2205      	movs	r2, #5
 800805a:	761a      	strb	r2, [r3, #24]
      break;
 800805c:	e09c      	b.n	8008198 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b04      	cmp	r3, #4
 8008062:	f040 8099 	bne.w	8008198 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220b      	movs	r2, #11
 800806a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800806c:	2302      	movs	r3, #2
 800806e:	73fb      	strb	r3, [r7, #15]
      break;
 8008070:	e092      	b.n	8008198 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8d5 	bl	800822a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2208      	movs	r2, #8
 8008090:	761a      	strb	r2, [r3, #24]

      break;
 8008092:	e086      	b.n	80081a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	791b      	ldrb	r3, [r3, #4]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fc12 	bl	80088c4 <USBH_LL_GetURBState>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d105      	bne.n	80080b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	220d      	movs	r2, #13
 80080ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080b4:	e072      	b.n	800819c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d103      	bne.n	80080c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220b      	movs	r2, #11
 80080c0:	761a      	strb	r2, [r3, #24]
      break;
 80080c2:	e06b      	b.n	800819c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d168      	bne.n	800819c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080ca:	2303      	movs	r3, #3
 80080cc:	73fb      	strb	r3, [r7, #15]
      break;
 80080ce:	e065      	b.n	800819c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	795b      	ldrb	r3, [r3, #5]
 80080d4:	2201      	movs	r2, #1
 80080d6:	9200      	str	r2, [sp, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f87f 	bl	80081e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	220a      	movs	r2, #10
 80080f2:	761a      	strb	r2, [r3, #24]
      break;
 80080f4:	e055      	b.n	80081a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	795b      	ldrb	r3, [r3, #5]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fbe1 	bl	80088c4 <USBH_LL_GetURBState>
 8008102:	4603      	mov	r3, r0
 8008104:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d105      	bne.n	8008118 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	220d      	movs	r2, #13
 8008114:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008116:	e043      	b.n	80081a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d103      	bne.n	8008126 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2209      	movs	r2, #9
 8008122:	761a      	strb	r2, [r3, #24]
      break;
 8008124:	e03c      	b.n	80081a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d139      	bne.n	80081a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220b      	movs	r2, #11
 8008130:	761a      	strb	r2, [r3, #24]
      break;
 8008132:	e035      	b.n	80081a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7e5b      	ldrb	r3, [r3, #25]
 8008138:	3301      	adds	r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	765a      	strb	r2, [r3, #25]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7e5b      	ldrb	r3, [r3, #25]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d806      	bhi.n	8008156 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008154:	e025      	b.n	80081a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800815c:	2106      	movs	r1, #6
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	795b      	ldrb	r3, [r3, #5]
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f90c 	bl	800838c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	791b      	ldrb	r3, [r3, #4]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f906 	bl	800838c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	73fb      	strb	r3, [r7, #15]
      break;
 800818a:	e00a      	b.n	80081a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800818c:	bf00      	nop
 800818e:	e008      	b.n	80081a2 <USBH_HandleControl+0x2de>
      break;
 8008190:	bf00      	nop
 8008192:	e006      	b.n	80081a2 <USBH_HandleControl+0x2de>
      break;
 8008194:	bf00      	nop
 8008196:	e004      	b.n	80081a2 <USBH_HandleControl+0x2de>
      break;
 8008198:	bf00      	nop
 800819a:	e002      	b.n	80081a2 <USBH_HandleControl+0x2de>
      break;
 800819c:	bf00      	nop
 800819e:	e000      	b.n	80081a2 <USBH_HandleControl+0x2de>
      break;
 80081a0:	bf00      	nop
  }

  return status;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081ba:	79f9      	ldrb	r1, [r7, #7]
 80081bc:	2300      	movs	r3, #0
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	2308      	movs	r3, #8
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fb46 	bl	8008862 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	80fb      	strh	r3, [r7, #6]
 80081f2:	4613      	mov	r3, r2
 80081f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008204:	7979      	ldrb	r1, [r7, #5]
 8008206:	7e3b      	ldrb	r3, [r7, #24]
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2301      	movs	r3, #1
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2300      	movs	r3, #0
 8008218:	2200      	movs	r2, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fb21 	bl	8008862 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b088      	sub	sp, #32
 800822e:	af04      	add	r7, sp, #16
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	4611      	mov	r1, r2
 8008236:	461a      	mov	r2, r3
 8008238:	460b      	mov	r3, r1
 800823a:	80fb      	strh	r3, [r7, #6]
 800823c:	4613      	mov	r3, r2
 800823e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008240:	7979      	ldrb	r1, [r7, #5]
 8008242:	2300      	movs	r3, #0
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	9302      	str	r3, [sp, #8]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	2301      	movs	r3, #1
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	2201      	movs	r2, #1
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 fb03 	bl	8008862 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800825c:	2300      	movs	r3, #0

}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b088      	sub	sp, #32
 800826a:	af04      	add	r7, sp, #16
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	4611      	mov	r1, r2
 8008272:	461a      	mov	r2, r3
 8008274:	460b      	mov	r3, r1
 8008276:	80fb      	strh	r3, [r7, #6]
 8008278:	4613      	mov	r3, r2
 800827a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800828a:	7979      	ldrb	r1, [r7, #5]
 800828c:	7e3b      	ldrb	r3, [r7, #24]
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	9302      	str	r3, [sp, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2301      	movs	r3, #1
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2302      	movs	r3, #2
 800829e:	2200      	movs	r2, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fade 	bl	8008862 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	80fb      	strh	r3, [r7, #6]
 80082c2:	4613      	mov	r3, r2
 80082c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082c6:	7979      	ldrb	r1, [r7, #5]
 80082c8:	2300      	movs	r3, #0
 80082ca:	9303      	str	r3, [sp, #12]
 80082cc:	88fb      	ldrh	r3, [r7, #6]
 80082ce:	9302      	str	r3, [sp, #8]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	2301      	movs	r3, #1
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2302      	movs	r3, #2
 80082da:	2201      	movs	r2, #1
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fac0 	bl	8008862 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	70fb      	strb	r3, [r7, #3]
 80082fe:	460b      	mov	r3, r1
 8008300:	70bb      	strb	r3, [r7, #2]
 8008302:	4613      	mov	r3, r2
 8008304:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008306:	7878      	ldrb	r0, [r7, #1]
 8008308:	78ba      	ldrb	r2, [r7, #2]
 800830a:	78f9      	ldrb	r1, [r7, #3]
 800830c:	8b3b      	ldrh	r3, [r7, #24]
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	7d3b      	ldrb	r3, [r7, #20]
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	7c3b      	ldrb	r3, [r7, #16]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4603      	mov	r3, r0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa53 	bl	80087c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa72 	bl	8008824 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f836 	bl	80083c8 <USBH_GetFreePipe>
 800835c:	4603      	mov	r3, r0
 800835e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008366:	4293      	cmp	r3, r2
 8008368:	d00a      	beq.n	8008380 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	89fb      	ldrh	r3, [r7, #14]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	33e0      	adds	r3, #224	; 0xe0
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	b2db      	uxtb	r3, r3
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	2b0a      	cmp	r3, #10
 800839c:	d80d      	bhi.n	80083ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	33e0      	adds	r3, #224	; 0xe0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	33e0      	adds	r3, #224	; 0xe0
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
 80083d8:	e00f      	b.n	80083fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	33e0      	adds	r3, #224	; 0xe0
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	e007      	b.n	8008404 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	3301      	adds	r3, #1
 80083f8:	73fb      	strb	r3, [r7, #15]
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b0a      	cmp	r3, #10
 80083fe:	d9ec      	bls.n	80083da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008400:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008414:	2201      	movs	r2, #1
 8008416:	490e      	ldr	r1, [pc, #56]	; (8008450 <MX_USB_HOST_Init+0x40>)
 8008418:	480e      	ldr	r0, [pc, #56]	; (8008454 <MX_USB_HOST_Init+0x44>)
 800841a:	f7fe fca1 	bl	8006d60 <USBH_Init>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008424:	f7f8 faec 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008428:	490b      	ldr	r1, [pc, #44]	; (8008458 <MX_USB_HOST_Init+0x48>)
 800842a:	480a      	ldr	r0, [pc, #40]	; (8008454 <MX_USB_HOST_Init+0x44>)
 800842c:	f7fe fd26 	bl	8006e7c <USBH_RegisterClass>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008436:	f7f8 fae3 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800843a:	4806      	ldr	r0, [pc, #24]	; (8008454 <MX_USB_HOST_Init+0x44>)
 800843c:	f7fe fdaa 	bl	8006f94 <USBH_Start>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008446:	f7f8 fadb 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800844a:	bf00      	nop
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	08008471 	.word	0x08008471
 8008454:	20000234 	.word	0x20000234
 8008458:	20000010 	.word	0x20000010

0800845c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008460:	4802      	ldr	r0, [pc, #8]	; (800846c <MX_USB_HOST_Process+0x10>)
 8008462:	f7fe fda7 	bl	8006fb4 <USBH_Process>
}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000234 	.word	0x20000234

08008470 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	3b01      	subs	r3, #1
 8008480:	2b04      	cmp	r3, #4
 8008482:	d819      	bhi.n	80084b8 <USBH_UserProcess+0x48>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBH_UserProcess+0x1c>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084b9 	.word	0x080084b9
 8008490:	080084a9 	.word	0x080084a9
 8008494:	080084b9 	.word	0x080084b9
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084a1 	.word	0x080084a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <USBH_UserProcess+0x58>)
 80084a2:	2203      	movs	r2, #3
 80084a4:	701a      	strb	r2, [r3, #0]
  break;
 80084a6:	e008      	b.n	80084ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <USBH_UserProcess+0x58>)
 80084aa:	2202      	movs	r2, #2
 80084ac:	701a      	strb	r2, [r3, #0]
  break;
 80084ae:	e004      	b.n	80084ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <USBH_UserProcess+0x58>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
  break;
 80084b6:	e000      	b.n	80084ba <USBH_UserProcess+0x4a>

  default:
  break;
 80084b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	200000da 	.word	0x200000da

080084cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ec:	d147      	bne.n	800857e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	4b25      	ldr	r3, [pc, #148]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	4a24      	ldr	r2, [pc, #144]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	6313      	str	r3, [r2, #48]	; 0x30
 80084fe:	4b22      	ldr	r3, [pc, #136]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	613b      	str	r3, [r7, #16]
 8008508:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800850a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800850e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	4619      	mov	r1, r3
 800851e:	481b      	ldr	r0, [pc, #108]	; (800858c <HAL_HCD_MspInit+0xc0>)
 8008520:	f7f9 fb90 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008524:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800852a:	2302      	movs	r3, #2
 800852c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008532:	2300      	movs	r3, #0
 8008534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008536:	230a      	movs	r3, #10
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	4619      	mov	r1, r3
 8008540:	4812      	ldr	r0, [pc, #72]	; (800858c <HAL_HCD_MspInit+0xc0>)
 8008542:	f7f9 fb7f 	bl	8001c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 8008548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854a:	4a0f      	ldr	r2, [pc, #60]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	6353      	str	r3, [r2, #52]	; 0x34
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	4a0b      	ldr	r2, [pc, #44]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 800855c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008560:	6453      	str	r3, [r2, #68]	; 0x44
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <HAL_HCD_MspInit+0xbc>)
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	2043      	movs	r0, #67	; 0x43
 8008574:	f7f9 fb2f 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008578:	2043      	movs	r0, #67	; 0x43
 800857a:	f7f9 fb48 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800857e:	bf00      	nop
 8008580:	3728      	adds	r7, #40	; 0x28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40023800 	.word	0x40023800
 800858c:	40020000 	.word	0x40020000

08008590 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff f8db 	bl	800775a <USBH_LL_IncTimer>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff f913 	bl	80077e6 <USBH_LL_Connect>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff f91c 	bl	8007814 <USBH_LL_Disconnect>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
 80085f0:	4613      	mov	r3, r2
 80085f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f8cd 	bl	80077ae <USBH_LL_PortEnabled>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff f8cd 	bl	80077ca <USBH_LL_PortDisabled>
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008646:	2b01      	cmp	r3, #1
 8008648:	d12a      	bne.n	80086a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800864a:	4a18      	ldr	r2, [pc, #96]	; (80086ac <USBH_LL_Init+0x74>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a15      	ldr	r2, [pc, #84]	; (80086ac <USBH_LL_Init+0x74>)
 8008656:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <USBH_LL_Init+0x74>)
 800865c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008660:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008662:	4b12      	ldr	r3, [pc, #72]	; (80086ac <USBH_LL_Init+0x74>)
 8008664:	2208      	movs	r2, #8
 8008666:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008668:	4b10      	ldr	r3, [pc, #64]	; (80086ac <USBH_LL_Init+0x74>)
 800866a:	2201      	movs	r2, #1
 800866c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800866e:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <USBH_LL_Init+0x74>)
 8008670:	2200      	movs	r2, #0
 8008672:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008674:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <USBH_LL_Init+0x74>)
 8008676:	2202      	movs	r2, #2
 8008678:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <USBH_LL_Init+0x74>)
 800867c:	2200      	movs	r2, #0
 800867e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008680:	480a      	ldr	r0, [pc, #40]	; (80086ac <USBH_LL_Init+0x74>)
 8008682:	f7f9 fc94 	bl	8001fae <HAL_HCD_Init>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800868c:	f7f8 f9b8 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008690:	4806      	ldr	r0, [pc, #24]	; (80086ac <USBH_LL_Init+0x74>)
 8008692:	f7fa f878 	bl	8002786 <HAL_HCD_GetCurrentFrame>
 8008696:	4603      	mov	r3, r0
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f84e 	bl	800773c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	2000060c 	.word	0x2000060c

080086b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f9 ffe7 	bl	800269a <HAL_HCD_Start>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f95c 	bl	8008990 <USBH_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f9 ffef 	bl	80026e0 <HAL_HCD_Stop>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 f941 	bl	8008990 <USBH_Get_USB_Status>
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008712:	7bbb      	ldrb	r3, [r7, #14]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800872e:	4618      	mov	r0, r3
 8008730:	f7fa f837 	bl	80027a2 <HAL_HCD_GetCurrentSpeed>
 8008734:	4603      	mov	r3, r0
 8008736:	2b02      	cmp	r3, #2
 8008738:	d00c      	beq.n	8008754 <USBH_LL_GetSpeed+0x38>
 800873a:	2b02      	cmp	r3, #2
 800873c:	d80d      	bhi.n	800875a <USBH_LL_GetSpeed+0x3e>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <USBH_LL_GetSpeed+0x2c>
 8008742:	2b01      	cmp	r3, #1
 8008744:	d003      	beq.n	800874e <USBH_LL_GetSpeed+0x32>
 8008746:	e008      	b.n	800875a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
    break;
 800874c:	e008      	b.n	8008760 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800874e:	2301      	movs	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
    break;
 8008752:	e005      	b.n	8008760 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008754:	2302      	movs	r3, #2
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	e002      	b.n	8008760 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800875a:	2301      	movs	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
    break;
 800875e:	bf00      	nop
  }
  return  speed;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008780:	4618      	mov	r0, r3
 8008782:	f7f9 ffca 	bl	800271a <HAL_HCD_ResetPort>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f8ff 	bl	8008990 <USBH_Get_USB_Status>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f9 ffd1 	bl	800275e <HAL_HCD_HC_GetXferCount>
 80087bc:	4603      	mov	r3, r0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087c6:	b590      	push	{r4, r7, lr}
 80087c8:	b089      	sub	sp, #36	; 0x24
 80087ca:	af04      	add	r7, sp, #16
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	461a      	mov	r2, r3
 80087d4:	4603      	mov	r3, r0
 80087d6:	70fb      	strb	r3, [r7, #3]
 80087d8:	460b      	mov	r3, r1
 80087da:	70bb      	strb	r3, [r7, #2]
 80087dc:	4613      	mov	r3, r2
 80087de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087ee:	787c      	ldrb	r4, [r7, #1]
 80087f0:	78ba      	ldrb	r2, [r7, #2]
 80087f2:	78f9      	ldrb	r1, [r7, #3]
 80087f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	4623      	mov	r3, r4
 8008806:	f7f9 fc34 	bl	8002072 <HAL_HCD_HC_Init>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 f8bd 	bl	8008990 <USBH_Get_USB_Status>
 8008816:	4603      	mov	r3, r0
 8008818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881a:	7bbb      	ldrb	r3, [r7, #14]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	bd90      	pop	{r4, r7, pc}

08008824 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7f9 fca4 	bl	8002190 <HAL_HCD_HC_Halt>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f89e 	bl	8008990 <USBH_Get_USB_Status>
 8008854:	4603      	mov	r3, r0
 8008856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008858:	7bbb      	ldrb	r3, [r7, #14]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008862:	b590      	push	{r4, r7, lr}
 8008864:	b089      	sub	sp, #36	; 0x24
 8008866:	af04      	add	r7, sp, #16
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	4608      	mov	r0, r1
 800886c:	4611      	mov	r1, r2
 800886e:	461a      	mov	r2, r3
 8008870:	4603      	mov	r3, r0
 8008872:	70fb      	strb	r3, [r7, #3]
 8008874:	460b      	mov	r3, r1
 8008876:	70bb      	strb	r3, [r7, #2]
 8008878:	4613      	mov	r3, r2
 800887a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800888a:	787c      	ldrb	r4, [r7, #1]
 800888c:	78ba      	ldrb	r2, [r7, #2]
 800888e:	78f9      	ldrb	r1, [r7, #3]
 8008890:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	4623      	mov	r3, r4
 80088a6:	f7f9 fc97 	bl	80021d8 <HAL_HCD_HC_SubmitRequest>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 f86d 	bl	8008990 <USBH_Get_USB_Status>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd90      	pop	{r4, r7, pc}

080088c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f9 ff2b 	bl	8002736 <HAL_HCD_HC_GetURBState>
 80088e0:	4603      	mov	r3, r0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d103      	bne.n	8008908 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f870 	bl	80089e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008908:	20c8      	movs	r0, #200	; 0xc8
 800890a:	f7f9 f865 	bl	80019d8 <HAL_Delay>
  return USBH_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
 8008924:	4613      	mov	r3, r2
 8008926:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800892e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	212c      	movs	r1, #44	; 0x2c
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	4413      	add	r3, r2
 800893c:	333b      	adds	r3, #59	; 0x3b
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	212c      	movs	r1, #44	; 0x2c
 800894a:	fb01 f303 	mul.w	r3, r1, r3
 800894e:	4413      	add	r3, r2
 8008950:	3354      	adds	r3, #84	; 0x54
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e008      	b.n	800896a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	212c      	movs	r1, #44	; 0x2c
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	3355      	adds	r3, #85	; 0x55
 8008966:	78ba      	ldrb	r2, [r7, #2]
 8008968:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f9 f829 	bl	80019d8 <HAL_Delay>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d817      	bhi.n	80089d4 <USBH_Get_USB_Status+0x44>
 80089a4:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <USBH_Get_USB_Status+0x1c>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089c3 	.word	0x080089c3
 80089b4:	080089c9 	.word	0x080089c9
 80089b8:	080089cf 	.word	0x080089cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
    break;
 80089c0:	e00b      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089c2:	2302      	movs	r3, #2
 80089c4:	73fb      	strb	r3, [r7, #15]
    break;
 80089c6:	e008      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    break;
 80089cc:	e005      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089ce:	2302      	movs	r3, #2
 80089d0:	73fb      	strb	r3, [r7, #15]
    break;
 80089d2:	e002      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089d4:	2302      	movs	r3, #2
 80089d6:	73fb      	strb	r3, [r7, #15]
    break;
 80089d8:	bf00      	nop
  }
  return usb_status;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80089fc:	2301      	movs	r3, #1
 80089fe:	73fb      	strb	r3, [r7, #15]
 8008a00:	e001      	b.n	8008a06 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4803      	ldr	r0, [pc, #12]	; (8008a1c <MX_DriverVbusFS+0x34>)
 8008a0e:	f7f9 fab5 	bl	8001f7c <HAL_GPIO_WritePin>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40020800 	.word	0x40020800

08008a20 <__errno>:
 8008a20:	4b01      	ldr	r3, [pc, #4]	; (8008a28 <__errno+0x8>)
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	20000030 	.word	0x20000030

08008a2c <__libc_init_array>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	4d0d      	ldr	r5, [pc, #52]	; (8008a64 <__libc_init_array+0x38>)
 8008a30:	4c0d      	ldr	r4, [pc, #52]	; (8008a68 <__libc_init_array+0x3c>)
 8008a32:	1b64      	subs	r4, r4, r5
 8008a34:	10a4      	asrs	r4, r4, #2
 8008a36:	2600      	movs	r6, #0
 8008a38:	42a6      	cmp	r6, r4
 8008a3a:	d109      	bne.n	8008a50 <__libc_init_array+0x24>
 8008a3c:	4d0b      	ldr	r5, [pc, #44]	; (8008a6c <__libc_init_array+0x40>)
 8008a3e:	4c0c      	ldr	r4, [pc, #48]	; (8008a70 <__libc_init_array+0x44>)
 8008a40:	f000 f8f8 	bl	8008c34 <_init>
 8008a44:	1b64      	subs	r4, r4, r5
 8008a46:	10a4      	asrs	r4, r4, #2
 8008a48:	2600      	movs	r6, #0
 8008a4a:	42a6      	cmp	r6, r4
 8008a4c:	d105      	bne.n	8008a5a <__libc_init_array+0x2e>
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a54:	4798      	blx	r3
 8008a56:	3601      	adds	r6, #1
 8008a58:	e7ee      	b.n	8008a38 <__libc_init_array+0xc>
 8008a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5e:	4798      	blx	r3
 8008a60:	3601      	adds	r6, #1
 8008a62:	e7f2      	b.n	8008a4a <__libc_init_array+0x1e>
 8008a64:	08009170 	.word	0x08009170
 8008a68:	08009170 	.word	0x08009170
 8008a6c:	08009170 	.word	0x08009170
 8008a70:	08009174 	.word	0x08009174

08008a74 <malloc>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <malloc+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f000 b863 	b.w	8008b44 <_malloc_r>
 8008a7e:	bf00      	nop
 8008a80:	20000030 	.word	0x20000030

08008a84 <free>:
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <free+0xc>)
 8008a86:	4601      	mov	r1, r0
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f000 b80b 	b.w	8008aa4 <_free_r>
 8008a8e:	bf00      	nop
 8008a90:	20000030 	.word	0x20000030

08008a94 <memset>:
 8008a94:	4402      	add	r2, r0
 8008a96:	4603      	mov	r3, r0
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d100      	bne.n	8008a9e <memset+0xa>
 8008a9c:	4770      	bx	lr
 8008a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa2:	e7f9      	b.n	8008a98 <memset+0x4>

08008aa4 <_free_r>:
 8008aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d048      	beq.n	8008b3c <_free_r+0x98>
 8008aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aae:	9001      	str	r0, [sp, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ab6:	bfb8      	it	lt
 8008ab8:	18e4      	addlt	r4, r4, r3
 8008aba:	f000 f8ad 	bl	8008c18 <__malloc_lock>
 8008abe:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <_free_r+0x9c>)
 8008ac0:	9801      	ldr	r0, [sp, #4]
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	4615      	mov	r5, r2
 8008ac6:	b933      	cbnz	r3, 8008ad6 <_free_r+0x32>
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6014      	str	r4, [r2, #0]
 8008acc:	b003      	add	sp, #12
 8008ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad2:	f000 b8a7 	b.w	8008c24 <__malloc_unlock>
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	d90b      	bls.n	8008af2 <_free_r+0x4e>
 8008ada:	6821      	ldr	r1, [r4, #0]
 8008adc:	1862      	adds	r2, r4, r1
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	bf04      	itt	eq
 8008ae2:	681a      	ldreq	r2, [r3, #0]
 8008ae4:	685b      	ldreq	r3, [r3, #4]
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	bf04      	itt	eq
 8008aea:	1852      	addeq	r2, r2, r1
 8008aec:	6022      	streq	r2, [r4, #0]
 8008aee:	602c      	str	r4, [r5, #0]
 8008af0:	e7ec      	b.n	8008acc <_free_r+0x28>
 8008af2:	461a      	mov	r2, r3
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b10b      	cbz	r3, 8008afc <_free_r+0x58>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d9fa      	bls.n	8008af2 <_free_r+0x4e>
 8008afc:	6811      	ldr	r1, [r2, #0]
 8008afe:	1855      	adds	r5, r2, r1
 8008b00:	42a5      	cmp	r5, r4
 8008b02:	d10b      	bne.n	8008b1c <_free_r+0x78>
 8008b04:	6824      	ldr	r4, [r4, #0]
 8008b06:	4421      	add	r1, r4
 8008b08:	1854      	adds	r4, r2, r1
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	d1dd      	bne.n	8008acc <_free_r+0x28>
 8008b10:	681c      	ldr	r4, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	6053      	str	r3, [r2, #4]
 8008b16:	4421      	add	r1, r4
 8008b18:	6011      	str	r1, [r2, #0]
 8008b1a:	e7d7      	b.n	8008acc <_free_r+0x28>
 8008b1c:	d902      	bls.n	8008b24 <_free_r+0x80>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	e7d3      	b.n	8008acc <_free_r+0x28>
 8008b24:	6825      	ldr	r5, [r4, #0]
 8008b26:	1961      	adds	r1, r4, r5
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf04      	itt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	bf04      	itt	eq
 8008b34:	1949      	addeq	r1, r1, r5
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	6054      	str	r4, [r2, #4]
 8008b3a:	e7c7      	b.n	8008acc <_free_r+0x28>
 8008b3c:	b003      	add	sp, #12
 8008b3e:	bd30      	pop	{r4, r5, pc}
 8008b40:	200000dc 	.word	0x200000dc

08008b44 <_malloc_r>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	1ccd      	adds	r5, r1, #3
 8008b48:	f025 0503 	bic.w	r5, r5, #3
 8008b4c:	3508      	adds	r5, #8
 8008b4e:	2d0c      	cmp	r5, #12
 8008b50:	bf38      	it	cc
 8008b52:	250c      	movcc	r5, #12
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	4606      	mov	r6, r0
 8008b58:	db01      	blt.n	8008b5e <_malloc_r+0x1a>
 8008b5a:	42a9      	cmp	r1, r5
 8008b5c:	d903      	bls.n	8008b66 <_malloc_r+0x22>
 8008b5e:	230c      	movs	r3, #12
 8008b60:	6033      	str	r3, [r6, #0]
 8008b62:	2000      	movs	r0, #0
 8008b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b66:	f000 f857 	bl	8008c18 <__malloc_lock>
 8008b6a:	4921      	ldr	r1, [pc, #132]	; (8008bf0 <_malloc_r+0xac>)
 8008b6c:	680a      	ldr	r2, [r1, #0]
 8008b6e:	4614      	mov	r4, r2
 8008b70:	b99c      	cbnz	r4, 8008b9a <_malloc_r+0x56>
 8008b72:	4f20      	ldr	r7, [pc, #128]	; (8008bf4 <_malloc_r+0xb0>)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	b923      	cbnz	r3, 8008b82 <_malloc_r+0x3e>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f000 f83c 	bl	8008bf8 <_sbrk_r>
 8008b80:	6038      	str	r0, [r7, #0]
 8008b82:	4629      	mov	r1, r5
 8008b84:	4630      	mov	r0, r6
 8008b86:	f000 f837 	bl	8008bf8 <_sbrk_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	d123      	bne.n	8008bd6 <_malloc_r+0x92>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f846 	bl	8008c24 <__malloc_unlock>
 8008b98:	e7e3      	b.n	8008b62 <_malloc_r+0x1e>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	1b5b      	subs	r3, r3, r5
 8008b9e:	d417      	bmi.n	8008bd0 <_malloc_r+0x8c>
 8008ba0:	2b0b      	cmp	r3, #11
 8008ba2:	d903      	bls.n	8008bac <_malloc_r+0x68>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	441c      	add	r4, r3
 8008ba8:	6025      	str	r5, [r4, #0]
 8008baa:	e004      	b.n	8008bb6 <_malloc_r+0x72>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	42a2      	cmp	r2, r4
 8008bb0:	bf0c      	ite	eq
 8008bb2:	600b      	streq	r3, [r1, #0]
 8008bb4:	6053      	strne	r3, [r2, #4]
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f000 f834 	bl	8008c24 <__malloc_unlock>
 8008bbc:	f104 000b 	add.w	r0, r4, #11
 8008bc0:	1d23      	adds	r3, r4, #4
 8008bc2:	f020 0007 	bic.w	r0, r0, #7
 8008bc6:	1ac2      	subs	r2, r0, r3
 8008bc8:	d0cc      	beq.n	8008b64 <_malloc_r+0x20>
 8008bca:	1a1b      	subs	r3, r3, r0
 8008bcc:	50a3      	str	r3, [r4, r2]
 8008bce:	e7c9      	b.n	8008b64 <_malloc_r+0x20>
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	6864      	ldr	r4, [r4, #4]
 8008bd4:	e7cc      	b.n	8008b70 <_malloc_r+0x2c>
 8008bd6:	1cc4      	adds	r4, r0, #3
 8008bd8:	f024 0403 	bic.w	r4, r4, #3
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d0e3      	beq.n	8008ba8 <_malloc_r+0x64>
 8008be0:	1a21      	subs	r1, r4, r0
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f808 	bl	8008bf8 <_sbrk_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1dd      	bne.n	8008ba8 <_malloc_r+0x64>
 8008bec:	e7cf      	b.n	8008b8e <_malloc_r+0x4a>
 8008bee:	bf00      	nop
 8008bf0:	200000dc 	.word	0x200000dc
 8008bf4:	200000e0 	.word	0x200000e0

08008bf8 <_sbrk_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d06      	ldr	r5, [pc, #24]	; (8008c14 <_sbrk_r+0x1c>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f8 f8a4 	bl	8000d50 <_sbrk>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_sbrk_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_sbrk_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000910 	.word	0x20000910

08008c18 <__malloc_lock>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__malloc_lock+0x8>)
 8008c1a:	f000 b809 	b.w	8008c30 <__retarget_lock_acquire_recursive>
 8008c1e:	bf00      	nop
 8008c20:	20000918 	.word	0x20000918

08008c24 <__malloc_unlock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_unlock+0x8>)
 8008c26:	f000 b804 	b.w	8008c32 <__retarget_lock_release_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000918 	.word	0x20000918

08008c30 <__retarget_lock_acquire_recursive>:
 8008c30:	4770      	bx	lr

08008c32 <__retarget_lock_release_recursive>:
 8008c32:	4770      	bx	lr

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
