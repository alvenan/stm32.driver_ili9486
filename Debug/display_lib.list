
display_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008dc  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c566  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4c  00000000  00000000  0003c62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00040378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00041550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a1c  00000000  00000000  000425b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fa0  00000000  00000000  00066fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc1ba  00000000  00000000  0007ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b12e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c20  00000000  00000000  0014b184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008904 	.word	0x08008904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008904 	.word	0x08008904

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <ILI9341_SendCommand+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <ILI9341_SendCommand+0x58>)
 80004d4:	8811      	ldrh	r1, [r2, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fba9 	bl	8001c30 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <ILI9341_SendCommand+0x60>)
 80004e4:	8811      	ldrh	r1, [r2, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fba1 	bl	8001c30 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80004ee:	f107 010f 	add.w	r1, r7, #15
 80004f2:	2305      	movs	r3, #5
 80004f4:	2201      	movs	r2, #1
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <ILI9341_SendCommand+0x64>)
 80004f8:	f004 fd31 	bl	8004f5e <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <ILI9341_SendCommand+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <ILI9341_SendCommand+0x60>)
 8000502:	8811      	ldrh	r1, [r2, #0]
 8000504:	2201      	movs	r2, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fb92 	bl	8001c30 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000114 	.word	0x20000114
 8000518:	20000118 	.word	0x20000118
 800051c:	2000010c 	.word	0x2000010c
 8000520:	20000110 	.word	0x20000110
 8000524:	200000b4 	.word	0x200000b4

08000528 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <ILI9341_SendData+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <ILI9341_SendData+0x58>)
 800053c:	8811      	ldrh	r1, [r2, #0]
 800053e:	2201      	movs	r2, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fb75 	bl	8001c30 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <ILI9341_SendData+0x5c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <ILI9341_SendData+0x60>)
 800054c:	8811      	ldrh	r1, [r2, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fb6d 	bl	8001c30 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000556:	f107 010f 	add.w	r1, r7, #15
 800055a:	2305      	movs	r3, #5
 800055c:	2201      	movs	r2, #1
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9341_SendData+0x64>)
 8000560:	f004 fcfd 	bl	8004f5e <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <ILI9341_SendData+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <ILI9341_SendData+0x60>)
 800056a:	8811      	ldrh	r1, [r2, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fb5e 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000114 	.word	0x20000114
 8000580:	20000118 	.word	0x20000118
 8000584:	2000010c 	.word	0x2000010c
 8000588:	20000110 	.word	0x20000110
 800058c:	200000b4 	.word	0x200000b4

08000590 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4623      	mov	r3, r4
 80005a0:	80fb      	strh	r3, [r7, #6]
 80005a2:	4603      	mov	r3, r0
 80005a4:	80bb      	strh	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
 80005aa:	4613      	mov	r3, r2
 80005ac:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f7ff ff86 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffb3 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffae 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffa7 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa2 	bl	8000528 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80005e4:	202b      	movs	r0, #43	; 0x2b
 80005e6:	f7ff ff6b 	bl	80004c0 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff98 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff93 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000602:	883b      	ldrh	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff8c 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff87 	bl	8000528 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ff50 	bl	80004c0 <ILI9341_SendCommand>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <ILI9486_Init>:
};
//4. Initialise function
void ILI9486_Init(SPI_HandleTypeDef *spiLcdHandle,
		GPIO_TypeDef *csPORT, uint16_t csPIN,
		GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	80fb      	strh	r3, [r7, #6]


	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	4838      	ldr	r0, [pc, #224]	; (8000720 <ILI9486_Init+0xf8>)
 800063e:	f008 f883 	bl	8008748 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <ILI9486_Init+0xfc>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000648:	4a37      	ldr	r2, [pc, #220]	; (8000728 <ILI9486_Init+0x100>)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800064e:	4a37      	ldr	r2, [pc, #220]	; (800072c <ILI9486_Init+0x104>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000654:	4a36      	ldr	r2, [pc, #216]	; (8000730 <ILI9486_Init+0x108>)
 8000656:	8c3b      	ldrh	r3, [r7, #32]
 8000658:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <ILI9486_Init+0xfc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a32      	ldr	r2, [pc, #200]	; (8000728 <ILI9486_Init+0x100>)
 8000660:	8811      	ldrh	r1, [r2, #0]
 8000662:	2201      	movs	r2, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fae3 	bl	8001c30 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <ILI9486_Init+0x10c>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000670:	4a31      	ldr	r2, [pc, #196]	; (8000738 <ILI9486_Init+0x110>)
 8000672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000674:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800067e:	f001 fad7 	bl	8001c30 <HAL_GPIO_WritePin>

	/* Reset LCD */
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);
 8000682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800068a:	f001 fad1 	bl	8001c30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_RESET);
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000696:	f001 facb 	bl	8001c30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);
 800069a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a2:	f001 fac5 	bl	8001c30 <HAL_GPIO_WritePin>

	/* Write init code */
	uint8_t  numBytes, tmp, i;

	while ( (numBytes=(ili9486_init_sequence[i]))>0 ) { // end marker == 0
 80006a6:	e02f      	b.n	8000708 <ILI9486_Init+0xe0>
		i+=1;
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	3301      	adds	r3, #1
 80006ac:	75bb      	strb	r3, [r7, #22]
		if ( numBytes&0x80 ) {
 80006ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da0b      	bge.n	80006ce <ILI9486_Init+0xa6>
			//Serial.print("delay ");
			tmp = ili9486_init_sequence[i];
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	4a20      	ldr	r2, [pc, #128]	; (800073c <ILI9486_Init+0x114>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	757b      	strb	r3, [r7, #21]
			i+=1;
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	3301      	adds	r3, #1
 80006c2:	75bb      	strb	r3, [r7, #22]
			//Serial.println(tmp);
			HAL_Delay(tmp); // up to 255 millis
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ffe0 	bl	800168c <HAL_Delay>
 80006cc:	e01c      	b.n	8000708 <ILI9486_Init+0xe0>
		} else {
			//Serial.print(numBytes); Serial.print("byte(s): ");
			tmp = ili9486_init_sequence[i];
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <ILI9486_Init+0x114>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	757b      	strb	r3, [r7, #21]
			i+=1;
 80006d6:	7dbb      	ldrb	r3, [r7, #22]
 80006d8:	3301      	adds	r3, #1
 80006da:	75bb      	strb	r3, [r7, #22]
			//Serial.write('<'); Serial.print(tmp, HEX); Serial.write('>');
			ILI9341_SendCommand(tmp); // first byte is command
 80006dc:	7d7b      	ldrb	r3, [r7, #21]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff feee 	bl	80004c0 <ILI9341_SendCommand>
			while (--numBytes) { //   For each argument...
 80006e4:	e00a      	b.n	80006fc <ILI9486_Init+0xd4>
				tmp = ili9486_init_sequence[i];
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <ILI9486_Init+0x114>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	757b      	strb	r3, [r7, #21]
				i+=1;
 80006ee:	7dbb      	ldrb	r3, [r7, #22]
 80006f0:	3301      	adds	r3, #1
 80006f2:	75bb      	strb	r3, [r7, #22]
				//Serial.print(tmp, HEX); Serial.write('.');
				ILI9341_SendData(tmp); // all consecutive bytes are data
 80006f4:	7d7b      	ldrb	r3, [r7, #21]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff16 	bl	8000528 <ILI9341_SendData>
			while (--numBytes) { //   For each argument...
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1ee      	bne.n	80006e6 <ILI9486_Init+0xbe>
	while ( (numBytes=(ili9486_init_sequence[i]))>0 ) { // end marker == 0
 8000708:	7dbb      	ldrb	r3, [r7, #22]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <ILI9486_Init+0x114>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	75fb      	strb	r3, [r7, #23]
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1c8      	bne.n	80006a8 <ILI9486_Init+0x80>
			}
		}
	}

 }
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000b4 	.word	0x200000b4
 8000724:	2000010c 	.word	0x2000010c
 8000728:	20000110 	.word	0x20000110
 800072c:	20000114 	.word	0x20000114
 8000730:	20000118 	.word	0x20000118
 8000734:	2000011c 	.word	0x2000011c
 8000738:	20000120 	.word	0x20000120
 800073c:	08008e40 	.word	0x08008e40

08000740 <ILI9341_DrawPixel>:



//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
 800074a:	460b      	mov	r3, r1
 800074c:	80bb      	strh	r3, [r7, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	88b9      	ldrh	r1, [r7, #4]
 8000758:	88f8      	ldrh	r0, [r7, #6]
 800075a:	f7ff ff19 	bl	8000590 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fede 	bl	8000528 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 800076c:	887b      	ldrh	r3, [r7, #2]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fed9 	bl	8000528 <ILI9341_SendData>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9486_PIXEL_COUNT;
 800078a:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800078e:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000790:	23ff      	movs	r3, #255	; 0xff
 8000792:	817b      	strh	r3, [r7, #10]

	if(rotationNum==1 || rotationNum==3)
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <ILI9341_Fill+0x88>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d003      	beq.n	80007a4 <ILI9341_Fill+0x24>
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <ILI9341_Fill+0x88>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d108      	bne.n	80007b6 <ILI9341_Fill+0x36>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9486_WIDTH -1, ILI9486_HEIGHT -1);
 80007a4:	f240 13df 	movw	r3, #479	; 0x1df
 80007a8:	f240 123f 	movw	r2, #319	; 0x13f
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff feee 	bl	8000590 <ILI9341_SetCursorPosition>
 80007b4:	e00f      	b.n	80007d6 <ILI9341_Fill+0x56>
	}
	else if(rotationNum==2 || rotationNum==4)
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <ILI9341_Fill+0x88>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d003      	beq.n	80007c6 <ILI9341_Fill+0x46>
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <ILI9341_Fill+0x88>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d117      	bne.n	80007f6 <ILI9341_Fill+0x76>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9486_HEIGHT -1, ILI9486_WIDTH -1);
 80007c6:	f240 133f 	movw	r3, #319	; 0x13f
 80007ca:	f240 12df 	movw	r2, #479	; 0x1df
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fedd 	bl	8000590 <ILI9341_SetCursorPosition>
	}


	while (n) {
 80007d6:	e00e      	b.n	80007f6 <ILI9341_Fill+0x76>
			n--;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3b01      	subs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe9e 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe99 	bl	8000528 <ILI9341_SendData>
	while (n) {
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1ed      	bne.n	80007d8 <ILI9341_Fill+0x58>
	}
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000

0800080c <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	3301      	adds	r3, #1
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	1a8a      	subs	r2, r1, r2
 8000828:	3201      	adds	r2, #1
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
	if (n>ILI9486_PIXEL_COUNT) n=ILI9486_PIXEL_COUNT;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000836:	d902      	bls.n	800083e <ILI9341_Fill_Rect+0x32>
 8000838:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800083c:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	b298      	uxth	r0, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	b299      	uxth	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	b29a      	uxth	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	f7ff fe9f 	bl	8000590 <ILI9341_SetCursorPosition>
	while (n) {
 8000852:	e00e      	b.n	8000872 <ILI9341_Fill_Rect+0x66>
			n--;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3b01      	subs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 800085a:	8c3b      	ldrh	r3, [r7, #32]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe60 	bl	8000528 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000868:	8c3b      	ldrh	r3, [r7, #32]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe5b 	bl	8000528 <ILI9341_SendData>
	while (n) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1ed      	bne.n	8000854 <ILI9341_Fill_Rect+0x48>
	}
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	4611      	mov	r1, r2
 8000890:	461a      	mov	r2, r3
 8000892:	4623      	mov	r3, r4
 8000894:	80fb      	strh	r3, [r7, #6]
 8000896:	4603      	mov	r3, r0
 8000898:	80bb      	strh	r3, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	70fb      	strb	r3, [r7, #3]
 800089e:	4613      	mov	r3, r2
 80008a0:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80008a2:	4b99      	ldr	r3, [pc, #612]	; (8000b08 <ILI9341_drawChar+0x284>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d003      	beq.n	80008b2 <ILI9341_drawChar+0x2e>
 80008aa:	4b97      	ldr	r3, [pc, #604]	; (8000b08 <ILI9341_drawChar+0x284>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d120      	bne.n	80008f4 <ILI9341_drawChar+0x70>
	{
		if((x >= ILI9486_WIDTH)            || // Clip right
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008ba:	f280 811e 	bge.w	8000afa <ILI9341_drawChar+0x276>
 80008be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80008c6:	f280 8118 	bge.w	8000afa <ILI9341_drawChar+0x276>
     (y >= ILI9486_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80008ca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008ce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	440b      	add	r3, r1
     (y >= ILI9486_HEIGHT)           || // Clip bottom
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f340 810c 	ble.w	8000afa <ILI9341_drawChar+0x276>
     ((y + 8 * size - 1) < 0))   // Clip top
 80008e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dc22      	bgt.n	8000938 <ILI9341_drawChar+0xb4>
    return;
 80008f2:	e102      	b.n	8000afa <ILI9341_drawChar+0x276>
	}
	else
	{
		if((y >= ILI9486_WIDTH)            || // Clip right
 80008f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008fc:	f280 80ff 	bge.w	8000afe <ILI9341_drawChar+0x27a>
 8000900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000904:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000908:	f280 80f9 	bge.w	8000afe <ILI9341_drawChar+0x27a>
     (x >= ILI9486_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800090c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000910:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	440b      	add	r3, r1
     (x >= ILI9486_HEIGHT)           || // Clip bottom
 800091e:	2b00      	cmp	r3, #0
 8000920:	f340 80ed 	ble.w	8000afe <ILI9341_drawChar+0x27a>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000924:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000928:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8000930:	2b00      	cmp	r3, #0
 8000932:	f340 80e4 	ble.w	8000afe <ILI9341_drawChar+0x27a>
 8000936:	e000      	b.n	800093a <ILI9341_drawChar+0xb6>
		if((x >= ILI9486_WIDTH)            || // Clip right
 8000938:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800093a:	4b74      	ldr	r3, [pc, #464]	; (8000b0c <ILI9341_drawChar+0x288>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f083 0301 	eor.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d005      	beq.n	8000954 <ILI9341_drawChar+0xd0>
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2baf      	cmp	r3, #175	; 0xaf
 800094c:	d902      	bls.n	8000954 <ILI9341_drawChar+0xd0>
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	3301      	adds	r3, #1
 8000952:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e0c9      	b.n	8000aee <ILI9341_drawChar+0x26a>
    uint8_t line;
    if (i == 5)
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d102      	bne.n	8000968 <ILI9341_drawChar+0xe4>
      line = 0x0;
 8000962:	2300      	movs	r3, #0
 8000964:	73bb      	strb	r3, [r7, #14]
 8000966:	e00b      	b.n	8000980 <ILI9341_drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	461a      	mov	r2, r3
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4413      	add	r3, r2
 8000978:	4a65      	ldr	r2, [pc, #404]	; (8000b10 <ILI9341_drawChar+0x28c>)
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000980:	2300      	movs	r3, #0
 8000982:	737b      	strb	r3, [r7, #13]
 8000984:	e0a8      	b.n	8000ad8 <ILI9341_drawChar+0x254>
      if (line & 0x1) {
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d04b      	beq.n	8000a28 <ILI9341_drawChar+0x1a4>
        if (size == 1) // default size
 8000990:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000994:	2b01      	cmp	r3, #1
 8000996:	d110      	bne.n	80009ba <ILI9341_drawChar+0x136>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099c:	b29a      	uxth	r2, r3
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4413      	add	r3, r2
 80009a2:	b298      	uxth	r0, r3
 80009a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	883a      	ldrh	r2, [r7, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	f7ff fec4 	bl	8000740 <ILI9341_DrawPixel>
 80009b8:	e085      	b.n	8000ac6 <ILI9341_drawChar+0x242>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80009ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80009c6:	fb01 f303 	mul.w	r3, r1, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009d6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80009da:	fb01 f303 	mul.w	r3, r1, r3
 80009de:	4413      	add	r3, r2
 80009e0:	461c      	mov	r4, r3
 80009e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ea:	441a      	add	r2, r3
 80009ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	461d      	mov	r5, r3
 80009fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a06:	441a      	add	r2, r3
 8000a08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a0c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a10:	fb01 f303 	mul.w	r3, r1, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	883b      	ldrh	r3, [r7, #0]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	462a      	mov	r2, r5
 8000a20:	4621      	mov	r1, r4
 8000a22:	f7ff fef3 	bl	800080c <ILI9341_Fill_Rect>
 8000a26:	e04e      	b.n	8000ac6 <ILI9341_drawChar+0x242>
        }
      } else if (bg != color) {
 8000a28:	8c3a      	ldrh	r2, [r7, #32]
 8000a2a:	883b      	ldrh	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d04a      	beq.n	8000ac6 <ILI9341_drawChar+0x242>
        if (size == 1) // default size
 8000a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d110      	bne.n	8000a5a <ILI9341_drawChar+0x1d6>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4413      	add	r3, r2
 8000a42:	b298      	uxth	r0, r3
 8000a44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	8c3a      	ldrh	r2, [r7, #32]
 8000a52:	4619      	mov	r1, r3
 8000a54:	f7ff fe74 	bl	8000740 <ILI9341_DrawPixel>
 8000a58:	e035      	b.n	8000ac6 <ILI9341_drawChar+0x242>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a76:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a7a:	fb01 f303 	mul.w	r3, r1, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	461c      	mov	r4, r3
 8000a82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a90:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	461d      	mov	r5, r3
 8000a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000aac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ab0:	fb01 f303 	mul.w	r3, r1, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	8c3b      	ldrh	r3, [r7, #32]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4613      	mov	r3, r2
 8000abe:	462a      	mov	r2, r5
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	f7ff fea3 	bl	800080c <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000acc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	737b      	strb	r3, [r7, #13]
 8000ad8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	f77f af52 	ble.w	8000986 <ILI9341_drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	f77f af31 	ble.w	800095a <ILI9341_drawChar+0xd6>
 8000af8:	e002      	b.n	8000b00 <ILI9341_drawChar+0x27c>
    return;
 8000afa:	bf00      	nop
 8000afc:	e000      	b.n	8000b00 <ILI9341_drawChar+0x27c>
    return;
 8000afe:	bf00      	nop
    }
  }
}
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bdb0      	pop	{r4, r5, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	200000b0 	.word	0x200000b0
 8000b10:	08008940 	.word	0x08008940

08000b14 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	4603      	mov	r3, r0
 8000b24:	817b      	strh	r3, [r7, #10]
 8000b26:	460b      	mov	r3, r1
 8000b28:	813b      	strh	r3, [r7, #8]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	0052      	lsls	r2, r2, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	82fb      	strh	r3, [r7, #22]
 8000b44:	e01a      	b.n	8000b7c <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000b46:	8abb      	ldrh	r3, [r7, #20]
 8000b48:	8afa      	ldrh	r2, [r7, #22]
 8000b4a:	fb12 f303 	smulbb	r3, r2, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	897b      	ldrh	r3, [r7, #10]
 8000b52:	4413      	add	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b218      	sxth	r0, r3
 8000b58:	8afb      	ldrh	r3, [r7, #22]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	88fc      	ldrh	r4, [r7, #6]
 8000b62:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	4623      	mov	r3, r4
 8000b72:	f7ff fe87 	bl	8000884 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000b76:	8afb      	ldrh	r3, [r7, #22]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	82fb      	strh	r3, [r7, #22]
 8000b7c:	8afb      	ldrh	r3, [r7, #22]
 8000b7e:	2b27      	cmp	r3, #39	; 0x27
 8000b80:	d805      	bhi.n	8000b8e <ILI9341_printText+0x7a>
 8000b82:	8afb      	ldrh	r3, [r7, #22]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1db      	bne.n	8000b46 <ILI9341_printText+0x32>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	371c      	adds	r7, #28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
	...

08000b98 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d832      	bhi.n	8000c10 <ILI9341_setRotation+0x78>
 8000baa:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <ILI9341_setRotation+0x18>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bd5 	.word	0x08000bd5
 8000bb8:	08000be9 	.word	0x08000be9
 8000bbc:	08000bfd 	.word	0x08000bfd
	{
		case 1:
			rotationNum = 1;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <ILI9341_setRotation+0x94>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000bc6:	2036      	movs	r0, #54	; 0x36
 8000bc8:	f7ff fc7a 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000bcc:	2088      	movs	r0, #136	; 0x88
 8000bce:	f7ff fcab 	bl	8000528 <ILI9341_SendData>
			break;
 8000bd2:	e027      	b.n	8000c24 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <ILI9341_setRotation+0x94>)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000bda:	2036      	movs	r0, #54	; 0x36
 8000bdc:	f7ff fc70 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000be0:	2028      	movs	r0, #40	; 0x28
 8000be2:	f7ff fca1 	bl	8000528 <ILI9341_SendData>
			break;
 8000be6:	e01d      	b.n	8000c24 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <ILI9341_setRotation+0x94>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f7ff fc66 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000bf4:	2048      	movs	r0, #72	; 0x48
 8000bf6:	f7ff fc97 	bl	8000528 <ILI9341_SendData>
			break;
 8000bfa:	e013      	b.n	8000c24 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <ILI9341_setRotation+0x94>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c02:	2036      	movs	r0, #54	; 0x36
 8000c04:	f7ff fc5c 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c08:	20e8      	movs	r0, #232	; 0xe8
 8000c0a:	f7ff fc8d 	bl	8000528 <ILI9341_SendData>
			break;
 8000c0e:	e009      	b.n	8000c24 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <ILI9341_setRotation+0x94>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c16:	2036      	movs	r0, #54	; 0x36
 8000c18:	f7ff fc52 	bl	80004c0 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c1c:	2088      	movs	r0, #136	; 0x88
 8000c1e:	f7ff fc83 	bl	8000528 <ILI9341_SendData>
			break;
 8000c22:	bf00      	nop
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fcb7 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f845 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f000 f977 	bl	8000f30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c42:	f000 f8ab 	bl	8000d9c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c46:	f000 f8d7 	bl	8000df8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c4a:	f000 f905 	bl	8000e58 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000c4e:	f007 fa39 	bl	80080c4 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 8000c52:	f000 f937 	bl	8000ec4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  ILI9486_Init(&hspi2,
 8000c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <main+0x84>)
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <main+0x84>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6c:	4912      	ldr	r1, [pc, #72]	; (8000cb8 <main+0x88>)
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <main+0x8c>)
 8000c70:	f7ff fcda 	bl	8000628 <ILI9486_Init>
		  LCD_CS_GPIO_Port, LCD_CS_Pin,
		  LCD_DC_GPIO_Port, LCD_DC_Pin,
		  LCD_RST_GPIO_Port, LCD_RST_Pin);
  ILI9341_setRotation(2);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff ff8f 	bl	8000b98 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_CYAN);
 8000c7a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000c7e:	f7ff fd7f 	bl	8000780 <ILI9341_Fill>
  ILI9341_printText("Funcionou!!!!", 10, 10, COLOR_BLACK, COLOR_CYAN, 5);
 8000c82:	2305      	movs	r3, #5
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	220a      	movs	r2, #10
 8000c90:	210a      	movs	r1, #10
 8000c92:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <main+0x90>)
 8000c94:	f7ff ff3e 	bl	8000b14 <ILI9341_printText>
  ILI9341_printText("Finalmente!!!!", 10, 80, COLOR_BLACK, COLOR_CYAN, 5);
 8000c98:	2305      	movs	r3, #5
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2250      	movs	r2, #80	; 0x50
 8000ca6:	210a      	movs	r1, #10
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <main+0x94>)
 8000caa:	f7ff ff33 	bl	8000b14 <ILI9341_printText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cae:	f007 fa2f 	bl	8008110 <MX_USB_HOST_Process>
 8000cb2:	e7fc      	b.n	8000cae <main+0x7e>
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	20000134 	.word	0x20000134
 8000cc0:	0800891c 	.word	0x0800891c
 8000cc4:	0800892c 	.word	0x0800892c

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2230      	movs	r2, #48	; 0x30
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 fd44 	bl	8008764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <SystemClock_Config+0xcc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <SystemClock_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d46:	2307      	movs	r3, #7
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fadc 	bl	800430c <HAL_RCC_OscConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d5a:	f000 fa0b 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d62:	2302      	movs	r3, #2
 8000d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fd3d 	bl	80047fc <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d88:	f000 f9f4 	bl	8001174 <Error_Handler>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	3750      	adds	r7, #80	; 0x50
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x54>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x58>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dda:	f002 fcb3 	bl	8003744 <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 f9c6 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000018c 	.word	0x2000018c
 8000df0:	40005400 	.word	0x40005400
 8000df4:	000186a0 	.word	0x000186a0

08000df8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <MX_I2S3_Init+0x58>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e08:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <MX_I2S3_Init+0x5c>)
 8000e22:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_I2S3_Init+0x54>)
 8000e38:	f002 fdc8 	bl	80039cc <HAL_I2S_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e42:	f000 f997 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000238 	.word	0x20000238
 8000e50:	40003c00 	.word	0x40003c00
 8000e54:	00017700 	.word	0x00017700

08000e58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_SPI1_Init+0x64>)
 8000eaa:	f003 ffcf 	bl	8004e4c <HAL_SPI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f000 f95e 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200001e0 	.word	0x200001e0
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_SPI2_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000ef8:	2228      	movs	r2, #40	; 0x28
 8000efa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI2_Init+0x64>)
 8000f16:	f003 ff99 	bl	8004e4c <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 f928 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000134 	.word	0x20000134
 8000f2c:	40003800 	.word	0x40003800

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b84      	ldr	r3, [pc, #528]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a83      	ldr	r2, [pc, #524]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a7c      	ldr	r2, [pc, #496]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b7a      	ldr	r3, [pc, #488]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a75      	ldr	r2, [pc, #468]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b73      	ldr	r3, [pc, #460]	; (800115c <MX_GPIO_Init+0x22c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b6f      	ldr	r3, [pc, #444]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a6e      	ldr	r2, [pc, #440]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b6c      	ldr	r3, [pc, #432]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b68      	ldr	r3, [pc, #416]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a67      	ldr	r2, [pc, #412]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b61      	ldr	r3, [pc, #388]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a60      	ldr	r2, [pc, #384]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <MX_GPIO_Init+0x22c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000ff4:	485a      	ldr	r0, [pc, #360]	; (8001160 <MX_GPIO_Init+0x230>)
 8000ff6:	f000 fe1b 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4859      	ldr	r0, [pc, #356]	; (8001164 <MX_GPIO_Init+0x234>)
 8001000:	f000 fe16 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800100a:	4857      	ldr	r0, [pc, #348]	; (8001168 <MX_GPIO_Init+0x238>)
 800100c:	f000 fe10 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001010:	2200      	movs	r2, #0
 8001012:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001016:	4855      	ldr	r0, [pc, #340]	; (800116c <MX_GPIO_Init+0x23c>)
 8001018:	f000 fe0a 	bl	8001c30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin;
 800101c:	f24a 0308 	movw	r3, #40968	; 0xa008
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	484a      	ldr	r0, [pc, #296]	; (8001160 <MX_GPIO_Init+0x230>)
 8001036:	f000 fc5f 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800103a:	2301      	movs	r3, #1
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4844      	ldr	r0, [pc, #272]	; (8001164 <MX_GPIO_Init+0x234>)
 8001052:	f000 fc51 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001056:	2308      	movs	r3, #8
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001066:	2305      	movs	r3, #5
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	483c      	ldr	r0, [pc, #240]	; (8001164 <MX_GPIO_Init+0x234>)
 8001072:	f000 fc41 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4839      	ldr	r0, [pc, #228]	; (8001170 <MX_GPIO_Init+0x240>)
 800108c:	f000 fc34 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001090:	2304      	movs	r3, #4
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4831      	ldr	r0, [pc, #196]	; (8001168 <MX_GPIO_Init+0x238>)
 80010a4:	f000 fc28 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80010a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <MX_GPIO_Init+0x230>)
 80010c0:	f000 fc1a 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d6:	2305      	movs	r3, #5
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <MX_GPIO_Init+0x238>)
 80010e2:	f000 fc09 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|LCD_CS_Pin;
 80010e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_GPIO_Init+0x238>)
 8001100:	f000 fbfa 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001104:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001108:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <MX_GPIO_Init+0x23c>)
 800111e:	f000 fbeb 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001122:	2320      	movs	r3, #32
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_GPIO_Init+0x23c>)
 8001136:	f000 fbdf 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800113e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_GPIO_Init+0x230>)
 8001150:	f000 fbd2 	bl	80018f8 <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3730      	adds	r7, #48	; 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40021000 	.word	0x40021000
 8001164:	40020800 	.word	0x40020800
 8001168:	40020400 	.word	0x40020400
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40020000 	.word	0x40020000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f000 fb58 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_I2C_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12c      	bne.n	800124c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_I2C_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_I2C_MspInit+0x88>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800120e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <HAL_I2C_MspInit+0x8c>)
 800122c:	f000 fb64 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_I2C_MspInit+0x88>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_I2C_MspInit+0x88>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_I2C_MspInit+0x88>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020400 	.word	0x40020400

08001260 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <HAL_I2S_MspInit+0xf0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d15a      	bne.n	8001346 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc93 	bl	8004bcc <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80012ac:	f7ff ff62 	bl	8001174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_I2S_MspInit+0xf4>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001304:	2310      	movs	r3, #16
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001314:	2306      	movs	r3, #6
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <HAL_I2S_MspInit+0xf8>)
 8001320:	f000 faea 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001324:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001336:	2306      	movs	r3, #6
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <HAL_I2S_MspInit+0xfc>)
 8001342:	f000 fad9 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3738      	adds	r7, #56	; 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40003c00 	.word	0x40003c00
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020800 	.word	0x40020800

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_SPI_MspInit+0xe8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_SPI_MspInit+0xec>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a30      	ldr	r2, [pc, #192]	; (800144c <HAL_SPI_MspInit+0xec>)
 800138c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_SPI_MspInit+0xec>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ca:	2305      	movs	r3, #5
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <HAL_SPI_MspInit+0xf0>)
 80013d6:	f000 fa8f 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013da:	e031      	b.n	8001440 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <HAL_SPI_MspInit+0xf4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12c      	bne.n	8001440 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_SPI_MspInit+0xec>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_SPI_MspInit+0xec>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_SPI_MspInit+0xec>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_SPI_MspInit+0xec>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800141e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001430:	2305      	movs	r3, #5
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <HAL_SPI_MspInit+0xf8>)
 800143c:	f000 fa5c 	bl	80018f8 <HAL_GPIO_Init>
}
 8001440:	bf00      	nop
 8001442:	3730      	adds	r7, #48	; 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40013000 	.word	0x40013000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40003800 	.word	0x40003800
 8001458:	40020400 	.word	0x40020400

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8d0 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <OTG_FS_IRQHandler+0x10>)
 80014b6:	f000 fe3f 	bl	8002138 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000065c 	.word	0x2000065c

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f007 f8ee 	bl	80086d4 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20020000 	.word	0x20020000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000124 	.word	0x20000124
 800152c:	20000970 	.word	0x20000970

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f007 f8ad 	bl	80086e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fb53 	bl	8000c30 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001598:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 800159c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015a0:	20000970 	.word	0x20000970

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f94f 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fdd0 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f967 	bl	80018de <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001628:	f000 f92f 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000004 	.word	0x20000004
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c
 8001670:	20000280 	.word	0x20000280

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000280 	.word	0x20000280

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff29 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff3e 	bl	800171c <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff8e 	bl	80017c8 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff31 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa2 	bl	8001830 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e16b      	b.n	8001bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 815a 	bne.w	8001be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80b4 	beq.w	8001be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <HAL_GPIO_Init+0x310>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_GPIO_Init+0x314>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_GPIO_Init+0x318>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_GPIO_Init+0x31c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x320>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x216>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x212>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x32c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x20a>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00e      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b02:	2308      	movs	r3, #8
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	; (8001c08 <HAL_GPIO_Init+0x310>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b62:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae90 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40021c00 	.word	0x40021c00
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b08f      	sub	sp, #60	; 0x3c
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e054      	b.n	8001d1e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f006 fa76 	bl	8008180 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fbcc 	bl	8005450 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f003 fb46 	bl	800536c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fbc3 	bl	8005472 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	687e      	ldr	r6, [r7, #4]
 8001cf4:	466d      	mov	r5, sp
 8001cf6:	f106 0410 	add.w	r4, r6, #16
 8001cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d0a:	1d33      	adds	r3, r6, #4
 8001d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f003 fd2a 	bl	8005768 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d26 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d26:	b590      	push	{r4, r7, lr}
 8001d28:	b089      	sub	sp, #36	; 0x24
 8001d2a:	af04      	add	r7, sp, #16
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	461a      	mov	r2, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70bb      	strb	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_HCD_HC_Init+0x28>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e076      	b.n	8001e3c <HAL_HCD_HC_Init+0x116>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	333d      	adds	r3, #61	; 0x3d
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3338      	adds	r3, #56	; 0x38
 8001d76:	787a      	ldrb	r2, [r7, #1]
 8001d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3340      	adds	r3, #64	; 0x40
 8001d88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d8a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3339      	adds	r3, #57	; 0x39
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	333f      	adds	r3, #63	; 0x3f
 8001dac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001db0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	78ba      	ldrb	r2, [r7, #2]
 8001db6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dba:	b2d0      	uxtb	r0, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	333a      	adds	r3, #58	; 0x3a
 8001dc8:	4602      	mov	r2, r0
 8001dca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001dcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da09      	bge.n	8001de8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	333b      	adds	r3, #59	; 0x3b
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e008      	b.n	8001dfa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	333b      	adds	r3, #59	; 0x3b
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	333c      	adds	r3, #60	; 0x3c
 8001e08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	787c      	ldrb	r4, [r7, #1]
 8001e14:	78ba      	ldrb	r2, [r7, #2]
 8001e16:	78f9      	ldrb	r1, [r7, #3]
 8001e18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	4623      	mov	r3, r4
 8001e2a:	f003 fe17 	bl	8005a5c <USB_HC_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}

08001e44 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_HCD_HC_Halt+0x1e>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e00f      	b.n	8001e82 <HAL_HCD_HC_Halt+0x3e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f853 	bl	8005f1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	70fb      	strb	r3, [r7, #3]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70bb      	strb	r3, [r7, #2]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	333b      	adds	r3, #59	; 0x3b
 8001eb4:	78ba      	ldrb	r2, [r7, #2]
 8001eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	333f      	adds	r3, #63	; 0x3f
 8001ec6:	787a      	ldrb	r2, [r7, #1]
 8001ec8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001eca:	7c3b      	ldrb	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d112      	bne.n	8001ef6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	3342      	adds	r3, #66	; 0x42
 8001ede:	2203      	movs	r2, #3
 8001ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333d      	adds	r3, #61	; 0x3d
 8001ef0:	7f3a      	ldrb	r2, [r7, #28]
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e008      	b.n	8001f08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3342      	adds	r3, #66	; 0x42
 8001f04:	2202      	movs	r2, #2
 8001f06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	f200 80c6 	bhi.w	800209c <HAL_HCD_HC_SubmitRequest+0x210>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08002089 	.word	0x08002089
 8001f20:	08001f8d 	.word	0x08001f8d
 8001f24:	0800200b 	.word	0x0800200b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f28:	7c3b      	ldrb	r3, [r7, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	f040 80b8 	bne.w	80020a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f30:	78bb      	ldrb	r3, [r7, #2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80b4 	bne.w	80020a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f38:	8b3b      	ldrh	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3355      	adds	r3, #85	; 0x55
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3355      	adds	r3, #85	; 0x55
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3342      	adds	r3, #66	; 0x42
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f76:	e093      	b.n	80020a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3342      	adds	r3, #66	; 0x42
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
      break;
 8001f8a:	e089      	b.n	80020a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11d      	bne.n	8001fce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3355      	adds	r3, #85	; 0x55
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3342      	adds	r3, #66	; 0x42
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fb8:	e073      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3342      	adds	r3, #66	; 0x42
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
      break;
 8001fcc:	e069      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3354      	adds	r3, #84	; 0x54
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3342      	adds	r3, #66	; 0x42
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
      break;
 8001ff4:	e055      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3342      	adds	r3, #66	; 0x42
 8002004:	2202      	movs	r2, #2
 8002006:	701a      	strb	r2, [r3, #0]
      break;
 8002008:	e04b      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d11d      	bne.n	800204c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3355      	adds	r3, #85	; 0x55
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3342      	adds	r3, #66	; 0x42
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002036:	e034      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3342      	adds	r3, #66	; 0x42
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]
      break;
 800204a:	e02a      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3354      	adds	r3, #84	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3342      	adds	r3, #66	; 0x42
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
      break;
 8002072:	e016      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3342      	adds	r3, #66	; 0x42
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
      break;
 8002086:	e00c      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3342      	adds	r3, #66	; 0x42
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800209c:	bf00      	nop
 800209e:	e000      	b.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3344      	adds	r3, #68	; 0x44
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	8b3a      	ldrh	r2, [r7, #24]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	202c      	movs	r0, #44	; 0x2c
 80020bc:	fb00 f303 	mul.w	r3, r0, r3
 80020c0:	440b      	add	r3, r1
 80020c2:	334c      	adds	r3, #76	; 0x4c
 80020c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3360      	adds	r3, #96	; 0x60
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3350      	adds	r3, #80	; 0x50
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3339      	adds	r3, #57	; 0x39
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	222c      	movs	r2, #44	; 0x2c
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	3338      	adds	r3, #56	; 0x38
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	18d1      	adds	r1, r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	f003 fda6 	bl	8005c78 <USB_HC_StartXfer>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop

08002138 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fac9 	bl	80056e6 <USB_GetMode>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	f040 80f6 	bne.w	8002348 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 faad 	bl	80056c0 <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80ec 	beq.w	8002346 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 faa4 	bl	80056c0 <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002182:	d104      	bne.n	800218e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800218c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fa94 	bl	80056c0 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a2:	d104      	bne.n	80021ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fa84 	bl	80056c0 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c2:	d104      	bne.n	80021ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fa74 	bl	80056c0 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d103      	bne.n	80021ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2202      	movs	r2, #2
 80021e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fa66 	bl	80056c0 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021fe:	d11c      	bne.n	800223a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002208:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800221a:	2110      	movs	r1, #16
 800221c:	6938      	ldr	r0, [r7, #16]
 800221e:	f003 f975 	bl	800550c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002222:	6938      	ldr	r0, [r7, #16]
 8002224:	f003 f996 	bl	8005554 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fb4e 	bl	80058d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f006 f821 	bl	800827c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fa3e 	bl	80056c0 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800224e:	d102      	bne.n	8002256 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f001 fa03 	bl	800365c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fa30 	bl	80056c0 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d106      	bne.n	8002278 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 ffea 	bl	8008244 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fa1f 	bl	80056c0 <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d101      	bne.n	8002290 <HAL_HCD_IRQHandler+0x158>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_HCD_IRQHandler+0x15a>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0210 	bic.w	r2, r2, #16
 80022a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f001 f906 	bl	80034b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0210 	orr.w	r2, r2, #16
 80022ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f9fd 	bl	80056c0 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d0:	d13a      	bne.n	8002348 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fe10 	bl	8005efc <USB_HC_ReadInterrupt>
 80022dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e025      	b.n	8002330 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d018      	beq.n	800232a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	d106      	bne.n	800231e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8ab 	bl	8002472 <HCD_HC_IN_IRQHandler>
 800231c:	e005      	b.n	800232a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fcc6 	bl	8002cb6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3d4      	bcc.n	80022e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	e000      	b.n	8002348 <HAL_HCD_IRQHandler+0x210>
      return;
 8002346:	bf00      	nop
    }
  }
}
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_HCD_Start+0x16>
 8002360:	2302      	movs	r3, #2
 8002362:	e013      	b.n	800238c <HAL_HCD_Start+0x3e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fb10 	bl	8005998 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f003 f856 	bl	800542e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_HCD_Stop+0x16>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e00d      	b.n	80023c6 <HAL_HCD_Stop+0x32>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 ff0a 	bl	80061d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fab2 	bl	8005944 <USB_ResetPort>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3360      	adds	r3, #96	; 0x60
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	681b      	ldr	r3, [r3, #0]
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f003 faf6 	bl	8005a38 <USB_GetCurrentFrame>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fad1 	bl	8005a0a <USB_GetHostSpeed>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d119      	bne.n	80024d6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	2304      	movs	r3, #4
 80024b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	0151      	lsls	r1, r2, #5
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	440a      	add	r2, r1
 80024ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e101      	b.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ec:	d12b      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002500:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3361      	adds	r3, #97	; 0x61
 8002510:	2207      	movs	r2, #7
 8002512:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	0151      	lsls	r1, r2, #5
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	440a      	add	r2, r1
 800252a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fced 	bl	8005f1e <USB_HC_Halt>
 8002544:	e0c9      	b.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b20      	cmp	r3, #32
 800255a:	d109      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2320      	movs	r3, #32
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	e0b4      	b.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d133      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	440a      	add	r2, r1
 800259c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3361      	adds	r3, #97	; 0x61
 80025b4:	2205      	movs	r2, #5
 80025b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2310      	movs	r3, #16
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2308      	movs	r3, #8
 80025da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fc99 	bl	8005f1e <USB_HC_Halt>
 80025ec:	e075      	b.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d134      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	; 0x61
 8002634:	2208      	movs	r2, #8
 8002636:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2310      	movs	r3, #16
 8002648:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fc58 	bl	8005f1e <USB_HC_Halt>
 800266e:	e034      	b.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d129      	bne.n	80026da <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	440a      	add	r2, r1
 800269c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3361      	adds	r3, #97	; 0x61
 80026b4:	2206      	movs	r2, #6
 80026b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fc2b 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d122      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	0151      	lsls	r1, r2, #5
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	440a      	add	r2, r1
 8002708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f003 fbfe 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002734:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002736:	e2ba      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	f040 811b 	bne.w	8002986 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d019      	beq.n	800278c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3348      	adds	r3, #72	; 0x48
 8002766:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	440b      	add	r3, r1
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	202c      	movs	r0, #44	; 0x2c
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	440b      	add	r3, r1
 8002788:	3350      	adds	r3, #80	; 0x50
 800278a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3361      	adds	r3, #97	; 0x61
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	333f      	adds	r3, #63	; 0x3f
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d121      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	0151      	lsls	r1, r2, #5
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	440a      	add	r2, r1
 8002800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fb82 	bl	8005f1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	2310      	movs	r3, #16
 800282a:	6093      	str	r3, [r2, #8]
 800282c:	e066      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	333f      	adds	r3, #63	; 0x3f
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d127      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	440a      	add	r2, r1
 8002858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002860:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	b2d9      	uxtb	r1, r3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	202c      	movs	r0, #44	; 0x2c
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	4413      	add	r3, r2
 8002884:	3360      	adds	r3, #96	; 0x60
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f005 fd04 	bl	8008298 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002890:	e034      	b.n	80028fc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333f      	adds	r3, #63	; 0x3f
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d12a      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3360      	adds	r3, #96	; 0x60
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3354      	adds	r3, #84	; 0x54
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f083 0301 	eor.w	r3, r3, #1
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3354      	adds	r3, #84	; 0x54
 80028dc:	4602      	mov	r2, r0
 80028de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	b2d9      	uxtb	r1, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	202c      	movs	r0, #44	; 0x2c
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3360      	adds	r3, #96	; 0x60
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f005 fcce 	bl	8008298 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d12b      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3348      	adds	r3, #72	; 0x48
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f202 	mul.w	r2, r0, r2
 800291e:	440a      	add	r2, r1
 8002920:	3240      	adds	r2, #64	; 0x40
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	fbb3 f3f2 	udiv	r3, r3, r2
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 81be 	beq.w	8002cae <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3354      	adds	r3, #84	; 0x54
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2d8      	uxtb	r0, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3354      	adds	r3, #84	; 0x54
 8002956:	4602      	mov	r2, r0
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	e1a8      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3354      	adds	r3, #84	; 0x54
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	f083 0301 	eor.w	r3, r3, #1
 8002970:	b2d8      	uxtb	r0, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3354      	adds	r3, #84	; 0x54
 8002980:	4602      	mov	r2, r0
 8002982:	701a      	strb	r2, [r3, #0]
}
 8002984:	e193      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	f040 8106 	bne.w	8002baa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	0151      	lsls	r1, r2, #5
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	440a      	add	r2, r1
 80029b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b8:	f023 0302 	bic.w	r3, r3, #2
 80029bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3361      	adds	r3, #97	; 0x61
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d109      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3360      	adds	r3, #96	; 0x60
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e0c9      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3361      	adds	r3, #97	; 0x61
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d109      	bne.n	8002a0e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	2205      	movs	r2, #5
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e0b5      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3361      	adds	r3, #97	; 0x61
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d009      	beq.n	8002a36 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3361      	adds	r3, #97	; 0x61
 8002a30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d150      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	335c      	adds	r3, #92	; 0x5c
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	202c      	movs	r0, #44	; 0x2c
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	440b      	add	r3, r1
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	335c      	adds	r3, #92	; 0x5c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d912      	bls.n	8002a92 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	335c      	adds	r3, #92	; 0x5c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3360      	adds	r3, #96	; 0x60
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a90:	e073      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ad6:	e050      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d122      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e023      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3361      	adds	r3, #97	; 0x61
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d119      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	335c      	adds	r3, #92	; 0x5c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	202c      	movs	r0, #44	; 0x2c
 8002b5e:	fb00 f303 	mul.w	r3, r0, r3
 8002b62:	440b      	add	r3, r1
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	2204      	movs	r2, #4
 8002b78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2302      	movs	r3, #2
 8002b8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	b2d9      	uxtb	r1, r3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	202c      	movs	r0, #44	; 0x2c
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f005 fb78 	bl	8008298 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ba8:	e081      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d176      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	333f      	adds	r3, #63	; 0x3f
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d121      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 f984 	bl	8005f1e <USB_HC_Halt>
 8002c16:	e041      	b.n	8002c9c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	333f      	adds	r3, #63	; 0x3f
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	333f      	adds	r3, #63	; 0x3f
 8002c3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d12d      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	335c      	adds	r3, #92	; 0x5c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d120      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3361      	adds	r3, #97	; 0x61
 8002c68:	2203      	movs	r2, #3
 8002c6a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	0151      	lsls	r1, r2, #5
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	440a      	add	r2, r1
 8002c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f941 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2310      	movs	r3, #16
 8002cac:	6093      	str	r3, [r2, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b088      	sub	sp, #32
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d119      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	0151      	lsls	r1, r2, #5
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002d18:	e3ca      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d13e      	bne.n	8002dae <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2320      	movs	r3, #32
 8002d40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	333d      	adds	r3, #61	; 0x3d
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 83ac 	bne.w	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	333d      	adds	r3, #61	; 0x3d
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	0151      	lsls	r1, r2, #5
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	440a      	add	r2, r1
 8002d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f8b9 	bl	8005f1e <USB_HC_Halt>
}
 8002dac:	e380      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d122      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	0151      	lsls	r1, r2, #5
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	440a      	add	r2, r1
 8002ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 f894 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e08:	6093      	str	r3, [r2, #8]
}
 8002e0a:	e351      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d150      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	335c      	adds	r3, #92	; 0x5c
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d111      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	333d      	adds	r3, #61	; 0x3d
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2340      	movs	r3, #64	; 0x40
 8002e6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 f840 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3361      	adds	r3, #97	; 0x61
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
}
 8002ec2:	e2f5      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d13c      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3361      	adds	r3, #97	; 0x61
 8002ee8:	2204      	movs	r2, #4
 8002eea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	333d      	adds	r3, #61	; 0x3d
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	335c      	adds	r3, #92	; 0x5c
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	0151      	lsls	r1, r2, #5
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	440a      	add	r2, r1
 8002f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 ffef 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	6093      	str	r3, [r2, #8]
}
 8002f52:	e2ad      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d12a      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	2308      	movs	r3, #8
 8002f7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	0151      	lsls	r1, r2, #5
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	440a      	add	r2, r1
 8002f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 ffb9 	bl	8005f1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3361      	adds	r3, #97	; 0x61
 8002fba:	2205      	movs	r2, #5
 8002fbc:	701a      	strb	r2, [r3, #0]
}
 8002fbe:	e277      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d150      	bne.n	8003078 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	335c      	adds	r3, #92	; 0x5c
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3361      	adds	r3, #97	; 0x61
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d112      	bne.n	8003034 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333c      	adds	r3, #60	; 0x3c
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	333d      	adds	r3, #61	; 0x3d
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	0151      	lsls	r1, r2, #5
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	440a      	add	r2, r1
 800304a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f002 ff5d 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2310      	movs	r3, #16
 8003074:	6093      	str	r3, [r2, #8]
}
 8003076:	e21b      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d174      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d121      	bne.n	80030da <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3361      	adds	r3, #97	; 0x61
 80030a4:	2206      	movs	r2, #6
 80030a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 ff23 	bl	8005f1e <USB_HC_Halt>
 80030d8:	e044      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	335c      	adds	r3, #92	; 0x5c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	202c      	movs	r0, #44	; 0x2c
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	440b      	add	r3, r1
 80030f8:	335c      	adds	r3, #92	; 0x5c
 80030fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	335c      	adds	r3, #92	; 0x5c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d920      	bls.n	8003152 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	335c      	adds	r3, #92	; 0x5c
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3360      	adds	r3, #96	; 0x60
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	b2d9      	uxtb	r1, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	202c      	movs	r0, #44	; 0x2c
 800313e:	fb00 f303 	mul.w	r3, r0, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f005 f8a4 	bl	8008298 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003150:	e008      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3360      	adds	r3, #96	; 0x60
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	6093      	str	r3, [r2, #8]
}
 8003176:	e19b      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d134      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 feaf 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2310      	movs	r3, #16
 80031d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3361      	adds	r3, #97	; 0x61
 80031f4:	2208      	movs	r2, #8
 80031f6:	701a      	strb	r2, [r3, #0]
}
 80031f8:	e15a      	b.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	f040 814f 	bne.w	80034b0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	0151      	lsls	r1, r2, #5
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	440a      	add	r2, r1
 8003228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3361      	adds	r3, #97	; 0x61
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d17d      	bne.n	8003342 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3360      	adds	r3, #96	; 0x60
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	333f      	adds	r3, #63	; 0x3f
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d00a      	beq.n	8003282 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	333f      	adds	r3, #63	; 0x3f
 800327a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800327c:	2b03      	cmp	r3, #3
 800327e:	f040 8100 	bne.w	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3355      	adds	r3, #85	; 0x55
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	f083 0301 	eor.w	r3, r3, #1
 800329e:	b2d8      	uxtb	r0, r3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3355      	adds	r3, #85	; 0x55
 80032ae:	4602      	mov	r2, r0
 80032b0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 80e3 	bne.w	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	334c      	adds	r3, #76	; 0x4c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80d8 	beq.w	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	334c      	adds	r3, #76	; 0x4c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	202c      	movs	r0, #44	; 0x2c
 80032e8:	fb00 f202 	mul.w	r2, r0, r2
 80032ec:	440a      	add	r2, r1
 80032ee:	3240      	adds	r2, #64	; 0x40
 80032f0:	8812      	ldrh	r2, [r2, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	3b01      	subs	r3, #1
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	202c      	movs	r0, #44	; 0x2c
 80032fc:	fb00 f202 	mul.w	r2, r0, r2
 8003300:	440a      	add	r2, r1
 8003302:	3240      	adds	r2, #64	; 0x40
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	fbb3 f3f2 	udiv	r3, r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80b5 	beq.w	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3355      	adds	r3, #85	; 0x55
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f083 0301 	eor.w	r3, r3, #1
 800332c:	b2d8      	uxtb	r0, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3355      	adds	r3, #85	; 0x55
 800333c:	4602      	mov	r2, r0
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e09f      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3361      	adds	r3, #97	; 0x61
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d109      	bne.n	800336a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e08b      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	3361      	adds	r3, #97	; 0x61
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d109      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3360      	adds	r3, #96	; 0x60
 800338c:	2202      	movs	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e077      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3361      	adds	r3, #97	; 0x61
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d109      	bne.n	80033ba <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3360      	adds	r3, #96	; 0x60
 80033b4:	2205      	movs	r2, #5
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e063      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3361      	adds	r3, #97	; 0x61
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d009      	beq.n	80033e2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3361      	adds	r3, #97	; 0x61
 80033dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d14f      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	335c      	adds	r3, #92	; 0x5c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	440b      	add	r3, r1
 8003400:	335c      	adds	r3, #92	; 0x5c
 8003402:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	335c      	adds	r3, #92	; 0x5c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d912      	bls.n	800343e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3360      	adds	r3, #96	; 0x60
 8003438:	2204      	movs	r2, #4
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e021      	b.n	8003482 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003466:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800346e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	461a      	mov	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	2302      	movs	r3, #2
 8003492:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	b2d9      	uxtb	r1, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	202c      	movs	r0, #44	; 0x2c
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3360      	adds	r3, #96	; 0x60
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 fef4 	bl	8008298 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	0c5b      	lsrs	r3, r3, #17
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d004      	beq.n	80034fe <HCD_RXQLVL_IRQHandler+0x46>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	f000 80a9 	beq.w	800364e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034fc:	e0aa      	b.n	8003654 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a6 	beq.w	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3344      	adds	r3, #68	; 0x44
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 809b 	beq.w	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3350      	adds	r3, #80	; 0x50
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	441a      	add	r2, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	202c      	movs	r0, #44	; 0x2c
 8003536:	fb00 f303 	mul.w	r3, r0, r3
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	; 0x4c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d87a      	bhi.n	800363a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3344      	adds	r3, #68	; 0x44
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	b292      	uxth	r2, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f002 f857 	bl	8005610 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	3344      	adds	r3, #68	; 0x44
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	441a      	add	r2, r3
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	202c      	movs	r0, #44	; 0x2c
 800357c:	fb00 f303 	mul.w	r3, r0, r3
 8003580:	440b      	add	r3, r1
 8003582:	3344      	adds	r3, #68	; 0x44
 8003584:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3350      	adds	r3, #80	; 0x50
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	441a      	add	r2, r3
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	202c      	movs	r0, #44	; 0x2c
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	3350      	adds	r3, #80	; 0x50
 80035a8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	0cdb      	lsrs	r3, r3, #19
 80035ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3340      	adds	r3, #64	; 0x40
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d13c      	bne.n	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d039      	beq.n	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3354      	adds	r3, #84	; 0x54
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2d8      	uxtb	r0, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	3354      	adds	r3, #84	; 0x54
 8003634:	4602      	mov	r2, r0
 8003636:	701a      	strb	r2, [r3, #0]
      break;
 8003638:	e00b      	b.n	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3360      	adds	r3, #96	; 0x60
 8003648:	2204      	movs	r2, #4
 800364a:	701a      	strb	r2, [r3, #0]
      break;
 800364c:	e001      	b.n	8003652 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003652:	bf00      	nop
  }
}
 8003654:	bf00      	nop
 8003656:	3728      	adds	r7, #40	; 0x28
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003688:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d10b      	bne.n	80036ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f004 fdde 	bl	8008260 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d132      	bne.n	800371c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d126      	bne.n	8003716 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d113      	bne.n	80036f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036da:	d106      	bne.n	80036ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2102      	movs	r1, #2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 f8f4 	bl	80058d0 <USB_InitFSLSPClkSel>
 80036e8:	e011      	b.n	800370e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 f8ed 	bl	80058d0 <USB_InitFSLSPClkSel>
 80036f6:	e00a      	b.n	800370e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003706:	461a      	mov	r2, r3
 8003708:	f64e 2360 	movw	r3, #60000	; 0xea60
 800370c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f004 fdd0 	bl	80082b4 <HAL_HCD_PortEnabled_Callback>
 8003714:	e002      	b.n	800371c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f004 fdda 	bl	80082d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d103      	bne.n	800372e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0320 	orr.w	r3, r3, #32
 800372c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fd30 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f001 f9fc 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e128      	b.n	8003c30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a90      	ldr	r2, [pc, #576]	; (8003c38 <HAL_I2S_Init+0x26c>)
 80039f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fc31 	bl	8001260 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a14:	f023 030f 	bic.w	r3, r3, #15
 8003a18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d060      	beq.n	8003aec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a32:	2310      	movs	r3, #16
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e001      	b.n	8003a3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d802      	bhi.n	8003a4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f001 f9a0 	bl	8004d90 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5a:	d125      	bne.n	8003aa8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	3305      	adds	r3, #5
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	e01f      	b.n	8003ac6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	3305      	adds	r3, #5
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e00e      	b.n	8003ac6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	3305      	adds	r3, #5
 8003ac4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a5c      	ldr	r2, [pc, #368]	; (8003c3c <HAL_I2S_Init+0x270>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e003      	b.n	8003af4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aec:	2302      	movs	r3, #2
 8003aee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d902      	bls.n	8003b00 <HAL_I2S_Init+0x134>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2bff      	cmp	r3, #255	; 0xff
 8003afe:	d907      	bls.n	8003b10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e08f      	b.n	8003c30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	ea42 0103 	orr.w	r1, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b2e:	f023 030f 	bic.w	r3, r3, #15
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6851      	ldr	r1, [r2, #4]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6992      	ldr	r2, [r2, #24]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d161      	bne.n	8003c20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a38      	ldr	r2, [pc, #224]	; (8003c40 <HAL_I2S_Init+0x274>)
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_I2S_Init+0x278>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_I2S_Init+0x1a4>
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_I2S_Init+0x27c>)
 8003b6e:	e001      	b.n	8003b74 <HAL_I2S_Init+0x1a8>
 8003b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4932      	ldr	r1, [pc, #200]	; (8003c44 <HAL_I2S_Init+0x278>)
 8003b7c:	428a      	cmp	r2, r1
 8003b7e:	d101      	bne.n	8003b84 <HAL_I2S_Init+0x1b8>
 8003b80:	4a31      	ldr	r2, [pc, #196]	; (8003c48 <HAL_I2S_Init+0x27c>)
 8003b82:	e001      	b.n	8003b88 <HAL_I2S_Init+0x1bc>
 8003b84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b8c:	f023 030f 	bic.w	r3, r3, #15
 8003b90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <HAL_I2S_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2S_Init+0x1d4>
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <HAL_I2S_Init+0x27c>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2S_Init+0x1d8>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a25      	ldr	r2, [pc, #148]	; (8003c44 <HAL_I2S_Init+0x278>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2S_Init+0x1ea>
 8003bb2:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_I2S_Init+0x27c>)
 8003bb4:	e001      	b.n	8003bba <HAL_I2S_Init+0x1ee>
 8003bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc6:	d003      	beq.n	8003bd0 <HAL_I2S_Init+0x204>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e001      	b.n	8003bdc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003be6:	4313      	orrs	r3, r2
 8003be8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <HAL_I2S_Init+0x278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_I2S_Init+0x24c>
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_I2S_Init+0x27c>)
 8003c16:	e001      	b.n	8003c1c <HAL_I2S_Init+0x250>
 8003c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1c:	897a      	ldrh	r2, [r7, #10]
 8003c1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	08003d43 	.word	0x08003d43
 8003c3c:	cccccccd 	.word	0xcccccccd
 8003c40:	08003e59 	.word	0x08003e59
 8003c44:	40003800 	.word	0x40003800
 8003c48:	40003400 	.word	0x40003400

08003c4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10e      	bne.n	8003cdc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ccc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ffb8 	bl	8003c4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10e      	bne.n	8003d3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff93 	bl	8003c60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d13a      	bne.n	8003dd4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d109      	bne.n	8003d7c <I2S_IRQHandler+0x3a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d102      	bne.n	8003d7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ffb4 	bl	8003ce4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d126      	bne.n	8003dd4 <I2S_IRQHandler+0x92>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d11f      	bne.n	8003dd4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003da2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f043 0202 	orr.w	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff50 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d136      	bne.n	8003e4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d109      	bne.n	8003dfe <I2S_IRQHandler+0xbc>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b80      	cmp	r3, #128	; 0x80
 8003df6:	d102      	bne.n	8003dfe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff45 	bl	8003c88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d122      	bne.n	8003e4e <I2S_IRQHandler+0x10c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d11b      	bne.n	8003e4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff13 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4aa2      	ldr	r2, [pc, #648]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e72:	4ba2      	ldr	r3, [pc, #648]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a9b      	ldr	r2, [pc, #620]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e90:	4b9a      	ldr	r3, [pc, #616]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e92:	e001      	b.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d004      	beq.n	8003eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 8099 	bne.w	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d107      	bne.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f925 	bl	8004114 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9c8 	bl	8004274 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d13a      	bne.n	8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d035      	beq.n	8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f02:	4b7e      	ldr	r3, [pc, #504]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f04:	e001      	b.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4979      	ldr	r1, [pc, #484]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f12:	428b      	cmp	r3, r1
 8003f14:	d101      	bne.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f18:	e001      	b.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fe88 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	f040 80be 	bne.w	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80b8 	beq.w	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a59      	ldr	r2, [pc, #356]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f96:	4b59      	ldr	r3, [pc, #356]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f98:	e001      	b.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4954      	ldr	r1, [pc, #336]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fa6:	428b      	cmp	r3, r1
 8003fa8:	d101      	bne.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003faa:	4b54      	ldr	r3, [pc, #336]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fac:	e001      	b.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fe4a 	bl	8003c74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe0:	e084      	b.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8be 	bl	8004178 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8fd 	bl	8004210 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d12f      	bne.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02a      	beq.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004038:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004046:	e001      	b.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4929      	ldr	r1, [pc, #164]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d101      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800405a:	e001      	b.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800405c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004060:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004064:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fdfa 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d131      	bne.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02c      	beq.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040a0:	e001      	b.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4912      	ldr	r1, [pc, #72]	; (80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ae:	428b      	cmp	r3, r1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040b4:	e001      	b.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80040b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fdc5 	bl	8003c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ea:	e000      	b.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040ec:	bf00      	nop
}
 80040ee:	bf00      	nop
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40003800 	.word	0x40003800
 80040fc:	40003400 	.word	0x40003400

08004100 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c99      	adds	r1, r3, #2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6251      	str	r1, [r2, #36]	; 0x24
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004154:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ffc9 	bl	8004100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	1c99      	adds	r1, r3, #2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6251      	str	r1, [r2, #36]	; 0x24
 800418a:	8819      	ldrh	r1, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <I2SEx_TxISR_I2SExt+0x90>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x22>
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <I2SEx_TxISR_I2SExt+0x94>)
 8004198:	e001      	b.n	800419e <I2SEx_TxISR_I2SExt+0x26>
 800419a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419e:	460a      	mov	r2, r1
 80041a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d121      	bne.n	80041fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <I2SEx_TxISR_I2SExt+0x90>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <I2SEx_TxISR_I2SExt+0x50>
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <I2SEx_TxISR_I2SExt+0x94>)
 80041c6:	e001      	b.n	80041cc <I2SEx_TxISR_I2SExt+0x54>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	490d      	ldr	r1, [pc, #52]	; (8004208 <I2SEx_TxISR_I2SExt+0x90>)
 80041d4:	428b      	cmp	r3, r1
 80041d6:	d101      	bne.n	80041dc <I2SEx_TxISR_I2SExt+0x64>
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <I2SEx_TxISR_I2SExt+0x94>)
 80041da:	e001      	b.n	80041e0 <I2SEx_TxISR_I2SExt+0x68>
 80041dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff81 	bl	8004100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40003800 	.word	0x40003800
 800420c:	40003400 	.word	0x40003400

08004210 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68d8      	ldr	r0, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	1c99      	adds	r1, r3, #2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004228:	b282      	uxth	r2, r0
 800422a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d113      	bne.n	800426c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004252:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ff4a 	bl	8004100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <I2SEx_RxISR_I2SExt+0x90>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <I2SEx_RxISR_I2SExt+0x16>
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <I2SEx_RxISR_I2SExt+0x94>)
 8004288:	e001      	b.n	800428e <I2SEx_RxISR_I2SExt+0x1a>
 800428a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428e:	68d8      	ldr	r0, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	1c99      	adds	r1, r3, #2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	62d1      	str	r1, [r2, #44]	; 0x2c
 800429a:	b282      	uxth	r2, r0
 800429c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d121      	bne.n	80042fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <I2SEx_RxISR_I2SExt+0x90>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <I2SEx_RxISR_I2SExt+0x50>
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <I2SEx_RxISR_I2SExt+0x94>)
 80042c2:	e001      	b.n	80042c8 <I2SEx_RxISR_I2SExt+0x54>
 80042c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	490d      	ldr	r1, [pc, #52]	; (8004304 <I2SEx_RxISR_I2SExt+0x90>)
 80042d0:	428b      	cmp	r3, r1
 80042d2:	d101      	bne.n	80042d8 <I2SEx_RxISR_I2SExt+0x64>
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <I2SEx_RxISR_I2SExt+0x94>)
 80042d6:	e001      	b.n	80042dc <I2SEx_RxISR_I2SExt+0x68>
 80042d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff03 	bl	8004100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40003800 	.word	0x40003800
 8004308:	40003400 	.word	0x40003400

0800430c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e264      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d075      	beq.n	8004416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800432a:	4ba3      	ldr	r3, [pc, #652]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b04      	cmp	r3, #4
 8004334:	d00c      	beq.n	8004350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004336:	4ba0      	ldr	r3, [pc, #640]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433e:	2b08      	cmp	r3, #8
 8004340:	d112      	bne.n	8004368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004342:	4b9d      	ldr	r3, [pc, #628]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d10b      	bne.n	8004368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	4b99      	ldr	r3, [pc, #612]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05b      	beq.n	8004414 <HAL_RCC_OscConfig+0x108>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d157      	bne.n	8004414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e23f      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d106      	bne.n	8004380 <HAL_RCC_OscConfig+0x74>
 8004372:	4b91      	ldr	r3, [pc, #580]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a90      	ldr	r2, [pc, #576]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e01d      	b.n	80043bc <HAL_RCC_OscConfig+0xb0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x98>
 800438a:	4b8b      	ldr	r3, [pc, #556]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a8a      	ldr	r2, [pc, #552]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a87      	ldr	r2, [pc, #540]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e00b      	b.n	80043bc <HAL_RCC_OscConfig+0xb0>
 80043a4:	4b84      	ldr	r3, [pc, #528]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a83      	ldr	r2, [pc, #524]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a80      	ldr	r2, [pc, #512]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fd f956 	bl	8001674 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fd f952 	bl	8001674 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e204      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0xc0>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd f942 	bl	8001674 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd f93e 	bl	8001674 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1f0      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	4b6c      	ldr	r3, [pc, #432]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0xe8>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d063      	beq.n	80044ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b62      	ldr	r3, [pc, #392]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004436:	2b08      	cmp	r3, #8
 8004438:	d11c      	bne.n	8004474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d116      	bne.n	8004474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_RCC_OscConfig+0x152>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e1c4      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4952      	ldr	r1, [pc, #328]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	e03a      	b.n	80044ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800447c:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <HAL_RCC_OscConfig+0x2b0>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fd f8f7 	bl	8001674 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448a:	f7fd f8f3 	bl	8001674 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e1a5      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4940      	ldr	r1, [pc, #256]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]
 80044bc:	e015      	b.n	80044ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <HAL_RCC_OscConfig+0x2b0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd f8d6 	bl	8001674 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044cc:	f7fd f8d2 	bl	8001674 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e184      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d030      	beq.n	8004558 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_RCC_OscConfig+0x2b4>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd f8b6 	bl	8001674 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450c:	f7fd f8b2 	bl	8001674 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e164      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x200>
 800452a:	e015      	b.n	8004558 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_OscConfig+0x2b4>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004532:	f7fd f89f 	bl	8001674 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453a:	f7fd f89b 	bl	8001674 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e14d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80a0 	beq.w	80046a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x2b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCC_OscConfig+0x2b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <HAL_RCC_OscConfig+0x2b8>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fd f861 	bl	8001674 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e011      	b.n	80045da <HAL_RCC_OscConfig+0x2ce>
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470000 	.word	0x42470000
 80045c0:	42470e80 	.word	0x42470e80
 80045c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7fd f854 	bl	8001674 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e106      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045da:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <HAL_RCC_OscConfig+0x4e4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d106      	bne.n	80045fc <HAL_RCC_OscConfig+0x2f0>
 80045ee:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70
 80045fa:	e01c      	b.n	8004636 <HAL_RCC_OscConfig+0x32a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d10c      	bne.n	800461e <HAL_RCC_OscConfig+0x312>
 8004604:	4b7b      	ldr	r3, [pc, #492]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a7a      	ldr	r2, [pc, #488]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800460a:	f043 0304 	orr.w	r3, r3, #4
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a77      	ldr	r2, [pc, #476]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	e00b      	b.n	8004636 <HAL_RCC_OscConfig+0x32a>
 800461e:	4b75      	ldr	r3, [pc, #468]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a74      	ldr	r2, [pc, #464]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a71      	ldr	r2, [pc, #452]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d015      	beq.n	800466a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd f819 	bl	8001674 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd f815 	bl	8001674 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0c5      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ee      	beq.n	8004646 <HAL_RCC_OscConfig+0x33a>
 8004668:	e014      	b.n	8004694 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466a:	f7fd f803 	bl	8001674 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fc ffff 	bl	8001674 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0af      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004688:	4b5a      	ldr	r3, [pc, #360]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a55      	ldr	r2, [pc, #340]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 80046a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 809b 	beq.w	80047e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b0:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d05c      	beq.n	8004776 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d141      	bne.n	8004748 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c4:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <HAL_RCC_OscConfig+0x4ec>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc ffd3 	bl	8001674 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc ffcf 	bl	8001674 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e081      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	019b      	lsls	r3, r3, #6
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	4937      	ldr	r1, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCC_OscConfig+0x4ec>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fc ffa8 	bl	8001674 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc ffa4 	bl	8001674 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e056      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x41c>
 8004746:	e04e      	b.n	80047e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_OscConfig+0x4ec>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fc ff91 	bl	8001674 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004756:	f7fc ff8d 	bl	8001674 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03f      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x44a>
 8004774:	e037      	b.n	80047e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e032      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <HAL_RCC_OscConfig+0x4e8>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d028      	beq.n	80047e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d121      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d11a      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40007000 	.word	0x40007000
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470060 	.word	0x42470060

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0cc      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d90c      	bls.n	8004838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800485a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d044      	beq.n	800491c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d119      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e067      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4934      	ldr	r1, [pc, #208]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7fc fec2 	bl	8001674 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fc febe 	bl	8001674 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e04f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d20c      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f821 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004986:	4602      	mov	r2, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	490a      	ldr	r1, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	5ccb      	ldrb	r3, [r1, r3]
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc fe22 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023c00 	.word	0x40023c00
 80049b8:	40023800 	.word	0x40023800
 80049bc:	08008e90 	.word	0x08008e90
 80049c0:	20000004 	.word	0x20000004
 80049c4:	20000008 	.word	0x20000008

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e0:	4b67      	ldr	r3, [pc, #412]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d00d      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x40>
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	f200 80bd 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x34>
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d003      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80049fa:	e0b7      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049fe:	60bb      	str	r3, [r7, #8]
       break;
 8004a00:	e0b7      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a02:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a04:	60bb      	str	r3, [r7, #8]
      break;
 8004a06:	e0b4      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a08:	4b5d      	ldr	r3, [pc, #372]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04d      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1e:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	461a      	mov	r2, r3
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	ea02 0800 	and.w	r8, r2, r0
 8004a36:	ea03 0901 	and.w	r9, r3, r1
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	014b      	lsls	r3, r1, #5
 8004a48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a4c:	0142      	lsls	r2, r0, #5
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	ebb0 0008 	subs.w	r0, r0, r8
 8004a56:	eb61 0109 	sbc.w	r1, r1, r9
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	018b      	lsls	r3, r1, #6
 8004a64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a68:	0182      	lsls	r2, r0, #6
 8004a6a:	1a12      	subs	r2, r2, r0
 8004a6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a70:	f04f 0000 	mov.w	r0, #0
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	00d9      	lsls	r1, r3, #3
 8004a7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a7e:	00d0      	lsls	r0, r2, #3
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	eb12 0208 	adds.w	r2, r2, r8
 8004a88:	eb43 0309 	adc.w	r3, r3, r9
 8004a8c:	f04f 0000 	mov.w	r0, #0
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	0259      	lsls	r1, r3, #9
 8004a96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a9a:	0250      	lsls	r0, r2, #9
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f7fb fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e04a      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	ea02 0400 	and.w	r4, r2, r0
 8004ad2:	ea03 0501 	and.w	r5, r3, r1
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	014b      	lsls	r3, r1, #5
 8004ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ae8:	0142      	lsls	r2, r0, #5
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	1b00      	subs	r0, r0, r4
 8004af0:	eb61 0105 	sbc.w	r1, r1, r5
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	018b      	lsls	r3, r1, #6
 8004afe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b02:	0182      	lsls	r2, r0, #6
 8004b04:	1a12      	subs	r2, r2, r0
 8004b06:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	00d9      	lsls	r1, r3, #3
 8004b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b18:	00d0      	lsls	r0, r2, #3
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	1912      	adds	r2, r2, r4
 8004b20:	eb45 0303 	adc.w	r3, r5, r3
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0299      	lsls	r1, r3, #10
 8004b2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b32:	0290      	lsls	r0, r2, #10
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f7fb fb40 	bl	80001c8 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	60bb      	str	r3, [r7, #8]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b6e:	60bb      	str	r3, [r7, #8]
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	68bb      	ldr	r3, [r7, #8]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	007a1200 	.word	0x007a1200

08004b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	08008ea0 	.word	0x08008ea0

08004bcc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d035      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf4:	4b62      	ldr	r3, [pc, #392]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fd3b 	bl	8001674 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c02:	f7fc fd37 	bl	8001674 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0b0      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c14:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	019a      	lsls	r2, r3, #6
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	071b      	lsls	r3, r3, #28
 8004c2c:	4955      	ldr	r1, [pc, #340]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c34:	4b52      	ldr	r3, [pc, #328]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3a:	f7fc fd1b 	bl	8001674 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c42:	f7fc fd17 	bl	8001674 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e090      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c54:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8083 	beq.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	4b44      	ldr	r3, [pc, #272]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a43      	ldr	r2, [pc, #268]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3e      	ldr	r2, [pc, #248]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c96:	f7fc fced 	bl	8001674 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fc fce9 	bl	8001674 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e062      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb0:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cea:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cf0:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d114      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fc fcb7 	bl	8001674 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fc fcb3 	bl	8001674 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e02a      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ee      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	608b      	str	r3, [r1, #8]
 8004d54:	e005      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6e:	4905      	ldr	r1, [pc, #20]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	42470068 	.word	0x42470068
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42470e40 	.word	0x42470e40

08004d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d13e      	bne.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d12f      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc6:	617b      	str	r3, [r7, #20]
          break;
 8004dc8:	e02f      	b.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd6:	d108      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e007      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e14:	0f1b      	lsrs	r3, r3, #28
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
          break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
          break;
 8004e28:	bf00      	nop
        }
      }
      break;
 8004e2a:	bf00      	nop
    }
  }
  return frequency;
 8004e2c:	697b      	ldr	r3, [r7, #20]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00bb8000 	.word	0x00bb8000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07b      	b.n	8004f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fa5e 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0104 	and.w	r1, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0210 	and.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_SPI_Transmit+0x22>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e126      	b.n	80051ce <HAL_SPI_Transmit+0x270>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f88:	f7fc fb74 	bl	8001674 <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fa2:	e10b      	b.n	80051bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Transmit+0x52>
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fb4:	e102      	b.n	80051bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffc:	d10f      	bne.n	800501e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800501c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d007      	beq.n	800503c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d14b      	bne.n	80050de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0xf6>
 800504e:	8afb      	ldrh	r3, [r7, #22]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d13e      	bne.n	80050d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	881a      	ldrh	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005078:	e02b      	b.n	80050d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d112      	bne.n	80050ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80050ac:	e011      	b.n	80050d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fc fae1 	bl	8001674 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_Transmit+0x168>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_Transmit+0x16e>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050d0:	e074      	b.n	80051bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ce      	bne.n	800507a <HAL_SPI_Transmit+0x11c>
 80050dc:	e04c      	b.n	8005178 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_Transmit+0x18e>
 80050e6:	8afb      	ldrh	r3, [r7, #22]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d140      	bne.n	800516e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005112:	e02c      	b.n	800516e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d113      	bne.n	800514a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	86da      	strh	r2, [r3, #54]	; 0x36
 8005148:	e011      	b.n	800516e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514a:	f7fc fa93 	bl	8001674 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d803      	bhi.n	8005162 <HAL_SPI_Transmit+0x204>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005160:	d102      	bne.n	8005168 <HAL_SPI_Transmit+0x20a>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800516c:	e026      	b.n	80051bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1cd      	bne.n	8005114 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f8b3 	bl	80052e8 <SPI_EndRxTxTransaction>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e000      	b.n	80051bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80051ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e8:	f7fc fa44 	bl	8001674 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f8:	f7fc fa3c 	bl	8001674 <HAL_GetTick>
 80051fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	015b      	lsls	r3, r3, #5
 8005204:	0d1b      	lsrs	r3, r3, #20
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520e:	e054      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005216:	d050      	beq.n	80052ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005218:	f7fc fa2c 	bl	8001674 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	d902      	bls.n	800522e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d13d      	bne.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800523c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005246:	d111      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005250:	d004      	beq.n	800525c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525a:	d107      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	d10f      	bne.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e017      	b.n	80052da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d19b      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000004 	.word	0x20000004

080052e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <SPI_EndRxTxTransaction+0x7c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <SPI_EndRxTxTransaction+0x80>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	0d5b      	lsrs	r3, r3, #21
 8005300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005312:	d112      	bne.n	800533a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ff5a 	bl	80051d8 <SPI_WaitFlagStateUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3b01      	subs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d0f2      	beq.n	800533a <SPI_EndRxTxTransaction+0x52>
 8005354:	e000      	b.n	8005358 <SPI_EndRxTxTransaction+0x70>
        break;
 8005356:	bf00      	nop
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000004 	.word	0x20000004
 8005368:	165e9f81 	.word	0x165e9f81

0800536c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800536c:	b084      	sub	sp, #16
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	f107 001c 	add.w	r0, r7, #28
 800537a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d122      	bne.n	80053ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9a0 	bl	8005704 <USB_CoreReset>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e01a      	b.n	8005400 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f994 	bl	8005704 <USB_CoreReset>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
 80053f2:	e005      	b.n	8005400 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10b      	bne.n	800541e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f043 0206 	orr.w	r2, r3, #6
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542a:	b004      	add	sp, #16
 800542c:	4770      	bx	lr

0800542e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f043 0201 	orr.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f023 0201 	bic.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d115      	bne.n	80054c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f7fc f8f3 	bl	800168c <HAL_Delay>
      ms++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f91a 	bl	80056e6 <USB_GetMode>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d01e      	beq.n	80054f6 <USB_SetCurrentMode+0x84>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b31      	cmp	r3, #49	; 0x31
 80054bc:	d9f0      	bls.n	80054a0 <USB_SetCurrentMode+0x2e>
 80054be:	e01a      	b.n	80054f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d115      	bne.n	80054f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054d2:	2001      	movs	r0, #1
 80054d4:	f7fc f8da 	bl	800168c <HAL_Delay>
      ms++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f901 	bl	80056e6 <USB_GetMode>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <USB_SetCurrentMode+0x84>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b31      	cmp	r3, #49	; 0x31
 80054ee:	d9f0      	bls.n	80054d2 <USB_SetCurrentMode+0x60>
 80054f0:	e001      	b.n	80054f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e005      	b.n	8005502 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b32      	cmp	r3, #50	; 0x32
 80054fa:	d101      	bne.n	8005500 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <USB_FlushTxFifo+0x44>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e006      	b.n	8005544 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b20      	cmp	r3, #32
 8005540:	d0f1      	beq.n	8005526 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	00030d40 	.word	0x00030d40

08005554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2210      	movs	r2, #16
 8005564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3301      	adds	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <USB_FlushRxFifo+0x3c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e006      	b.n	8005584 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d0f1      	beq.n	8005566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	00030d40 	.word	0x00030d40

08005594 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	460b      	mov	r3, r1
 80055a4:	71fb      	strb	r3, [r7, #7]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d123      	bne.n	8005602 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ba:	88bb      	ldrh	r3, [r7, #4]
 80055bc:	3303      	adds	r3, #3
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e018      	b.n	80055fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	031a      	lsls	r2, r3, #12
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d4:	461a      	mov	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3301      	adds	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3e2      	bcc.n	80055c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005610:	b480      	push	{r7}
 8005612:	b08b      	sub	sp, #44	; 0x2c
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	b29b      	uxth	r3, r3
 800562c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e014      	b.n	8005666 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	601a      	str	r2, [r3, #0]
    pDest++;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	3301      	adds	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	3301      	adds	r3, #1
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	3301      	adds	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	3301      	adds	r3, #1
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	3301      	adds	r3, #1
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3e6      	bcc.n	800563c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800566e:	8bfb      	ldrh	r3, [r7, #30]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01e      	beq.n	80056b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567e:	461a      	mov	r2, r3
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	701a      	strb	r2, [r3, #0]
      i++;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	3301      	adds	r3, #1
 800569e:	623b      	str	r3, [r7, #32]
      pDest++;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	3301      	adds	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056a6:	8bfb      	ldrh	r3, [r7, #30]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056ac:	8bfb      	ldrh	r3, [r7, #30]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ea      	bne.n	8005688 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	372c      	adds	r7, #44	; 0x2c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0301 	and.w	r3, r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	4a13      	ldr	r2, [pc, #76]	; (8005764 <USB_CoreReset+0x60>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e01a      	b.n	8005756 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	daf3      	bge.n	8005710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <USB_CoreReset+0x60>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d0f1      	beq.n	8005738 <USB_CoreReset+0x34>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	00030d40 	.word	0x00030d40

08005768 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005768:	b084      	sub	sp, #16
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	f107 001c 	add.w	r0, r7, #28
 8005776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10a      	bne.n	80057d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e014      	b.n	8005800 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e009      	b.n	8005800 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fa:	f023 0304 	bic.w	r3, r3, #4
 80057fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005800:	2110      	movs	r1, #16
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fe82 	bl	800550c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fea3 	bl	8005554 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e015      	b.n	8005840 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005826:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	429a      	cmp	r2, r3
 8005846:	d3e5      	bcc.n	8005814 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005854:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a13      	ldr	r2, [pc, #76]	; (80058bc <USB_HostInit+0x154>)
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <USB_HostInit+0x158>)
 8005874:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005878:	e009      	b.n	800588e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <USB_HostInit+0x15c>)
 8005884:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a0f      	ldr	r2, [pc, #60]	; (80058c8 <USB_HostInit+0x160>)
 800588a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f043 0210 	orr.w	r2, r3, #16
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <USB_HostInit+0x164>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b8:	b004      	add	sp, #16
 80058ba:	4770      	bx	lr
 80058bc:	01000200 	.word	0x01000200
 80058c0:	00e00300 	.word	0x00e00300
 80058c4:	00600080 	.word	0x00600080
 80058c8:	004000e0 	.word	0x004000e0
 80058cc:	a3200008 	.word	0xa3200008

080058d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005908:	4313      	orrs	r3, r2
 800590a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d107      	bne.n	8005922 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005918:	461a      	mov	r2, r3
 800591a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800591e:	6053      	str	r3, [r2, #4]
 8005920:	e009      	b.n	8005936 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d106      	bne.n	8005936 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	461a      	mov	r2, r3
 8005930:	f241 7370 	movw	r3, #6000	; 0x1770
 8005934:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005964:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005974:	2064      	movs	r0, #100	; 0x64
 8005976:	f7fb fe89 	bl	800168c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005986:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005988:	200a      	movs	r0, #10
 800598a:	f7fb fe7f 	bl	800168c <HAL_Delay>

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <USB_DriveVbus+0x44>
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d106      	bne.n	80059dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	d109      	bne.n	80059fc <USB_DriveVbus+0x64>
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	0c5b      	lsrs	r3, r3, #17
 8005a28:	f003 0303 	and.w	r3, r3, #3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	b29b      	uxth	r3, r3
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	70fb      	strb	r3, [r7, #3]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70bb      	strb	r3, [r7, #2]
 8005a72:	4613      	mov	r3, r2
 8005a74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d87e      	bhi.n	8005b98 <USB_HC_Init+0x13c>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <USB_HC_Init+0x44>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005b5b 	.word	0x08005b5b
 8005aa8:	08005ab1 	.word	0x08005ab1
 8005aac:	08005b1d 	.word	0x08005b1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	461a      	mov	r2, r3
 8005abe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ac2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da10      	bge.n	8005aee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005aec:	e057      	b.n	8005b9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d051      	beq.n	8005b9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b18:	60d3      	str	r3, [r2, #12]
      break;
 8005b1a:	e040      	b.n	8005b9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da34      	bge.n	8005ba2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b58:	e023      	b.n	8005ba2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	f240 2325 	movw	r3, #549	; 0x225
 8005b6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da17      	bge.n	8005ba6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b96:	e006      	b.n	8005ba6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
      break;
 8005b9c:	e004      	b.n	8005ba8 <USB_HC_Init+0x14c>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <USB_HC_Init+0x14c>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <USB_HC_Init+0x14c>
      break;
 8005ba6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	6939      	ldr	r1, [r7, #16]
 8005bbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005bd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da03      	bge.n	8005be2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e001      	b.n	8005be6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ff0f 	bl	8005a0a <USB_GetHostSpeed>
 8005bec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d106      	bne.n	8005c04 <USB_HC_Init+0x1a8>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d003      	beq.n	8005c04 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e001      	b.n	8005c08 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c08:	787b      	ldrb	r3, [r7, #1]
 8005c0a:	059b      	lsls	r3, r3, #22
 8005c0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c10:	78bb      	ldrb	r3, [r7, #2]
 8005c12:	02db      	lsls	r3, r3, #11
 8005c14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c1e:	049b      	lsls	r3, r3, #18
 8005c20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	0159      	lsls	r1, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	440b      	add	r3, r1
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c44:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d10f      	bne.n	8005c6e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d02d      	beq.n	8005cfe <USB_HC_StartXfer+0x86>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	791b      	ldrb	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d129      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d117      	bne.n	8005ce0 <USB_HC_StartXfer+0x68>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	79db      	ldrb	r3, [r3, #7]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <USB_HC_StartXfer+0x48>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	79db      	ldrb	r3, [r3, #7]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d10f      	bne.n	8005ce0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	795b      	ldrb	r3, [r3, #5]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d107      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa2f 	bl	8006158 <USB_DoPing>
      return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e0f8      	b.n	8005ef0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	8912      	ldrh	r2, [r2, #8]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3b01      	subs	r3, #1
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	8912      	ldrh	r2, [r2, #8]
 8005d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d1e:	8b7b      	ldrh	r3, [r7, #26]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d90b      	bls.n	8005d3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d24:	8b7b      	ldrh	r3, [r7, #26]
 8005d26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	8912      	ldrh	r2, [r2, #8]
 8005d2e:	fb02 f203 	mul.w	r2, r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	611a      	str	r2, [r3, #16]
 8005d36:	e001      	b.n	8005d3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	8912      	ldrh	r2, [r2, #8]
 8005d4a:	fb02 f203 	mul.w	r2, r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	611a      	str	r2, [r3, #16]
 8005d52:	e003      	b.n	8005d5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d66:	04d9      	lsls	r1, r3, #19
 8005d68:	4b63      	ldr	r3, [pc, #396]	; (8005ef8 <USB_HC_StartXfer+0x280>)
 8005d6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	7a9b      	ldrb	r3, [r3, #10]
 8005d72:	075b      	lsls	r3, r3, #29
 8005d74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	6a39      	ldr	r1, [r7, #32]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68d9      	ldr	r1, [r3, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	460a      	mov	r2, r1
 8005da0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	7e7b      	ldrb	r3, [r7, #25]
 8005dea:	075b      	lsls	r3, r3, #29
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	0148      	lsls	r0, r1, #5
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	4401      	add	r1, r0
 8005df4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	e003      	b.n	8005e2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e04e      	b.n	8005ef0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	78db      	ldrb	r3, [r3, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d149      	bne.n	8005eee <USB_HC_StartXfer+0x276>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d045      	beq.n	8005eee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	79db      	ldrb	r3, [r3, #7]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d830      	bhi.n	8005ecc <USB_HC_StartXfer+0x254>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <USB_HC_StartXfer+0x1f8>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e81 	.word	0x08005e81
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e81 	.word	0x08005e81
 8005e7c:	08005ea5 	.word	0x08005ea5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	3303      	adds	r3, #3
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e8a:	8afa      	ldrh	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d91c      	bls.n	8005ed0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ea2:	e015      	b.n	8005ed0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005eae:	8afa      	ldrh	r2, [r7, #22]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d90a      	bls.n	8005ed4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005eca:	e003      	b.n	8005ed4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <USB_HC_StartXfer+0x25e>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <USB_HC_StartXfer+0x25e>
        break;
 8005ed4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	68d9      	ldr	r1, [r3, #12]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785a      	ldrb	r2, [r3, #1]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	9000      	str	r0, [sp, #0]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fb53 	bl	8005594 <USB_WritePacket>
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3728      	adds	r7, #40	; 0x28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	1ff80000 	.word	0x1ff80000

08005efc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	b29b      	uxth	r3, r3
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b089      	sub	sp, #36	; 0x24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	0c9b      	lsrs	r3, r3, #18
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0fdb      	lsrs	r3, r3, #31
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d104      	bne.n	8005f78 <USB_HC_Halt+0x5a>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e0e8      	b.n	800614a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <USB_HC_Halt+0x66>
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d173      	bne.n	800606c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 80cb 	bne.w	8006148 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d143      	bne.n	8006046 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	440a      	add	r2, r1
 8006014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800601c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3301      	adds	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800602a:	d81d      	bhi.n	8006068 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006042:	d0ec      	beq.n	800601e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006044:	e080      	b.n	8006148 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	440a      	add	r2, r1
 800605c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006064:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006066:	e06f      	b.n	8006148 <USB_HC_Halt+0x22a>
            break;
 8006068:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800606a:	e06d      	b.n	8006148 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800608a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d143      	bne.n	8006124 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	3301      	adds	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006108:	d81d      	bhi.n	8006146 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006120:	d0ec      	beq.n	80060fc <USB_HC_Halt+0x1de>
 8006122:	e011      	b.n	8006148 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e000      	b.n	8006148 <USB_HC_Halt+0x22a>
          break;
 8006146:	bf00      	nop
    }
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3724      	adds	r7, #36	; 0x24
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800616c:	2301      	movs	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	04da      	lsls	r2, r3, #19
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <USB_DoPing+0x74>)
 8006176:	4013      	ands	r3, r2
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006188:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	1ff80000 	.word	0x1ff80000

080061d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff f935 	bl	8005450 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80061e6:	2110      	movs	r1, #16
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff f98f 	bl	800550c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff f9b0 	bl	8005554 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	e01f      	b.n	800623a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006210:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006218:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006220:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3301      	adds	r3, #1
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d9dc      	bls.n	80061fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e034      	b.n	80062b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800625c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006264:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800626c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	461a      	mov	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3301      	adds	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628c:	d80c      	bhi.n	80062a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a4:	d0ec      	beq.n	8006280 <USB_StopHost+0xb0>
 80062a6:	e000      	b.n	80062aa <USB_StopHost+0xda>
        break;
 80062a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3301      	adds	r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b0f      	cmp	r3, #15
 80062b4:	d9c7      	bls.n	8006246 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062bc:	461a      	mov	r2, r3
 80062be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff f8ae 	bl	800542e <USB_EnableGlobalInt>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80062e4:	2301      	movs	r3, #1
 80062e6:	2202      	movs	r2, #2
 80062e8:	2102      	movs	r1, #2
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc66 	bl	8006bbc <USBH_FindInterface>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	2bff      	cmp	r3, #255	; 0xff
 80062f8:	d002      	beq.n	8006300 <USBH_CDC_InterfaceInit+0x24>
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d901      	bls.n	8006304 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006300:	2302      	movs	r3, #2
 8006302:	e13d      	b.n	8006580 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc3b 	bl	8006b84 <USBH_SelectInterface>
 800630e:	4603      	mov	r3, r0
 8006310:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006318:	2302      	movs	r3, #2
 800631a:	e131      	b.n	8006580 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006322:	2050      	movs	r0, #80	; 0x50
 8006324:	f002 fa00 	bl	8008728 <malloc>
 8006328:	4603      	mov	r3, r0
 800632a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800633c:	2302      	movs	r3, #2
 800633e:	e11f      	b.n	8006580 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006340:	2250      	movs	r2, #80	; 0x50
 8006342:	2100      	movs	r1, #0
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f002 fa0d 	bl	8008764 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	211a      	movs	r1, #26
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	da15      	bge.n	800638e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	211a      	movs	r1, #26
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	4413      	add	r3, r2
 800636e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	211a      	movs	r1, #26
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fe32 	bl	8007ffe <USBH_AllocPipe>
 800639a:	4603      	mov	r3, r0
 800639c:	461a      	mov	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	7819      	ldrb	r1, [r3, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	7858      	ldrb	r0, [r3, #1]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	8952      	ldrh	r2, [r2, #10]
 80063ba:	9202      	str	r2, [sp, #8]
 80063bc:	2203      	movs	r2, #3
 80063be:	9201      	str	r2, [sp, #4]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	4623      	mov	r3, r4
 80063c4:	4602      	mov	r2, r0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fdea 	bl	8007fa0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f002 f8f9 	bl	80085cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80063da:	2300      	movs	r3, #0
 80063dc:	2200      	movs	r2, #0
 80063de:	210a      	movs	r1, #10
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fbeb 	bl	8006bbc <USBH_FindInterface>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2bff      	cmp	r3, #255	; 0xff
 80063ee:	d002      	beq.n	80063f6 <USBH_CDC_InterfaceInit+0x11a>
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d901      	bls.n	80063fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0c2      	b.n	8006580 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	211a      	movs	r1, #26
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	4413      	add	r3, r2
 8006406:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	b25b      	sxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	da16      	bge.n	8006440 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	211a      	movs	r1, #26
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	4413      	add	r3, r2
 800641e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	211a      	movs	r1, #26
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006438:	881a      	ldrh	r2, [r3, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	835a      	strh	r2, [r3, #26]
 800643e:	e015      	b.n	800646c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	211a      	movs	r1, #26
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	211a      	movs	r1, #26
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	211a      	movs	r1, #26
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	f203 3356 	addw	r3, r3, #854	; 0x356
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b25b      	sxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	da16      	bge.n	80064b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	211a      	movs	r1, #26
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	211a      	movs	r1, #26
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064aa:	881a      	ldrh	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	835a      	strh	r2, [r3, #26]
 80064b0:	e015      	b.n	80064de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	211a      	movs	r1, #26
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	211a      	movs	r1, #26
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	7b9b      	ldrb	r3, [r3, #14]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fd8a 	bl	8007ffe <USBH_AllocPipe>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	7bdb      	ldrb	r3, [r3, #15]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fd80 	bl	8007ffe <USBH_AllocPipe>
 80064fe:	4603      	mov	r3, r0
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	7b59      	ldrb	r1, [r3, #13]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	7b98      	ldrb	r0, [r3, #14]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	8b12      	ldrh	r2, [r2, #24]
 800651e:	9202      	str	r2, [sp, #8]
 8006520:	2202      	movs	r2, #2
 8006522:	9201      	str	r2, [sp, #4]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4623      	mov	r3, r4
 8006528:	4602      	mov	r2, r0
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fd38 	bl	8007fa0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	7b19      	ldrb	r1, [r3, #12]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	7bd8      	ldrb	r0, [r3, #15]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	8b52      	ldrh	r2, [r2, #26]
 8006548:	9202      	str	r2, [sp, #8]
 800654a:	2202      	movs	r2, #2
 800654c:	9201      	str	r2, [sp, #4]
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	4623      	mov	r3, r4
 8006552:	4602      	mov	r2, r0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 fd23 	bl	8007fa0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	2200      	movs	r2, #0
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 f82e 	bl	80085cc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	7b1b      	ldrb	r3, [r3, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 f827 	bl	80085cc <USBH_LL_SetToggle>

  return USBH_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bd90      	pop	{r4, r7, pc}

08006588 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00e      	beq.n	80065c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fd18 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fd43 	bl	8008040 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	7b1b      	ldrb	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00e      	beq.n	80065e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	7b1b      	ldrb	r3, [r3, #12]
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fd05 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	7b1b      	ldrb	r3, [r3, #12]
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fd30 	bl	8008040 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	7b5b      	ldrb	r3, [r3, #13]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	7b5b      	ldrb	r3, [r3, #13]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fcf2 	bl	8007fde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	7b5b      	ldrb	r3, [r3, #13]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fd1d 	bl	8008040 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	4618      	mov	r0, r3
 8006622:	f002 f889 	bl	8008738 <free>
    phost->pActiveClass->pData = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662c:	2200      	movs	r2, #0
 800662e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3340      	adds	r3, #64	; 0x40
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8b1 	bl	80067ba <GetLineCoding>
 8006658:	4603      	mov	r3, r0
 800665a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d105      	bne.n	800666e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006668:	2102      	movs	r1, #2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800666e:	7afb      	ldrb	r3, [r7, #11]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006698:	2b04      	cmp	r3, #4
 800669a:	d877      	bhi.n	800678c <USBH_CDC_Process+0x114>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <USBH_CDC_Process+0x2c>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066b9 	.word	0x080066b9
 80066a8:	080066bf 	.word	0x080066bf
 80066ac:	080066ef 	.word	0x080066ef
 80066b0:	08006763 	.word	0x08006763
 80066b4:	08006771 	.word	0x08006771
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e06d      	b.n	800679a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f897 	bl	80067f8 <SetLineCoding>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066dc:	e058      	b.n	8006790 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d055      	beq.n	8006790 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2204      	movs	r2, #4
 80066e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066ec:	e050      	b.n	8006790 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3340      	adds	r3, #64	; 0x40
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f860 	bl	80067ba <GetLineCoding>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d126      	bne.n	8006752 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d13b      	bne.n	8006794 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006728:	429a      	cmp	r2, r3
 800672a:	d133      	bne.n	8006794 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006736:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006738:	429a      	cmp	r2, r3
 800673a:	d12b      	bne.n	8006794 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006744:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006746:	429a      	cmp	r2, r3
 8006748:	d124      	bne.n	8006794 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f958 	bl	8006a00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006750:	e020      	b.n	8006794 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d01d      	beq.n	8006794 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2204      	movs	r2, #4
 800675c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006760:	e018      	b.n	8006794 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f867 	bl	8006836 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8da 	bl	8006922 <CDC_ProcessReception>
      break;
 800676e:	e014      	b.n	800679a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 ffe3 	bl	800773e <USBH_ClrFeature>
 8006778:	4603      	mov	r3, r0
 800677a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800678a:	e005      	b.n	8006798 <USBH_CDC_Process+0x120>

    default:
      break;
 800678c:	bf00      	nop
 800678e:	e004      	b.n	800679a <USBH_CDC_Process+0x122>
      break;
 8006790:	bf00      	nop
 8006792:	e002      	b.n	800679a <USBH_CDC_Process+0x122>
      break;
 8006794:	bf00      	nop
 8006796:	e000      	b.n	800679a <USBH_CDC_Process+0x122>
      break;
 8006798:	bf00      	nop

  }

  return status;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	22a1      	movs	r2, #161	; 0xa1
 80067c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2221      	movs	r2, #33	; 0x21
 80067ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2207      	movs	r2, #7
 80067e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2207      	movs	r2, #7
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f988 	bl	8007afe <USBH_CtlReq>
 80067ee:	4603      	mov	r3, r0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2221      	movs	r2, #33	; 0x21
 8006806:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2207      	movs	r2, #7
 800681e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2207      	movs	r2, #7
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f969 	bl	8007afe <USBH_CtlReq>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af02      	add	r7, sp, #8
 800683c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006848:	2300      	movs	r3, #0
 800684a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006852:	2b01      	cmp	r3, #1
 8006854:	d002      	beq.n	800685c <CDC_ProcessTransmission+0x26>
 8006856:	2b02      	cmp	r3, #2
 8006858:	d023      	beq.n	80068a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800685a:	e05e      	b.n	800691a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	8b12      	ldrh	r2, [r2, #24]
 8006864:	4293      	cmp	r3, r2
 8006866:	d90b      	bls.n	8006880 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8b1a      	ldrh	r2, [r3, #24]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	7b5b      	ldrb	r3, [r3, #13]
 8006874:	2001      	movs	r0, #1
 8006876:	9000      	str	r0, [sp, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fb4e 	bl	8007f1a <USBH_BulkSendData>
 800687e:	e00b      	b.n	8006898 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	7b5b      	ldrb	r3, [r3, #13]
 800688e:	2001      	movs	r0, #1
 8006890:	9000      	str	r0, [sp, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fb41 	bl	8007f1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068a0:	e03b      	b.n	800691a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	7b5b      	ldrb	r3, [r3, #13]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fe65 	bl	8008578 <USBH_LL_GetURBState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d128      	bne.n	800690a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	8b12      	ldrh	r2, [r2, #24]
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d90e      	bls.n	80068e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	8b12      	ldrh	r2, [r2, #24]
 80068cc:	1a9a      	subs	r2, r3, r2
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	8b12      	ldrh	r2, [r2, #24]
 80068da:	441a      	add	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	61da      	str	r2, [r3, #28]
 80068e0:	e002      	b.n	80068e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068f8:	e00e      	b.n	8006918 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f868 	bl	80069d8 <USBH_CDC_TransmitCallback>
      break;
 8006908:	e006      	b.n	8006918 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d103      	bne.n	8006918 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006918:	bf00      	nop
  }
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006934:	2300      	movs	r3, #0
 8006936:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800693e:	2b03      	cmp	r3, #3
 8006940:	d002      	beq.n	8006948 <CDC_ProcessReception+0x26>
 8006942:	2b04      	cmp	r3, #4
 8006944:	d00e      	beq.n	8006964 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006946:	e043      	b.n	80069d0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6a19      	ldr	r1, [r3, #32]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	8b5a      	ldrh	r2, [r3, #26]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	7b1b      	ldrb	r3, [r3, #12]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fb05 	bl	8007f64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2204      	movs	r2, #4
 800695e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006962:	e035      	b.n	80069d0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	7b1b      	ldrb	r3, [r3, #12]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fe04 	bl	8008578 <USBH_LL_GetURBState>
 8006970:	4603      	mov	r3, r0
 8006972:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d129      	bne.n	80069ce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	7b1b      	ldrb	r3, [r3, #12]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fd67 	bl	8008454 <USBH_LL_GetLastXferSize>
 8006986:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	429a      	cmp	r2, r3
 8006990:	d016      	beq.n	80069c0 <CDC_ProcessReception+0x9e>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	8b5b      	ldrh	r3, [r3, #26]
 8006996:	461a      	mov	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4293      	cmp	r3, r2
 800699c:	d910      	bls.n	80069c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad2      	subs	r2, r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	441a      	add	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2203      	movs	r2, #3
 80069ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069be:	e006      	b.n	80069ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f80f 	bl	80069ec <USBH_CDC_ReceiveCallback>
      break;
 80069ce:	bf00      	nop
  }
}
 80069d0:	bf00      	nop
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e029      	b.n	8006a80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	79fa      	ldrb	r2, [r7, #7]
 8006a30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f81f 	bl	8006a88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f001 fc37 	bl	80082ec <USBH_LL_Init>

  return USBH_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e009      	b.n	8006aae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	33e0      	adds	r3, #224	; 0xe0
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b0e      	cmp	r3, #14
 8006ab2:	d9f2      	bls.n	8006a9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e009      	b.n	8006ace <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad4:	d3f1      	bcc.n	8006aba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2240      	movs	r2, #64	; 0x40
 8006afa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d016      	beq.n	8006b72 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10e      	bne.n	8006b6c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	33de      	adds	r3, #222	; 0xde
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	e004      	b.n	8006b76 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e001      	b.n	8006b76 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d204      	bcs.n	8006baa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ba8:	e001      	b.n	8006bae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	70fb      	strb	r3, [r7, #3]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70bb      	strb	r3, [r7, #2]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006be4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006be6:	e025      	b.n	8006c34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	221a      	movs	r2, #26
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	795b      	ldrb	r3, [r3, #5]
 8006bfe:	78fa      	ldrb	r2, [r7, #3]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d002      	beq.n	8006c0a <USBH_FindInterface+0x4e>
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	2bff      	cmp	r3, #255	; 0xff
 8006c08:	d111      	bne.n	8006c2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c0e:	78ba      	ldrb	r2, [r7, #2]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d002      	beq.n	8006c1a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c14:	78bb      	ldrb	r3, [r7, #2]
 8006c16:	2bff      	cmp	r3, #255	; 0xff
 8006c18:	d109      	bne.n	8006c2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c1e:	787a      	ldrb	r2, [r7, #1]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d002      	beq.n	8006c2a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	2bff      	cmp	r3, #255	; 0xff
 8006c28:	d101      	bne.n	8006c2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	e006      	b.n	8006c3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	3301      	adds	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d9d6      	bls.n	8006be8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c3a:	23ff      	movs	r3, #255	; 0xff
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fb87 	bl	8008364 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006c56:	2101      	movs	r1, #1
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fca0 	bl	800859e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af04      	add	r7, sp, #16
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d102      	bne.n	8006c8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b0b      	cmp	r3, #11
 8006c92:	f200 81b3 	bhi.w	8006ffc <USBH_Process+0x394>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_Process+0x34>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006ccd 	.word	0x08006ccd
 8006ca0:	08006cff 	.word	0x08006cff
 8006ca4:	08006d67 	.word	0x08006d67
 8006ca8:	08006f97 	.word	0x08006f97
 8006cac:	08006ffd 	.word	0x08006ffd
 8006cb0:	08006e0b 	.word	0x08006e0b
 8006cb4:	08006f3d 	.word	0x08006f3d
 8006cb8:	08006e41 	.word	0x08006e41
 8006cbc:	08006e61 	.word	0x08006e61
 8006cc0:	08006e81 	.word	0x08006e81
 8006cc4:	08006eaf 	.word	0x08006eaf
 8006cc8:	08006f7f 	.word	0x08006f7f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8193 	beq.w	8007000 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ce0:	20c8      	movs	r0, #200	; 0xc8
 8006ce2:	f001 fca3 	bl	800862c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fb99 	bl	800841e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006cfc:	e180      	b.n	8007000 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d16:	e182      	b.n	800701e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d22:	d914      	bls.n	8006d4e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d903      	bls.n	8006d46 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	220d      	movs	r2, #13
 8006d42:	701a      	strb	r2, [r3, #0]
      break;
 8006d44:	e16b      	b.n	800701e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
      break;
 8006d4c:	e167      	b.n	800701e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d54:	f103 020a 	add.w	r2, r3, #10
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006d5e:	200a      	movs	r0, #10
 8006d60:	f001 fc64 	bl	800862c <USBH_Delay>
      break;
 8006d64:	e15b      	b.n	800701e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d76:	2104      	movs	r1, #4
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d7c:	2064      	movs	r0, #100	; 0x64
 8006d7e:	f001 fc55 	bl	800862c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fb24 	bl	80083d0 <USBH_LL_GetSpeed>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2205      	movs	r2, #5
 8006d96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f92f 	bl	8007ffe <USBH_AllocPipe>
 8006da0:	4603      	mov	r3, r0
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006da8:	2180      	movs	r1, #128	; 0x80
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 f927 	bl	8007ffe <USBH_AllocPipe>
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7919      	ldrb	r1, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	9202      	str	r2, [sp, #8]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2280      	movs	r2, #128	; 0x80
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f8e0 	bl	8007fa0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7959      	ldrb	r1, [r3, #5]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006df4:	b292      	uxth	r2, r2
 8006df6:	9202      	str	r2, [sp, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2200      	movs	r2, #0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 f8cc 	bl	8007fa0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e08:	e109      	b.n	800701e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f90c 	bl	8007028 <USBH_HandleEnum>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f040 80f3 	bne.w	8007004 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d103      	bne.n	8006e38 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2208      	movs	r2, #8
 8006e34:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e36:	e0e5      	b.n	8007004 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2207      	movs	r2, #7
 8006e3c:	701a      	strb	r2, [r3, #0]
      break;
 8006e3e:	e0e1      	b.n	8007004 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 80de 	beq.w	8007008 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e52:	2101      	movs	r1, #1
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e5e:	e0d3      	b.n	8007008 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc20 	bl	80076b0 <USBH_SetCfg>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 80ca 	bne.w	800700c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2209      	movs	r2, #9
 8006e7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e7e:	e0c5      	b.n	800700c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e8e:	2101      	movs	r1, #1
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc30 	bl	80076f6 <USBH_SetFeature>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 80b9 	bne.w	8007010 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ea4:	e0b4      	b.n	8007010 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	701a      	strb	r2, [r3, #0]
      break;
 8006eac:	e0b0      	b.n	8007010 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80ad 	beq.w	8007014 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e016      	b.n	8006ef6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ec8:	7bfa      	ldrb	r2, [r7, #15]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32de      	adds	r2, #222	; 0xde
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	791a      	ldrb	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d108      	bne.n	8006ef0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ede:	7bfa      	ldrb	r2, [r7, #15]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	32de      	adds	r2, #222	; 0xde
 8006ee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006eee:	e005      	b.n	8006efc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0e5      	beq.n	8006ec8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2206      	movs	r2, #6
 8006f1c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f24:	2103      	movs	r1, #3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f2a:	e073      	b.n	8007014 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220d      	movs	r2, #13
 8006f30:	701a      	strb	r2, [r3, #0]
      break;
 8006f32:	e06f      	b.n	8007014 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	220d      	movs	r2, #13
 8006f38:	701a      	strb	r2, [r3, #0]
      break;
 8006f3a:	e06b      	b.n	8007014 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220b      	movs	r2, #11
 8006f62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f64:	e058      	b.n	8007018 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d154      	bne.n	8007018 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220d      	movs	r2, #13
 8006f72:	701a      	strb	r2, [r3, #0]
      break;
 8006f74:	e050      	b.n	8007018 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220d      	movs	r2, #13
 8006f7a:	701a      	strb	r2, [r3, #0]
      break;
 8006f7c:	e04c      	b.n	8007018 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d049      	beq.n	800701c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
      }
      break;
 8006f94:	e042      	b.n	800701c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fd72 	bl	8006a88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fd2:	2105      	movs	r1, #5
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d107      	bne.n	8006ff4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fe2b 	bl	8006c48 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ff2:	e014      	b.n	800701e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 f9b5 	bl	8008364 <USBH_LL_Start>
      break;
 8006ffa:	e010      	b.n	800701e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ffc:	bf00      	nop
 8006ffe:	e00e      	b.n	800701e <USBH_Process+0x3b6>
      break;
 8007000:	bf00      	nop
 8007002:	e00c      	b.n	800701e <USBH_Process+0x3b6>
      break;
 8007004:	bf00      	nop
 8007006:	e00a      	b.n	800701e <USBH_Process+0x3b6>
    break;
 8007008:	bf00      	nop
 800700a:	e008      	b.n	800701e <USBH_Process+0x3b6>
      break;
 800700c:	bf00      	nop
 800700e:	e006      	b.n	800701e <USBH_Process+0x3b6>
      break;
 8007010:	bf00      	nop
 8007012:	e004      	b.n	800701e <USBH_Process+0x3b6>
      break;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <USBH_Process+0x3b6>
      break;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <USBH_Process+0x3b6>
      break;
 800701c:	bf00      	nop
  }
  return USBH_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af04      	add	r7, sp, #16
 800702e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b07      	cmp	r3, #7
 800703e:	f200 81c1 	bhi.w	80073c4 <USBH_HandleEnum+0x39c>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <USBH_HandleEnum+0x20>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007069 	.word	0x08007069
 800704c:	08007127 	.word	0x08007127
 8007050:	08007191 	.word	0x08007191
 8007054:	0800721f 	.word	0x0800721f
 8007058:	08007289 	.word	0x08007289
 800705c:	080072f9 	.word	0x080072f9
 8007060:	0800733f 	.word	0x0800733f
 8007064:	08007385 	.word	0x08007385
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007068:	2108      	movs	r1, #8
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa50 	bl	8007510 <USBH_Get_DevDesc>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d130      	bne.n	80070dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7919      	ldrb	r1, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800709e:	b292      	uxth	r2, r2
 80070a0:	9202      	str	r2, [sp, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	9201      	str	r2, [sp, #4]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 ff77 	bl	8007fa0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7959      	ldrb	r1, [r3, #5]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070c6:	b292      	uxth	r2, r2
 80070c8:	9202      	str	r2, [sp, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	9201      	str	r2, [sp, #4]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4603      	mov	r3, r0
 80070d2:	2200      	movs	r2, #0
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 ff63 	bl	8007fa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070da:	e175      	b.n	80073c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	f040 8172 	bne.w	80073c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ea:	3301      	adds	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d903      	bls.n	8007106 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	220d      	movs	r2, #13
 8007102:	701a      	strb	r2, [r3, #0]
      break;
 8007104:	e160      	b.n	80073c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	795b      	ldrb	r3, [r3, #5]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 ff97 	bl	8008040 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	791b      	ldrb	r3, [r3, #4]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 ff91 	bl	8008040 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
      break;
 8007124:	e150      	b.n	80073c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007126:	2112      	movs	r1, #18
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f9f1 	bl	8007510 <USBH_Get_DevDesc>
 800712e:	4603      	mov	r3, r0
 8007130:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800713e:	e145      	b.n	80073cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b03      	cmp	r3, #3
 8007144:	f040 8142 	bne.w	80073cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800714e:	3301      	adds	r3, #1
 8007150:	b2da      	uxtb	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800715e:	2b03      	cmp	r3, #3
 8007160:	d903      	bls.n	800716a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220d      	movs	r2, #13
 8007166:	701a      	strb	r2, [r3, #0]
      break;
 8007168:	e130      	b.n	80073cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 ff65 	bl	8008040 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	791b      	ldrb	r3, [r3, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 ff5f 	bl	8008040 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
      break;
 800718e:	e11d      	b.n	80073cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007190:	2101      	movs	r1, #1
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa68 	bl	8007668 <USBH_SetAddress>
 8007198:	4603      	mov	r3, r0
 800719a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d132      	bne.n	8007208 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80071a2:	2002      	movs	r0, #2
 80071a4:	f001 fa42 	bl	800862c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2203      	movs	r2, #3
 80071b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7919      	ldrb	r1, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071ca:	b292      	uxth	r2, r2
 80071cc:	9202      	str	r2, [sp, #8]
 80071ce:	2200      	movs	r2, #0
 80071d0:	9201      	str	r2, [sp, #4]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	4603      	mov	r3, r0
 80071d6:	2280      	movs	r2, #128	; 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fee1 	bl	8007fa0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7959      	ldrb	r1, [r3, #5]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071f2:	b292      	uxth	r2, r2
 80071f4:	9202      	str	r2, [sp, #8]
 80071f6:	2200      	movs	r2, #0
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	4603      	mov	r3, r0
 80071fe:	2200      	movs	r2, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fecd 	bl	8007fa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007206:	e0e3      	b.n	80073d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b03      	cmp	r3, #3
 800720c:	f040 80e0 	bne.w	80073d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	220d      	movs	r2, #13
 8007214:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	705a      	strb	r2, [r3, #1]
      break;
 800721c:	e0d8      	b.n	80073d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800721e:	2109      	movs	r1, #9
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f99d 	bl	8007560 <USBH_Get_CfgDesc>
 8007226:	4603      	mov	r3, r0
 8007228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2204      	movs	r2, #4
 8007234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007236:	e0cd      	b.n	80073d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b03      	cmp	r3, #3
 800723c:	f040 80ca 	bne.w	80073d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007256:	2b03      	cmp	r3, #3
 8007258:	d903      	bls.n	8007262 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	220d      	movs	r2, #13
 800725e:	701a      	strb	r2, [r3, #0]
      break;
 8007260:	e0b8      	b.n	80073d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fee9 	bl	8008040 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fee3 	bl	8008040 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e0a5      	b.n	80073d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f965 	bl	8007560 <USBH_Get_CfgDesc>
 8007296:	4603      	mov	r3, r0
 8007298:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2205      	movs	r2, #5
 80072a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072a6:	e097      	b.n	80073d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 8094 	bne.w	80073d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d903      	bls.n	80072d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	220d      	movs	r2, #13
 80072ce:	701a      	strb	r2, [r3, #0]
      break;
 80072d0:	e082      	b.n	80073d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	795b      	ldrb	r3, [r3, #5]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 feb1 	bl	8008040 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 feab 	bl	8008040 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
      break;
 80072f6:	e06f      	b.n	80073d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d019      	beq.n	8007336 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800730e:	23ff      	movs	r3, #255	; 0xff
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f949 	bl	80075a8 <USBH_Get_StringDesc>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2206      	movs	r2, #6
 8007324:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007326:	e059      	b.n	80073dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d156      	bne.n	80073dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2206      	movs	r2, #6
 8007332:	705a      	strb	r2, [r3, #1]
      break;
 8007334:	e052      	b.n	80073dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2206      	movs	r2, #6
 800733a:	705a      	strb	r2, [r3, #1]
      break;
 800733c:	e04e      	b.n	80073dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007344:	2b00      	cmp	r3, #0
 8007346:	d019      	beq.n	800737c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007354:	23ff      	movs	r3, #255	; 0xff
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f926 	bl	80075a8 <USBH_Get_StringDesc>
 800735c:	4603      	mov	r3, r0
 800735e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2207      	movs	r2, #7
 800736a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800736c:	e038      	b.n	80073e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d135      	bne.n	80073e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2207      	movs	r2, #7
 8007378:	705a      	strb	r2, [r3, #1]
      break;
 800737a:	e031      	b.n	80073e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2207      	movs	r2, #7
 8007380:	705a      	strb	r2, [r3, #1]
      break;
 8007382:	e02d      	b.n	80073e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800739a:	23ff      	movs	r3, #255	; 0xff
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f903 	bl	80075a8 <USBH_Get_StringDesc>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073b0:	e018      	b.n	80073e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d115      	bne.n	80073e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	e012      	b.n	80073e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e00f      	b.n	80073e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80073c4:	bf00      	nop
 80073c6:	e00e      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073c8:	bf00      	nop
 80073ca:	e00c      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073cc:	bf00      	nop
 80073ce:	e00a      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073d0:	bf00      	nop
 80073d2:	e008      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073d4:	bf00      	nop
 80073d6:	e006      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073d8:	bf00      	nop
 80073da:	e004      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <USBH_HandleEnum+0x3be>
      break;
 80073e4:	bf00      	nop
  }
  return Status;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f804 	bl	8007432 <USBH_HandleSof>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b0b      	cmp	r3, #11
 8007442:	d10a      	bne.n	800745a <USBH_HandleSof+0x28>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
  }
}
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007472:	bf00      	nop
}
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800748e:	bf00      	nop
}
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff56 	bl	800839a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	791b      	ldrb	r3, [r3, #4]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fda3 	bl	8008040 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	795b      	ldrb	r3, [r3, #5]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fd9d 	bl	8008040 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	b29b      	uxth	r3, r3
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800752e:	2100      	movs	r1, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f864 	bl	80075fe <USBH_GetDescriptor>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	b292      	uxth	r2, r2
 8007550:	4619      	mov	r1, r3
 8007552:	f000 f918 	bl	8007786 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af02      	add	r7, sp, #8
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	331c      	adds	r3, #28
 8007570:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757c:	2100      	movs	r1, #0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f83d 	bl	80075fe <USBH_GetDescriptor>
 8007584:	4603      	mov	r3, r0
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d107      	bne.n	800759e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007594:	887a      	ldrh	r2, [r7, #2]
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f964 	bl	8007866 <USBH_ParseCfgDesc>
  }

  return status;
 800759e:	7afb      	ldrb	r3, [r7, #11]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	461a      	mov	r2, r3
 80075b4:	460b      	mov	r3, r1
 80075b6:	72fb      	strb	r3, [r7, #11]
 80075b8:	4613      	mov	r3, r2
 80075ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075cc:	893b      	ldrh	r3, [r7, #8]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	460b      	mov	r3, r1
 80075d2:	2100      	movs	r1, #0
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f812 	bl	80075fe <USBH_GetDescriptor>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d107      	bne.n	80075f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075ea:	893a      	ldrh	r2, [r7, #8]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fa37 	bl	8007a62 <USBH_ParseStringDesc>
  }

  return status;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	72fb      	strb	r3, [r7, #11]
 800760c:	4613      	mov	r3, r2
 800760e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	789b      	ldrb	r3, [r3, #2]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d11c      	bne.n	8007652 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800761e:	b2da      	uxtb	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2206      	movs	r2, #6
 8007628:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	893a      	ldrh	r2, [r7, #8]
 800762e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007630:	893b      	ldrh	r3, [r7, #8]
 8007632:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763a:	d104      	bne.n	8007646 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f240 4209 	movw	r2, #1033	; 0x409
 8007642:	829a      	strh	r2, [r3, #20]
 8007644:	e002      	b.n	800764c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8b3a      	ldrh	r2, [r7, #24]
 8007650:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007652:	8b3b      	ldrh	r3, [r7, #24]
 8007654:	461a      	mov	r2, r3
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fa50 	bl	8007afe <USBH_CtlReq>
 800765e:	4603      	mov	r3, r0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10f      	bne.n	800769c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2205      	movs	r2, #5
 8007686:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800769c:	2200      	movs	r2, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa2c 	bl	8007afe <USBH_CtlReq>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d10e      	bne.n	80076e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2209      	movs	r2, #9
 80076ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	887a      	ldrh	r2, [r7, #2]
 80076d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa09 	bl	8007afe <USBH_CtlReq>
 80076ec:	4603      	mov	r3, r0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	789b      	ldrb	r3, [r3, #2]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d10f      	bne.n	800772a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2203      	movs	r2, #3
 8007714:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9e5 	bl	8007afe <USBH_CtlReq>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	789b      	ldrb	r3, [r3, #2]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10f      	bne.n	8007772 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007772:	2200      	movs	r2, #0
 8007774:	2100      	movs	r1, #0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9c1 	bl	8007afe <USBH_CtlReq>
 800777c:	4603      	mov	r3, r0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	785a      	ldrb	r2, [r3, #1]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3302      	adds	r3, #2
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3303      	adds	r3, #3
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	791a      	ldrb	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	795a      	ldrb	r2, [r3, #5]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	799a      	ldrb	r2, [r3, #6]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	79da      	ldrb	r2, [r3, #7]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077e0:	88fb      	ldrh	r3, [r7, #6]
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d939      	bls.n	800785a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3308      	adds	r3, #8
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3309      	adds	r3, #9
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	330a      	adds	r3, #10
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b29a      	uxth	r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	330b      	adds	r3, #11
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	330c      	adds	r3, #12
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	330d      	adds	r3, #13
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	7b9a      	ldrb	r2, [r3, #14]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	7bda      	ldrb	r2, [r3, #15]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	7c1a      	ldrb	r2, [r3, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	7c5a      	ldrb	r2, [r3, #17]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	745a      	strb	r2, [r3, #17]
  }
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b08a      	sub	sp, #40	; 0x28
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4613      	mov	r3, r2
 8007872:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	785a      	ldrb	r2, [r3, #1]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3302      	adds	r3, #2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	3303      	adds	r3, #3
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	791a      	ldrb	r2, [r3, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	795a      	ldrb	r2, [r3, #5]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	799a      	ldrb	r2, [r3, #6]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	79da      	ldrb	r2, [r3, #7]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	7a1a      	ldrb	r2, [r3, #8]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d95f      	bls.n	80079a2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078e2:	2309      	movs	r3, #9
 80078e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078ea:	e051      	b.n	8007990 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078ec:	f107 0316 	add.w	r3, r7, #22
 80078f0:	4619      	mov	r1, r3
 80078f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f4:	f000 f8e8 	bl	8007ac8 <USBH_GetNextDesc>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d146      	bne.n	8007990 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007906:	221a      	movs	r2, #26
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	3308      	adds	r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	3302      	adds	r3, #2
 8007914:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007918:	69f8      	ldr	r0, [r7, #28]
 800791a:	f000 f846 	bl	80079aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007928:	e022      	b.n	8007970 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800792a:	f107 0316 	add.w	r3, r7, #22
 800792e:	4619      	mov	r1, r3
 8007930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007932:	f000 f8c9 	bl	8007ac8 <USBH_GetNextDesc>
 8007936:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b05      	cmp	r3, #5
 800793e:	d117      	bne.n	8007970 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007944:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007948:	3201      	adds	r2, #1
 800794a:	00d2      	lsls	r2, r2, #3
 800794c:	211a      	movs	r1, #26
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	4413      	add	r3, r2
 8007954:	3308      	adds	r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	3304      	adds	r3, #4
 800795c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800795e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007960:	69b8      	ldr	r0, [r7, #24]
 8007962:	f000 f851 	bl	8007a08 <USBH_ParseEPDesc>
            ep_ix++;
 8007966:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800796a:	3301      	adds	r3, #1
 800796c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007978:	429a      	cmp	r2, r3
 800797a:	d204      	bcs.n	8007986 <USBH_ParseCfgDesc+0x120>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	885a      	ldrh	r2, [r3, #2]
 8007980:	8afb      	ldrh	r3, [r7, #22]
 8007982:	429a      	cmp	r2, r3
 8007984:	d8d1      	bhi.n	800792a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800798a:	3301      	adds	r3, #1
 800798c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007994:	2b01      	cmp	r3, #1
 8007996:	d804      	bhi.n	80079a2 <USBH_ParseCfgDesc+0x13c>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	885a      	ldrh	r2, [r3, #2]
 800799c:	8afb      	ldrh	r3, [r7, #22]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d8a4      	bhi.n	80078ec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80079a2:	bf00      	nop
 80079a4:	3728      	adds	r7, #40	; 0x28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	785a      	ldrb	r2, [r3, #1]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	789a      	ldrb	r2, [r3, #2]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	78da      	ldrb	r2, [r3, #3]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	791a      	ldrb	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	795a      	ldrb	r2, [r3, #5]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	799a      	ldrb	r2, [r3, #6]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	79da      	ldrb	r2, [r3, #7]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	7a1a      	ldrb	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	721a      	strb	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781a      	ldrb	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	785a      	ldrb	r2, [r3, #1]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	789a      	ldrb	r2, [r3, #2]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	78da      	ldrb	r2, [r3, #3]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	3304      	adds	r3, #4
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3305      	adds	r3, #5
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	799a      	ldrb	r2, [r3, #6]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	719a      	strb	r2, [r3, #6]
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d120      	bne.n	8007abc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	1e9a      	subs	r2, r3, #2
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	bf28      	it	cs
 8007a86:	4613      	movcs	r3, r2
 8007a88:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a90:	2300      	movs	r3, #0
 8007a92:	82fb      	strh	r3, [r7, #22]
 8007a94:	e00b      	b.n	8007aae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aa8:	8afb      	ldrh	r3, [r7, #22]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	82fb      	strh	r3, [r7, #22]
 8007aae:	8afa      	ldrh	r2, [r7, #22]
 8007ab0:	8abb      	ldrh	r3, [r7, #20]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3ef      	bcc.n	8007a96 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
  }
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d002      	beq.n	8007b1e <USBH_CtlReq+0x20>
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d00f      	beq.n	8007b3c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b1c:	e027      	b.n	8007b6e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2202      	movs	r2, #2
 8007b34:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3a:	e018      	b.n	8007b6e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f81b 	bl	8007b78 <USBH_HandleControl>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <USBH_CtlReq+0x54>
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d106      	bne.n	8007b60 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	761a      	strb	r2, [r3, #24]
      break;
 8007b5e:	e005      	b.n	8007b6c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d102      	bne.n	8007b6c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	709a      	strb	r2, [r3, #2]
      break;
 8007b6c:	bf00      	nop
  }
  return status;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7e1b      	ldrb	r3, [r3, #24]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	f200 8156 	bhi.w	8007e40 <USBH_HandleControl+0x2c8>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBH_HandleControl+0x24>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007be3 	.word	0x08007be3
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c73 	.word	0x08007c73
 8007bac:	08007cab 	.word	0x08007cab
 8007bb0:	08007cd5 	.word	0x08007cd5
 8007bb4:	08007d27 	.word	0x08007d27
 8007bb8:	08007d49 	.word	0x08007d49
 8007bbc:	08007d85 	.word	0x08007d85
 8007bc0:	08007dab 	.word	0x08007dab
 8007bc4:	08007de9 	.word	0x08007de9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0110 	add.w	r1, r3, #16
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f943 	bl	8007e60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	761a      	strb	r2, [r3, #24]
      break;
 8007be0:	e139      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fcc5 	bl	8008578 <USBH_LL_GetURBState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d11e      	bne.n	8007c36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7c1b      	ldrb	r3, [r3, #16]
 8007bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8adb      	ldrh	r3, [r3, #22]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d103      	bne.n	8007c18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c16:	e115      	b.n	8007e44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	761a      	strb	r2, [r3, #24]
      break;
 8007c1e:	e111      	b.n	8007e44 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
 8007c22:	2b80      	cmp	r3, #128	; 0x80
 8007c24:	d103      	bne.n	8007c2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2209      	movs	r2, #9
 8007c2a:	761a      	strb	r2, [r3, #24]
      break;
 8007c2c:	e10a      	b.n	8007e44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2207      	movs	r2, #7
 8007c32:	761a      	strb	r2, [r3, #24]
      break;
 8007c34:	e106      	b.n	8007e44 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d003      	beq.n	8007c44 <USBH_HandleControl+0xcc>
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	f040 8100 	bne.w	8007e44 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	220b      	movs	r2, #11
 8007c48:	761a      	strb	r2, [r3, #24]
      break;
 8007c4a:	e0fb      	b.n	8007e44 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6899      	ldr	r1, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	899a      	ldrh	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f93a 	bl	8007ede <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	761a      	strb	r2, [r3, #24]
      break;
 8007c70:	e0f1      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fc7d 	bl	8008578 <USBH_LL_GetURBState>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d102      	bne.n	8007c8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2209      	movs	r2, #9
 8007c8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d102      	bne.n	8007c9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c94:	2303      	movs	r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c98:	e0d6      	b.n	8007e48 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	f040 80d3 	bne.w	8007e48 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	220b      	movs	r2, #11
 8007ca6:	761a      	strb	r2, [r3, #24]
      break;
 8007ca8:	e0ce      	b.n	8007e48 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6899      	ldr	r1, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	899a      	ldrh	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	9000      	str	r0, [sp, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f8ea 	bl	8007e94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2206      	movs	r2, #6
 8007cd0:	761a      	strb	r2, [r3, #24]
      break;
 8007cd2:	e0c0      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	795b      	ldrb	r3, [r3, #5]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fc4c 	bl	8008578 <USBH_LL_GetURBState>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d103      	bne.n	8007cf2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2207      	movs	r2, #7
 8007cee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cf0:	e0ac      	b.n	8007e4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d105      	bne.n	8007d04 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	220c      	movs	r2, #12
 8007cfc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
      break;
 8007d02:	e0a3      	b.n	8007e4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d103      	bne.n	8007d12 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	761a      	strb	r2, [r3, #24]
      break;
 8007d10:	e09c      	b.n	8007e4c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	f040 8099 	bne.w	8007e4c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220b      	movs	r2, #11
 8007d1e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d20:	2302      	movs	r3, #2
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e092      	b.n	8007e4c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f8d5 	bl	8007ede <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2208      	movs	r2, #8
 8007d44:	761a      	strb	r2, [r3, #24]

      break;
 8007d46:	e086      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fc12 	bl	8008578 <USBH_LL_GetURBState>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d105      	bne.n	8007d6a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d68:	e072      	b.n	8007e50 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d103      	bne.n	8007d78 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	220b      	movs	r2, #11
 8007d74:	761a      	strb	r2, [r3, #24]
      break;
 8007d76:	e06b      	b.n	8007e50 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d168      	bne.n	8007e50 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	73fb      	strb	r3, [r7, #15]
      break;
 8007d82:	e065      	b.n	8007e50 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	795b      	ldrb	r3, [r3, #5]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	9200      	str	r2, [sp, #0]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f87f 	bl	8007e94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	220a      	movs	r2, #10
 8007da6:	761a      	strb	r2, [r3, #24]
      break;
 8007da8:	e055      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	795b      	ldrb	r3, [r3, #5]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbe1 	bl	8008578 <USBH_LL_GetURBState>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d105      	bne.n	8007dcc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220d      	movs	r2, #13
 8007dc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dca:	e043      	b.n	8007e54 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d103      	bne.n	8007dda <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2209      	movs	r2, #9
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e03c      	b.n	8007e54 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d139      	bne.n	8007e54 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220b      	movs	r2, #11
 8007de4:	761a      	strb	r2, [r3, #24]
      break;
 8007de6:	e035      	b.n	8007e54 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7e5b      	ldrb	r3, [r3, #25]
 8007dec:	3301      	adds	r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	765a      	strb	r2, [r3, #25]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7e5b      	ldrb	r3, [r3, #25]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d806      	bhi.n	8007e0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e08:	e025      	b.n	8007e56 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e10:	2106      	movs	r1, #6
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	795b      	ldrb	r3, [r3, #5]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f90c 	bl	8008040 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	791b      	ldrb	r3, [r3, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f906 	bl	8008040 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3e:	e00a      	b.n	8007e56 <USBH_HandleControl+0x2de>

    default:
      break;
 8007e40:	bf00      	nop
 8007e42:	e008      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e44:	bf00      	nop
 8007e46:	e006      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e54:	bf00      	nop
  }

  return status;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e6e:	79f9      	ldrb	r1, [r7, #7]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	2308      	movs	r3, #8
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb46 	bl	8008516 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eb8:	7979      	ldrb	r1, [r7, #5]
 8007eba:	7e3b      	ldrb	r3, [r7, #24]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fb21 	bl	8008516 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	461a      	mov	r2, r3
 8007eec:	460b      	mov	r3, r1
 8007eee:	80fb      	strh	r3, [r7, #6]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ef4:	7979      	ldrb	r1, [r7, #5]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	2201      	movs	r2, #1
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fb03 	bl	8008516 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f10:	2300      	movs	r3, #0

}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af04      	add	r7, sp, #16
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	460b      	mov	r3, r1
 8007f2a:	80fb      	strh	r3, [r7, #6]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f3e:	7979      	ldrb	r1, [r7, #5]
 8007f40:	7e3b      	ldrb	r3, [r7, #24]
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fade 	bl	8008516 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	460b      	mov	r3, r1
 8007f74:	80fb      	strh	r3, [r7, #6]
 8007f76:	4613      	mov	r3, r2
 8007f78:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f7a:	7979      	ldrb	r1, [r7, #5]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2201      	movs	r2, #1
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fac0 	bl	8008516 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	70fb      	strb	r3, [r7, #3]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70bb      	strb	r3, [r7, #2]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fba:	7878      	ldrb	r0, [r7, #1]
 8007fbc:	78ba      	ldrb	r2, [r7, #2]
 8007fbe:	78f9      	ldrb	r1, [r7, #3]
 8007fc0:	8b3b      	ldrh	r3, [r7, #24]
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	7d3b      	ldrb	r3, [r7, #20]
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	7c3b      	ldrb	r3, [r7, #16]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa53 	bl	800847a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa72 	bl	80084d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f836 	bl	800807c <USBH_GetFreePipe>
 8008010:	4603      	mov	r3, r0
 8008012:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008014:	89fb      	ldrh	r3, [r7, #14]
 8008016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800801a:	4293      	cmp	r3, r2
 800801c:	d00a      	beq.n	8008034 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	33e0      	adds	r3, #224	; 0xe0
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008034:	89fb      	ldrh	r3, [r7, #14]
 8008036:	b2db      	uxtb	r3, r3
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b0a      	cmp	r3, #10
 8008050:	d80d      	bhi.n	800806e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	33e0      	adds	r3, #224	; 0xe0
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	33e0      	adds	r3, #224	; 0xe0
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e00f      	b.n	80080ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	33e0      	adds	r3, #224	; 0xe0
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	e007      	b.n	80080b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	3301      	adds	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	2b0a      	cmp	r3, #10
 80080b2:	d9ec      	bls.n	800808e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80080c8:	2201      	movs	r2, #1
 80080ca:	490e      	ldr	r1, [pc, #56]	; (8008104 <MX_USB_HOST_Init+0x40>)
 80080cc:	480e      	ldr	r0, [pc, #56]	; (8008108 <MX_USB_HOST_Init+0x44>)
 80080ce:	f7fe fca1 	bl	8006a14 <USBH_Init>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80080d8:	f7f9 f84c 	bl	8001174 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80080dc:	490b      	ldr	r1, [pc, #44]	; (800810c <MX_USB_HOST_Init+0x48>)
 80080de:	480a      	ldr	r0, [pc, #40]	; (8008108 <MX_USB_HOST_Init+0x44>)
 80080e0:	f7fe fd26 	bl	8006b30 <USBH_RegisterClass>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080ea:	f7f9 f843 	bl	8001174 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080ee:	4806      	ldr	r0, [pc, #24]	; (8008108 <MX_USB_HOST_Init+0x44>)
 80080f0:	f7fe fdaa 	bl	8006c48 <USBH_Start>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080fa:	f7f9 f83b 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080fe:	bf00      	nop
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	08008125 	.word	0x08008125
 8008108:	20000284 	.word	0x20000284
 800810c:	20000010 	.word	0x20000010

08008110 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008114:	4802      	ldr	r0, [pc, #8]	; (8008120 <MX_USB_HOST_Process+0x10>)
 8008116:	f7fe fda7 	bl	8006c68 <USBH_Process>
}
 800811a:	bf00      	nop
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000284 	.word	0x20000284

08008124 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	3b01      	subs	r3, #1
 8008134:	2b04      	cmp	r3, #4
 8008136:	d819      	bhi.n	800816c <USBH_UserProcess+0x48>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBH_UserProcess+0x1c>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	0800816d 	.word	0x0800816d
 8008144:	0800815d 	.word	0x0800815d
 8008148:	0800816d 	.word	0x0800816d
 800814c:	08008165 	.word	0x08008165
 8008150:	08008155 	.word	0x08008155
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <USBH_UserProcess+0x58>)
 8008156:	2203      	movs	r2, #3
 8008158:	701a      	strb	r2, [r3, #0]
  break;
 800815a:	e008      	b.n	800816e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <USBH_UserProcess+0x58>)
 800815e:	2202      	movs	r2, #2
 8008160:	701a      	strb	r2, [r3, #0]
  break;
 8008162:	e004      	b.n	800816e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <USBH_UserProcess+0x58>)
 8008166:	2201      	movs	r2, #1
 8008168:	701a      	strb	r2, [r3, #0]
  break;
 800816a:	e000      	b.n	800816e <USBH_UserProcess+0x4a>

  default:
  break;
 800816c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000128 	.word	0x20000128

08008180 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008188:	f107 0314 	add.w	r3, r7, #20
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	605a      	str	r2, [r3, #4]
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	60da      	str	r2, [r3, #12]
 8008196:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081a0:	d147      	bne.n	8008232 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	4b25      	ldr	r3, [pc, #148]	; (800823c <HAL_HCD_MspInit+0xbc>)
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	4a24      	ldr	r2, [pc, #144]	; (800823c <HAL_HCD_MspInit+0xbc>)
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	6313      	str	r3, [r2, #48]	; 0x30
 80081b2:	4b22      	ldr	r3, [pc, #136]	; (800823c <HAL_HCD_MspInit+0xbc>)
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80081cc:	f107 0314 	add.w	r3, r7, #20
 80081d0:	4619      	mov	r1, r3
 80081d2:	481b      	ldr	r0, [pc, #108]	; (8008240 <HAL_HCD_MspInit+0xc0>)
 80081d4:	f7f9 fb90 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80081d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80081dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081de:	2302      	movs	r3, #2
 80081e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081e6:	2300      	movs	r3, #0
 80081e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081ea:	230a      	movs	r3, #10
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ee:	f107 0314 	add.w	r3, r7, #20
 80081f2:	4619      	mov	r1, r3
 80081f4:	4812      	ldr	r0, [pc, #72]	; (8008240 <HAL_HCD_MspInit+0xc0>)
 80081f6:	f7f9 fb7f 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <HAL_HCD_MspInit+0xbc>)
 80081fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fe:	4a0f      	ldr	r2, [pc, #60]	; (800823c <HAL_HCD_MspInit+0xbc>)
 8008200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008204:	6353      	str	r3, [r2, #52]	; 0x34
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	4b0c      	ldr	r3, [pc, #48]	; (800823c <HAL_HCD_MspInit+0xbc>)
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	4a0b      	ldr	r2, [pc, #44]	; (800823c <HAL_HCD_MspInit+0xbc>)
 8008210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008214:	6453      	str	r3, [r2, #68]	; 0x44
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <HAL_HCD_MspInit+0xbc>)
 8008218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008222:	2200      	movs	r2, #0
 8008224:	2100      	movs	r1, #0
 8008226:	2043      	movs	r0, #67	; 0x43
 8008228:	f7f9 fb2f 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800822c:	2043      	movs	r0, #67	; 0x43
 800822e:	f7f9 fb48 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008232:	bf00      	nop
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40023800 	.word	0x40023800
 8008240:	40020000 	.word	0x40020000

08008244 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff f8db 	bl	800740e <USBH_LL_IncTimer>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff f913 	bl	800749a <USBH_LL_Connect>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f91c 	bl	80074c8 <USBH_LL_Disconnect>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
 80082a4:	4613      	mov	r3, r2
 80082a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f8cd 	bl	8007462 <USBH_LL_PortEnabled>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff f8cd 	bl	800747e <USBH_LL_PortDisabled>
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d12a      	bne.n	8008354 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80082fe:	4a18      	ldr	r2, [pc, #96]	; (8008360 <USBH_LL_Init+0x74>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a15      	ldr	r2, [pc, #84]	; (8008360 <USBH_LL_Init+0x74>)
 800830a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800830e:	4b14      	ldr	r3, [pc, #80]	; (8008360 <USBH_LL_Init+0x74>)
 8008310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008314:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <USBH_LL_Init+0x74>)
 8008318:	2208      	movs	r2, #8
 800831a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800831c:	4b10      	ldr	r3, [pc, #64]	; (8008360 <USBH_LL_Init+0x74>)
 800831e:	2201      	movs	r2, #1
 8008320:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <USBH_LL_Init+0x74>)
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <USBH_LL_Init+0x74>)
 800832a:	2202      	movs	r2, #2
 800832c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <USBH_LL_Init+0x74>)
 8008330:	2200      	movs	r2, #0
 8008332:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008334:	480a      	ldr	r0, [pc, #40]	; (8008360 <USBH_LL_Init+0x74>)
 8008336:	f7f9 fc94 	bl	8001c62 <HAL_HCD_Init>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008340:	f7f8 ff18 	bl	8001174 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008344:	4806      	ldr	r0, [pc, #24]	; (8008360 <USBH_LL_Init+0x74>)
 8008346:	f7fa f878 	bl	800243a <HAL_HCD_GetCurrentFrame>
 800834a:	4603      	mov	r3, r0
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff f84e 	bl	80073f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000065c 	.word	0x2000065c

08008364 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800837a:	4618      	mov	r0, r3
 800837c:	f7f9 ffe7 	bl	800234e <HAL_HCD_Start>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f95c 	bl	8008644 <USBH_Get_USB_Status>
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008390:	7bbb      	ldrb	r3, [r7, #14]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f9 ffef 	bl	8002394 <HAL_HCD_Stop>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f941 	bl	8008644 <USBH_Get_USB_Status>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fa f837 	bl	8002456 <HAL_HCD_GetCurrentSpeed>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d00c      	beq.n	8008408 <USBH_LL_GetSpeed+0x38>
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d80d      	bhi.n	800840e <USBH_LL_GetSpeed+0x3e>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <USBH_LL_GetSpeed+0x2c>
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d003      	beq.n	8008402 <USBH_LL_GetSpeed+0x32>
 80083fa:	e008      	b.n	800840e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	e008      	b.n	8008414 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
    break;
 8008406:	e005      	b.n	8008414 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008408:	2302      	movs	r3, #2
 800840a:	73fb      	strb	r3, [r7, #15]
    break;
 800840c:	e002      	b.n	8008414 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800840e:	2301      	movs	r3, #1
 8008410:	73fb      	strb	r3, [r7, #15]
    break;
 8008412:	bf00      	nop
  }
  return  speed;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008434:	4618      	mov	r0, r3
 8008436:	f7f9 ffca 	bl	80023ce <HAL_HCD_ResetPort>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f8ff 	bl	8008644 <USBH_Get_USB_Status>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844a:	7bbb      	ldrb	r3, [r7, #14]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 ffd1 	bl	8002412 <HAL_HCD_HC_GetXferCount>
 8008470:	4603      	mov	r3, r0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b089      	sub	sp, #36	; 0x24
 800847e:	af04      	add	r7, sp, #16
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	461a      	mov	r2, r3
 8008488:	4603      	mov	r3, r0
 800848a:	70fb      	strb	r3, [r7, #3]
 800848c:	460b      	mov	r3, r1
 800848e:	70bb      	strb	r3, [r7, #2]
 8008490:	4613      	mov	r3, r2
 8008492:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084a2:	787c      	ldrb	r4, [r7, #1]
 80084a4:	78ba      	ldrb	r2, [r7, #2]
 80084a6:	78f9      	ldrb	r1, [r7, #3]
 80084a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4623      	mov	r3, r4
 80084ba:	f7f9 fc34 	bl	8001d26 <HAL_HCD_HC_Init>
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f8bd 	bl	8008644 <USBH_Get_USB_Status>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd90      	pop	{r4, r7, pc}

080084d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f9 fca4 	bl	8001e44 <HAL_HCD_HC_Halt>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f89e 	bl	8008644 <USBH_Get_USB_Status>
 8008508:	4603      	mov	r3, r0
 800850a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008516:	b590      	push	{r4, r7, lr}
 8008518:	b089      	sub	sp, #36	; 0x24
 800851a:	af04      	add	r7, sp, #16
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	461a      	mov	r2, r3
 8008524:	4603      	mov	r3, r0
 8008526:	70fb      	strb	r3, [r7, #3]
 8008528:	460b      	mov	r3, r1
 800852a:	70bb      	strb	r3, [r7, #2]
 800852c:	4613      	mov	r3, r2
 800852e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800853e:	787c      	ldrb	r4, [r7, #1]
 8008540:	78ba      	ldrb	r2, [r7, #2]
 8008542:	78f9      	ldrb	r1, [r7, #3]
 8008544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4623      	mov	r3, r4
 800855a:	f7f9 fc97 	bl	8001e8c <HAL_HCD_HC_SubmitRequest>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f86d 	bl	8008644 <USBH_Get_USB_Status>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	bd90      	pop	{r4, r7, pc}

08008578 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 ff2b 	bl	80023ea <HAL_HCD_HC_GetURBState>
 8008594:	4603      	mov	r3, r0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d103      	bne.n	80085bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f870 	bl	800869c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085bc:	20c8      	movs	r0, #200	; 0xc8
 80085be:	f7f9 f865 	bl	800168c <HAL_Delay>
  return USBH_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
 80085d8:	4613      	mov	r3, r2
 80085da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	212c      	movs	r1, #44	; 0x2c
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	333b      	adds	r3, #59	; 0x3b
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	212c      	movs	r1, #44	; 0x2c
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	4413      	add	r3, r2
 8008604:	3354      	adds	r3, #84	; 0x54
 8008606:	78ba      	ldrb	r2, [r7, #2]
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e008      	b.n	800861e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	212c      	movs	r1, #44	; 0x2c
 8008612:	fb01 f303 	mul.w	r3, r1, r3
 8008616:	4413      	add	r3, r2
 8008618:	3355      	adds	r3, #85	; 0x55
 800861a:	78ba      	ldrb	r2, [r7, #2]
 800861c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7f9 f829 	bl	800168c <HAL_Delay>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d817      	bhi.n	8008688 <USBH_Get_USB_Status+0x44>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <USBH_Get_USB_Status+0x1c>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008671 	.word	0x08008671
 8008664:	08008677 	.word	0x08008677
 8008668:	0800867d 	.word	0x0800867d
 800866c:	08008683 	.word	0x08008683
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	e00b      	b.n	800868e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008676:	2302      	movs	r3, #2
 8008678:	73fb      	strb	r3, [r7, #15]
    break;
 800867a:	e008      	b.n	800868e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
    break;
 8008680:	e005      	b.n	800868e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008682:	2302      	movs	r3, #2
 8008684:	73fb      	strb	r3, [r7, #15]
    break;
 8008686:	e002      	b.n	800868e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008688:	2302      	movs	r3, #2
 800868a:	73fb      	strb	r3, [r7, #15]
    break;
 800868c:	bf00      	nop
  }
  return usb_status;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e001      	b.n	80086ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	461a      	mov	r2, r3
 80086be:	2101      	movs	r1, #1
 80086c0:	4803      	ldr	r0, [pc, #12]	; (80086d0 <MX_DriverVbusFS+0x34>)
 80086c2:	f7f9 fab5 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40020800 	.word	0x40020800

080086d4 <__errno>:
 80086d4:	4b01      	ldr	r3, [pc, #4]	; (80086dc <__errno+0x8>)
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20000030 	.word	0x20000030

080086e0 <__libc_init_array>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	4d0d      	ldr	r5, [pc, #52]	; (8008718 <__libc_init_array+0x38>)
 80086e4:	4c0d      	ldr	r4, [pc, #52]	; (800871c <__libc_init_array+0x3c>)
 80086e6:	1b64      	subs	r4, r4, r5
 80086e8:	10a4      	asrs	r4, r4, #2
 80086ea:	2600      	movs	r6, #0
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	d109      	bne.n	8008704 <__libc_init_array+0x24>
 80086f0:	4d0b      	ldr	r5, [pc, #44]	; (8008720 <__libc_init_array+0x40>)
 80086f2:	4c0c      	ldr	r4, [pc, #48]	; (8008724 <__libc_init_array+0x44>)
 80086f4:	f000 f906 	bl	8008904 <_init>
 80086f8:	1b64      	subs	r4, r4, r5
 80086fa:	10a4      	asrs	r4, r4, #2
 80086fc:	2600      	movs	r6, #0
 80086fe:	42a6      	cmp	r6, r4
 8008700:	d105      	bne.n	800870e <__libc_init_array+0x2e>
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	f855 3b04 	ldr.w	r3, [r5], #4
 8008708:	4798      	blx	r3
 800870a:	3601      	adds	r6, #1
 800870c:	e7ee      	b.n	80086ec <__libc_init_array+0xc>
 800870e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008712:	4798      	blx	r3
 8008714:	3601      	adds	r6, #1
 8008716:	e7f2      	b.n	80086fe <__libc_init_array+0x1e>
 8008718:	08008eb0 	.word	0x08008eb0
 800871c:	08008eb0 	.word	0x08008eb0
 8008720:	08008eb0 	.word	0x08008eb0
 8008724:	08008eb4 	.word	0x08008eb4

08008728 <malloc>:
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <malloc+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f000 b871 	b.w	8008814 <_malloc_r>
 8008732:	bf00      	nop
 8008734:	20000030 	.word	0x20000030

08008738 <free>:
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <free+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f000 b819 	b.w	8008774 <_free_r>
 8008742:	bf00      	nop
 8008744:	20000030 	.word	0x20000030

08008748 <memcpy>:
 8008748:	440a      	add	r2, r1
 800874a:	4291      	cmp	r1, r2
 800874c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008750:	d100      	bne.n	8008754 <memcpy+0xc>
 8008752:	4770      	bx	lr
 8008754:	b510      	push	{r4, lr}
 8008756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800875e:	4291      	cmp	r1, r2
 8008760:	d1f9      	bne.n	8008756 <memcpy+0xe>
 8008762:	bd10      	pop	{r4, pc}

08008764 <memset>:
 8008764:	4402      	add	r2, r0
 8008766:	4603      	mov	r3, r0
 8008768:	4293      	cmp	r3, r2
 800876a:	d100      	bne.n	800876e <memset+0xa>
 800876c:	4770      	bx	lr
 800876e:	f803 1b01 	strb.w	r1, [r3], #1
 8008772:	e7f9      	b.n	8008768 <memset+0x4>

08008774 <_free_r>:
 8008774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008776:	2900      	cmp	r1, #0
 8008778:	d048      	beq.n	800880c <_free_r+0x98>
 800877a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f1a1 0404 	sub.w	r4, r1, #4
 8008786:	bfb8      	it	lt
 8008788:	18e4      	addlt	r4, r4, r3
 800878a:	f000 f8ad 	bl	80088e8 <__malloc_lock>
 800878e:	4a20      	ldr	r2, [pc, #128]	; (8008810 <_free_r+0x9c>)
 8008790:	9801      	ldr	r0, [sp, #4]
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	4615      	mov	r5, r2
 8008796:	b933      	cbnz	r3, 80087a6 <_free_r+0x32>
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6014      	str	r4, [r2, #0]
 800879c:	b003      	add	sp, #12
 800879e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a2:	f000 b8a7 	b.w	80088f4 <__malloc_unlock>
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	d90b      	bls.n	80087c2 <_free_r+0x4e>
 80087aa:	6821      	ldr	r1, [r4, #0]
 80087ac:	1862      	adds	r2, r4, r1
 80087ae:	4293      	cmp	r3, r2
 80087b0:	bf04      	itt	eq
 80087b2:	681a      	ldreq	r2, [r3, #0]
 80087b4:	685b      	ldreq	r3, [r3, #4]
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	bf04      	itt	eq
 80087ba:	1852      	addeq	r2, r2, r1
 80087bc:	6022      	streq	r2, [r4, #0]
 80087be:	602c      	str	r4, [r5, #0]
 80087c0:	e7ec      	b.n	800879c <_free_r+0x28>
 80087c2:	461a      	mov	r2, r3
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	b10b      	cbz	r3, 80087cc <_free_r+0x58>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d9fa      	bls.n	80087c2 <_free_r+0x4e>
 80087cc:	6811      	ldr	r1, [r2, #0]
 80087ce:	1855      	adds	r5, r2, r1
 80087d0:	42a5      	cmp	r5, r4
 80087d2:	d10b      	bne.n	80087ec <_free_r+0x78>
 80087d4:	6824      	ldr	r4, [r4, #0]
 80087d6:	4421      	add	r1, r4
 80087d8:	1854      	adds	r4, r2, r1
 80087da:	42a3      	cmp	r3, r4
 80087dc:	6011      	str	r1, [r2, #0]
 80087de:	d1dd      	bne.n	800879c <_free_r+0x28>
 80087e0:	681c      	ldr	r4, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	6053      	str	r3, [r2, #4]
 80087e6:	4421      	add	r1, r4
 80087e8:	6011      	str	r1, [r2, #0]
 80087ea:	e7d7      	b.n	800879c <_free_r+0x28>
 80087ec:	d902      	bls.n	80087f4 <_free_r+0x80>
 80087ee:	230c      	movs	r3, #12
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	e7d3      	b.n	800879c <_free_r+0x28>
 80087f4:	6825      	ldr	r5, [r4, #0]
 80087f6:	1961      	adds	r1, r4, r5
 80087f8:	428b      	cmp	r3, r1
 80087fa:	bf04      	itt	eq
 80087fc:	6819      	ldreq	r1, [r3, #0]
 80087fe:	685b      	ldreq	r3, [r3, #4]
 8008800:	6063      	str	r3, [r4, #4]
 8008802:	bf04      	itt	eq
 8008804:	1949      	addeq	r1, r1, r5
 8008806:	6021      	streq	r1, [r4, #0]
 8008808:	6054      	str	r4, [r2, #4]
 800880a:	e7c7      	b.n	800879c <_free_r+0x28>
 800880c:	b003      	add	sp, #12
 800880e:	bd30      	pop	{r4, r5, pc}
 8008810:	2000012c 	.word	0x2000012c

08008814 <_malloc_r>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	1ccd      	adds	r5, r1, #3
 8008818:	f025 0503 	bic.w	r5, r5, #3
 800881c:	3508      	adds	r5, #8
 800881e:	2d0c      	cmp	r5, #12
 8008820:	bf38      	it	cc
 8008822:	250c      	movcc	r5, #12
 8008824:	2d00      	cmp	r5, #0
 8008826:	4606      	mov	r6, r0
 8008828:	db01      	blt.n	800882e <_malloc_r+0x1a>
 800882a:	42a9      	cmp	r1, r5
 800882c:	d903      	bls.n	8008836 <_malloc_r+0x22>
 800882e:	230c      	movs	r3, #12
 8008830:	6033      	str	r3, [r6, #0]
 8008832:	2000      	movs	r0, #0
 8008834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008836:	f000 f857 	bl	80088e8 <__malloc_lock>
 800883a:	4921      	ldr	r1, [pc, #132]	; (80088c0 <_malloc_r+0xac>)
 800883c:	680a      	ldr	r2, [r1, #0]
 800883e:	4614      	mov	r4, r2
 8008840:	b99c      	cbnz	r4, 800886a <_malloc_r+0x56>
 8008842:	4f20      	ldr	r7, [pc, #128]	; (80088c4 <_malloc_r+0xb0>)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	b923      	cbnz	r3, 8008852 <_malloc_r+0x3e>
 8008848:	4621      	mov	r1, r4
 800884a:	4630      	mov	r0, r6
 800884c:	f000 f83c 	bl	80088c8 <_sbrk_r>
 8008850:	6038      	str	r0, [r7, #0]
 8008852:	4629      	mov	r1, r5
 8008854:	4630      	mov	r0, r6
 8008856:	f000 f837 	bl	80088c8 <_sbrk_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d123      	bne.n	80088a6 <_malloc_r+0x92>
 800885e:	230c      	movs	r3, #12
 8008860:	6033      	str	r3, [r6, #0]
 8008862:	4630      	mov	r0, r6
 8008864:	f000 f846 	bl	80088f4 <__malloc_unlock>
 8008868:	e7e3      	b.n	8008832 <_malloc_r+0x1e>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	1b5b      	subs	r3, r3, r5
 800886e:	d417      	bmi.n	80088a0 <_malloc_r+0x8c>
 8008870:	2b0b      	cmp	r3, #11
 8008872:	d903      	bls.n	800887c <_malloc_r+0x68>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	441c      	add	r4, r3
 8008878:	6025      	str	r5, [r4, #0]
 800887a:	e004      	b.n	8008886 <_malloc_r+0x72>
 800887c:	6863      	ldr	r3, [r4, #4]
 800887e:	42a2      	cmp	r2, r4
 8008880:	bf0c      	ite	eq
 8008882:	600b      	streq	r3, [r1, #0]
 8008884:	6053      	strne	r3, [r2, #4]
 8008886:	4630      	mov	r0, r6
 8008888:	f000 f834 	bl	80088f4 <__malloc_unlock>
 800888c:	f104 000b 	add.w	r0, r4, #11
 8008890:	1d23      	adds	r3, r4, #4
 8008892:	f020 0007 	bic.w	r0, r0, #7
 8008896:	1ac2      	subs	r2, r0, r3
 8008898:	d0cc      	beq.n	8008834 <_malloc_r+0x20>
 800889a:	1a1b      	subs	r3, r3, r0
 800889c:	50a3      	str	r3, [r4, r2]
 800889e:	e7c9      	b.n	8008834 <_malloc_r+0x20>
 80088a0:	4622      	mov	r2, r4
 80088a2:	6864      	ldr	r4, [r4, #4]
 80088a4:	e7cc      	b.n	8008840 <_malloc_r+0x2c>
 80088a6:	1cc4      	adds	r4, r0, #3
 80088a8:	f024 0403 	bic.w	r4, r4, #3
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	d0e3      	beq.n	8008878 <_malloc_r+0x64>
 80088b0:	1a21      	subs	r1, r4, r0
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f808 	bl	80088c8 <_sbrk_r>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d1dd      	bne.n	8008878 <_malloc_r+0x64>
 80088bc:	e7cf      	b.n	800885e <_malloc_r+0x4a>
 80088be:	bf00      	nop
 80088c0:	2000012c 	.word	0x2000012c
 80088c4:	20000130 	.word	0x20000130

080088c8 <_sbrk_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d06      	ldr	r5, [pc, #24]	; (80088e4 <_sbrk_r+0x1c>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7f8 fdf6 	bl	80014c4 <_sbrk>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_sbrk_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_sbrk_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20000960 	.word	0x20000960

080088e8 <__malloc_lock>:
 80088e8:	4801      	ldr	r0, [pc, #4]	; (80088f0 <__malloc_lock+0x8>)
 80088ea:	f000 b809 	b.w	8008900 <__retarget_lock_acquire_recursive>
 80088ee:	bf00      	nop
 80088f0:	20000968 	.word	0x20000968

080088f4 <__malloc_unlock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_unlock+0x8>)
 80088f6:	f000 b804 	b.w	8008902 <__retarget_lock_release_recursive>
 80088fa:	bf00      	nop
 80088fc:	20000968 	.word	0x20000968

08008900 <__retarget_lock_acquire_recursive>:
 8008900:	4770      	bx	lr

08008902 <__retarget_lock_release_recursive>:
 8008902:	4770      	bx	lr

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
