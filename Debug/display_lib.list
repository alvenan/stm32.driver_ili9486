
display_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008710  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e08  08008e08  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e10  08008e10  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e10  08008e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008dc  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c579  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d66  00000000  00000000  0003c63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00041580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a2e  00000000  00000000  000425e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fa0  00000000  00000000  00067016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc201  00000000  00000000  0007efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b1b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c20  00000000  00000000  0014b20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008880 	.word	0x08008880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008880 	.word	0x08008880

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9486_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9486_SendCommand(uint8_t com)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <ILI9486_SendCommand+0x54>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <ILI9486_SendCommand+0x58>)
 80004d4:	8811      	ldrh	r1, [r2, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fb67 	bl	8001bac <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <ILI9486_SendCommand+0x5c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <ILI9486_SendCommand+0x60>)
 80004e4:	8811      	ldrh	r1, [r2, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fb5f 	bl	8001bac <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80004ee:	f107 010f 	add.w	r1, r7, #15
 80004f2:	2305      	movs	r3, #5
 80004f4:	2201      	movs	r2, #1
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <ILI9486_SendCommand+0x64>)
 80004f8:	f004 fcef 	bl	8004eda <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <ILI9486_SendCommand+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <ILI9486_SendCommand+0x60>)
 8000502:	8811      	ldrh	r1, [r2, #0]
 8000504:	2201      	movs	r2, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fb50 	bl	8001bac <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000114 	.word	0x20000114
 8000518:	20000118 	.word	0x20000118
 800051c:	2000010c 	.word	0x2000010c
 8000520:	20000110 	.word	0x20000110
 8000524:	200000b4 	.word	0x200000b4

08000528 <ILI9486_SendData>:

//2. Write data to LCD
void ILI9486_SendData(uint8_t data)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <ILI9486_SendData+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <ILI9486_SendData+0x58>)
 800053c:	8811      	ldrh	r1, [r2, #0]
 800053e:	2201      	movs	r2, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fb33 	bl	8001bac <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <ILI9486_SendData+0x5c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <ILI9486_SendData+0x60>)
 800054c:	8811      	ldrh	r1, [r2, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fb2b 	bl	8001bac <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000556:	f107 010f 	add.w	r1, r7, #15
 800055a:	2305      	movs	r3, #5
 800055c:	2201      	movs	r2, #1
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <ILI9486_SendData+0x64>)
 8000560:	f004 fcbb 	bl	8004eda <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <ILI9486_SendData+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <ILI9486_SendData+0x60>)
 800056a:	8811      	ldrh	r1, [r2, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fb1c 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000114 	.word	0x20000114
 8000580:	20000118 	.word	0x20000118
 8000584:	2000010c 	.word	0x2000010c
 8000588:	20000110 	.word	0x20000110
 800058c:	200000b4 	.word	0x200000b4

08000590 <ILI9486_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9486_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4623      	mov	r3, r4
 80005a0:	80fb      	strh	r3, [r7, #6]
 80005a2:	4603      	mov	r3, r0
 80005a4:	80bb      	strh	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
 80005aa:	4613      	mov	r3, r2
 80005ac:	803b      	strh	r3, [r7, #0]

  ILI9486_SendCommand (ILI9486_COLUMN_ADDR);
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f7ff ff86 	bl	80004c0 <ILI9486_SendCommand>
  ILI9486_SendData(x1>>8);
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffb3 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(x1 & 0xFF);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ffae 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(x2>>8);
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffa7 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(x2 & 0xFF);
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffa2 	bl	8000528 <ILI9486_SendData>

  ILI9486_SendCommand (ILI9486_PAGE_ADDR);
 80005e4:	202b      	movs	r0, #43	; 0x2b
 80005e6:	f7ff ff6b 	bl	80004c0 <ILI9486_SendCommand>
  ILI9486_SendData(y1>>8);
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff98 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(y1 & 0xFF);
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff93 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(y2>>8);
 8000602:	883b      	ldrh	r3, [r7, #0]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff8c 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendData(y2 & 0xFF);
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff87 	bl	8000528 <ILI9486_SendData>
  ILI9486_SendCommand (ILI9486_GRAM);
 800061a:	202c      	movs	r0, #44	; 0x2c
 800061c:	f7ff ff50 	bl	80004c0 <ILI9486_SendCommand>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <ILI9486_Init>:
};
//4. Initialize function
void ILI9486_Init(SPI_HandleTypeDef *spiLcdHandle,
		GPIO_TypeDef *csPORT, uint16_t csPIN,
		GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	80fb      	strh	r3, [r7, #6]


	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	4838      	ldr	r0, [pc, #224]	; (8000720 <ILI9486_Init+0xf8>)
 800063e:	f008 f841 	bl	80086c4 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <ILI9486_Init+0xfc>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000648:	4a37      	ldr	r2, [pc, #220]	; (8000728 <ILI9486_Init+0x100>)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800064e:	4a37      	ldr	r2, [pc, #220]	; (800072c <ILI9486_Init+0x104>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000654:	4a36      	ldr	r2, [pc, #216]	; (8000730 <ILI9486_Init+0x108>)
 8000656:	8c3b      	ldrh	r3, [r7, #32]
 8000658:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <ILI9486_Init+0xfc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a32      	ldr	r2, [pc, #200]	; (8000728 <ILI9486_Init+0x100>)
 8000660:	8811      	ldrh	r1, [r2, #0]
 8000662:	2201      	movs	r2, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f001 faa1 	bl	8001bac <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800066a:	4a32      	ldr	r2, [pc, #200]	; (8000734 <ILI9486_Init+0x10c>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000670:	4a31      	ldr	r2, [pc, #196]	; (8000738 <ILI9486_Init+0x110>)
 8000672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000674:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800067e:	f001 fa95 	bl	8001bac <HAL_GPIO_WritePin>

	/* Reset LCD */
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);
 8000682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800068a:	f001 fa8f 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_RESET);
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000696:	f001 fa89 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);
 800069a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a2:	f001 fa83 	bl	8001bac <HAL_GPIO_WritePin>

	/* Write init code */
	uint8_t  numBytes, tmp, i;

	while ( (numBytes=(ili9486_init_sequence[i]))>0 ) { // end marker == 0
 80006a6:	e02f      	b.n	8000708 <ILI9486_Init+0xe0>
		i+=1;
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	3301      	adds	r3, #1
 80006ac:	75bb      	strb	r3, [r7, #22]
		if ( numBytes&0x80 ) {
 80006ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da0b      	bge.n	80006ce <ILI9486_Init+0xa6>
			//Serial.print("delay ");
			tmp = ili9486_init_sequence[i];
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	4a20      	ldr	r2, [pc, #128]	; (800073c <ILI9486_Init+0x114>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	757b      	strb	r3, [r7, #21]
			i+=1;
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	3301      	adds	r3, #1
 80006c2:	75bb      	strb	r3, [r7, #22]
			//Serial.println(tmp);
			HAL_Delay(tmp); // up to 255 millis
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff9e 	bl	8001608 <HAL_Delay>
 80006cc:	e01c      	b.n	8000708 <ILI9486_Init+0xe0>
		} else {
			//Serial.print(numBytes); Serial.print("byte(s): ");
			tmp = ili9486_init_sequence[i];
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <ILI9486_Init+0x114>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	757b      	strb	r3, [r7, #21]
			i+=1;
 80006d6:	7dbb      	ldrb	r3, [r7, #22]
 80006d8:	3301      	adds	r3, #1
 80006da:	75bb      	strb	r3, [r7, #22]
			//Serial.write('<'); Serial.print(tmp, HEX); Serial.write('>');
			ILI9486_SendCommand(tmp); // first byte is command
 80006dc:	7d7b      	ldrb	r3, [r7, #21]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff feee 	bl	80004c0 <ILI9486_SendCommand>
			while (--numBytes) { //   For each argument...
 80006e4:	e00a      	b.n	80006fc <ILI9486_Init+0xd4>
				tmp = ili9486_init_sequence[i];
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <ILI9486_Init+0x114>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	757b      	strb	r3, [r7, #21]
				i+=1;
 80006ee:	7dbb      	ldrb	r3, [r7, #22]
 80006f0:	3301      	adds	r3, #1
 80006f2:	75bb      	strb	r3, [r7, #22]
				//Serial.print(tmp, HEX); Serial.write('.');
				ILI9486_SendData(tmp); // all consecutive bytes are data
 80006f4:	7d7b      	ldrb	r3, [r7, #21]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff16 	bl	8000528 <ILI9486_SendData>
			while (--numBytes) { //   For each argument...
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1ee      	bne.n	80006e6 <ILI9486_Init+0xbe>
	while ( (numBytes=(ili9486_init_sequence[i]))>0 ) { // end marker == 0
 8000708:	7dbb      	ldrb	r3, [r7, #22]
 800070a:	4a0c      	ldr	r2, [pc, #48]	; (800073c <ILI9486_Init+0x114>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	75fb      	strb	r3, [r7, #23]
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1c8      	bne.n	80006a8 <ILI9486_Init+0x80>
			}
		}
	}

 }
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000b4 	.word	0x200000b4
 8000724:	2000010c 	.word	0x2000010c
 8000728:	20000110 	.word	0x20000110
 800072c:	20000114 	.word	0x20000114
 8000730:	20000118 	.word	0x20000118
 8000734:	2000011c 	.word	0x2000011c
 8000738:	20000120 	.word	0x20000120
 800073c:	08008da0 	.word	0x08008da0

08000740 <ILI9486_DrawPixel>:



//5. Write data to a single pixel
void ILI9486_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
 800074a:	460b      	mov	r3, r1
 800074c:	80bb      	strh	r3, [r7, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	807b      	strh	r3, [r7, #2]
  ILI9486_SetCursorPosition(x, y, x, y);
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	88b9      	ldrh	r1, [r7, #4]
 8000758:	88f8      	ldrh	r0, [r7, #6]
 800075a:	f7ff ff19 	bl	8000590 <ILI9486_SetCursorPosition>
	ILI9486_SendData(color>>8);
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fede 	bl	8000528 <ILI9486_SendData>
	ILI9486_SendData(color&0xFF);
 800076c:	887b      	ldrh	r3, [r7, #2]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fed9 	bl	8000528 <ILI9486_SendData>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <ILI9486_Fill_Rect>:
       ILI9486_SendData(color>>8);
				ILI9486_SendData(color&0xff);
	}
}
//7. Rectangle drawing functions
void ILI9486_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	3301      	adds	r3, #1
 8000794:	6839      	ldr	r1, [r7, #0]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	3201      	adds	r2, #1
 800079c:	fb02 f303 	mul.w	r3, r2, r3
 80007a0:	617b      	str	r3, [r7, #20]
	if (n>ILI9486_PIXEL_COUNT) n=ILI9486_PIXEL_COUNT;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 80007a8:	d902      	bls.n	80007b0 <ILI9486_Fill_Rect+0x32>
 80007aa:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80007ae:	617b      	str	r3, [r7, #20]
	ILI9486_SetCursorPosition(x0, y0, x1, y1);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	b298      	uxth	r0, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	b299      	uxth	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f7ff fee6 	bl	8000590 <ILI9486_SetCursorPosition>
	while (n) {
 80007c4:	e00e      	b.n	80007e4 <ILI9486_Fill_Rect+0x66>
			n--;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
      ILI9486_SendData(color>>8);
 80007cc:	8c3b      	ldrh	r3, [r7, #32]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fea7 	bl	8000528 <ILI9486_SendData>
				ILI9486_SendData(color&0xff);
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fea2 	bl	8000528 <ILI9486_SendData>
	while (n) {
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1ed      	bne.n	80007c6 <ILI9486_Fill_Rect+0x48>
	}
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <ILI9486_drawChar>:
	}
}

//11. Text printing functions
void ILI9486_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4604      	mov	r4, r0
 80007fc:	4608      	mov	r0, r1
 80007fe:	4611      	mov	r1, r2
 8000800:	461a      	mov	r2, r3
 8000802:	4623      	mov	r3, r4
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	4603      	mov	r3, r0
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	460b      	mov	r3, r1
 800080c:	70fb      	strb	r3, [r7, #3]
 800080e:	4613      	mov	r3, r2
 8000810:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000812:	4b99      	ldr	r3, [pc, #612]	; (8000a78 <ILI9486_drawChar+0x284>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d003      	beq.n	8000822 <ILI9486_drawChar+0x2e>
 800081a:	4b97      	ldr	r3, [pc, #604]	; (8000a78 <ILI9486_drawChar+0x284>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d120      	bne.n	8000864 <ILI9486_drawChar+0x70>
	{
		if((x >= ILI9486_WIDTH)            || // Clip right
 8000822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000826:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800082a:	f280 811e 	bge.w	8000a6a <ILI9486_drawChar+0x276>
 800082e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000832:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000836:	f280 8118 	bge.w	8000a6a <ILI9486_drawChar+0x276>
     (y >= ILI9486_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800083a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800083e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	440b      	add	r3, r1
     (y >= ILI9486_HEIGHT)           || // Clip bottom
 800084c:	2b00      	cmp	r3, #0
 800084e:	f340 810c 	ble.w	8000a6a <ILI9486_drawChar+0x276>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000852:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 800085e:	2b00      	cmp	r3, #0
 8000860:	dc22      	bgt.n	80008a8 <ILI9486_drawChar+0xb4>
    return;
 8000862:	e102      	b.n	8000a6a <ILI9486_drawChar+0x276>
	}
	else
	{
		if((y >= ILI9486_WIDTH)            || // Clip right
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800086c:	f280 80ff 	bge.w	8000a6e <ILI9486_drawChar+0x27a>
 8000870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000874:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000878:	f280 80f9 	bge.w	8000a6e <ILI9486_drawChar+0x27a>
     (x >= ILI9486_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800087c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000880:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	440b      	add	r3, r1
     (x >= ILI9486_HEIGHT)           || // Clip bottom
 800088e:	2b00      	cmp	r3, #0
 8000890:	f340 80ed 	ble.w	8000a6e <ILI9486_drawChar+0x27a>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f340 80e4 	ble.w	8000a6e <ILI9486_drawChar+0x27a>
 80008a6:	e000      	b.n	80008aa <ILI9486_drawChar+0xb6>
		if((x >= ILI9486_WIDTH)            || // Clip right
 80008a8:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80008aa:	4b74      	ldr	r3, [pc, #464]	; (8000a7c <ILI9486_drawChar+0x288>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <ILI9486_drawChar+0xd0>
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2baf      	cmp	r3, #175	; 0xaf
 80008bc:	d902      	bls.n	80008c4 <ILI9486_drawChar+0xd0>
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	3301      	adds	r3, #1
 80008c2:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e0c9      	b.n	8000a5e <ILI9486_drawChar+0x26a>
    uint8_t line;
    if (i == 5)
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d102      	bne.n	80008d8 <ILI9486_drawChar+0xe4>
      line = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	e00b      	b.n	80008f0 <ILI9486_drawChar+0xfc>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 80008d8:	78fa      	ldrb	r2, [r7, #3]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a65      	ldr	r2, [pc, #404]	; (8000a80 <ILI9486_drawChar+0x28c>)
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	737b      	strb	r3, [r7, #13]
 80008f4:	e0a8      	b.n	8000a48 <ILI9486_drawChar+0x254>
      if (line & 0x1) {
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d04b      	beq.n	8000998 <ILI9486_drawChar+0x1a4>
        if (size == 1) // default size
 8000900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000904:	2b01      	cmp	r3, #1
 8000906:	d110      	bne.n	800092a <ILI9486_drawChar+0x136>
          ILI9486_DrawPixel(x+i, y+j, color);
 8000908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090c:	b29a      	uxth	r2, r3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b298      	uxth	r0, r3
 8000914:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000918:	b29a      	uxth	r2, r3
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff ff0c 	bl	8000740 <ILI9486_DrawPixel>
 8000928:	e085      	b.n	8000a36 <ILI9486_drawChar+0x242>
        else {  // big size
          ILI9486_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 800092a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000936:	fb01 f303 	mul.w	r3, r1, r3
 800093a:	4413      	add	r3, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000942:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000946:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4413      	add	r3, r2
 8000950:	461c      	mov	r4, r3
 8000952:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095a:	441a      	add	r2, r3
 800095c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000960:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000964:	fb01 f303 	mul.w	r3, r1, r3
 8000968:	4413      	add	r3, r2
 800096a:	461d      	mov	r5, r3
 800096c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000976:	441a      	add	r2, r3
 8000978:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800097c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000980:	fb01 f303 	mul.w	r3, r1, r3
 8000984:	4413      	add	r3, r2
 8000986:	461a      	mov	r2, r3
 8000988:	883b      	ldrh	r3, [r7, #0]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4613      	mov	r3, r2
 800098e:	462a      	mov	r2, r5
 8000990:	4621      	mov	r1, r4
 8000992:	f7ff fef4 	bl	800077e <ILI9486_Fill_Rect>
 8000996:	e04e      	b.n	8000a36 <ILI9486_drawChar+0x242>
        }
      } else if (bg != color) {
 8000998:	8c3a      	ldrh	r2, [r7, #32]
 800099a:	883b      	ldrh	r3, [r7, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d04a      	beq.n	8000a36 <ILI9486_drawChar+0x242>
        if (size == 1) // default size
 80009a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d110      	bne.n	80009ca <ILI9486_drawChar+0x1d6>
          ILI9486_DrawPixel(x+i, y+j, bg);
 80009a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	4413      	add	r3, r2
 80009b2:	b298      	uxth	r0, r3
 80009b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	b29b      	uxth	r3, r3
 80009c0:	8c3a      	ldrh	r2, [r7, #32]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f7ff febc 	bl	8000740 <ILI9486_DrawPixel>
 80009c8:	e035      	b.n	8000a36 <ILI9486_drawChar+0x242>
        else {  // big size
          ILI9486_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 80009ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009e6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80009ea:	fb01 f303 	mul.w	r3, r1, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	461c      	mov	r4, r3
 80009f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fa:	441a      	add	r2, r3
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	461d      	mov	r5, r3
 8000a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a16:	441a      	add	r2, r3
 8000a18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a1c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	8c3b      	ldrh	r3, [r7, #32]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	462a      	mov	r2, r5
 8000a30:	4621      	mov	r1, r4
 8000a32:	f7ff fea4 	bl	800077e <ILI9486_Fill_Rect>
        }
      }
      line >>= 1;
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000a3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	737b      	strb	r3, [r7, #13]
 8000a48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	f77f af52 	ble.w	80008f6 <ILI9486_drawChar+0x102>
  for (int8_t i=0; i<6; i++ ) {
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	f77f af31 	ble.w	80008ca <ILI9486_drawChar+0xd6>
 8000a68:	e002      	b.n	8000a70 <ILI9486_drawChar+0x27c>
    return;
 8000a6a:	bf00      	nop
 8000a6c:	e000      	b.n	8000a70 <ILI9486_drawChar+0x27c>
    return;
 8000a6e:	bf00      	nop
    }
  }
}
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bdb0      	pop	{r4, r5, r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	200000b0 	.word	0x200000b0
 8000a80:	080088a0 	.word	0x080088a0

08000a84 <ILI9486_printText>:
void ILI9486_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	817b      	strh	r3, [r7, #10]
 8000a96:	460b      	mov	r3, r1
 8000a98:	813b      	strh	r3, [r7, #8]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0052      	lsls	r2, r2, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	82fb      	strh	r3, [r7, #22]
 8000ab4:	e01a      	b.n	8000aec <ILI9486_printText+0x68>
	{
		ILI9486_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000ab6:	8abb      	ldrh	r3, [r7, #20]
 8000ab8:	8afa      	ldrh	r2, [r7, #22]
 8000aba:	fb12 f303 	smulbb	r3, r2, r3
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	897b      	ldrh	r3, [r7, #10]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b218      	sxth	r0, r3
 8000ac8:	8afb      	ldrh	r3, [r7, #22]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	88fc      	ldrh	r4, [r7, #6]
 8000ad2:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	f7ff fe87 	bl	80007f4 <ILI9486_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000ae6:	8afb      	ldrh	r3, [r7, #22]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	82fb      	strh	r3, [r7, #22]
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	2b27      	cmp	r3, #39	; 0x27
 8000af0:	d805      	bhi.n	8000afe <ILI9486_printText+0x7a>
 8000af2:	8afb      	ldrh	r3, [r7, #22]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1db      	bne.n	8000ab6 <ILI9486_printText+0x32>
	}
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}
	...

08000b08 <ILI9486_setRotation>:
	}
}

//13. Set screen rotation
void ILI9486_setRotation(uint8_t rotate)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d832      	bhi.n	8000b80 <ILI9486_setRotation+0x78>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <ILI9486_setRotation+0x18>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b45 	.word	0x08000b45
 8000b28:	08000b59 	.word	0x08000b59
 8000b2c:	08000b6d 	.word	0x08000b6d
	{
		case 1:
			rotationNum = 1;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <ILI9486_setRotation+0x94>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
			ILI9486_SendCommand(ILI9486_MEMCONTROL);
 8000b36:	2036      	movs	r0, #54	; 0x36
 8000b38:	f7ff fcc2 	bl	80004c0 <ILI9486_SendCommand>
			ILI9486_SendData(ILI9486_MADCTL_MY | ILI9486_MADCTL_BGR);
 8000b3c:	2088      	movs	r0, #136	; 0x88
 8000b3e:	f7ff fcf3 	bl	8000528 <ILI9486_SendData>
			break;
 8000b42:	e027      	b.n	8000b94 <ILI9486_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <ILI9486_setRotation+0x94>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	701a      	strb	r2, [r3, #0]
			ILI9486_SendCommand(ILI9486_MEMCONTROL);
 8000b4a:	2036      	movs	r0, #54	; 0x36
 8000b4c:	f7ff fcb8 	bl	80004c0 <ILI9486_SendCommand>
			ILI9486_SendData(ILI9486_MADCTL_MV | ILI9486_MADCTL_BGR);
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f7ff fce9 	bl	8000528 <ILI9486_SendData>
			break;
 8000b56:	e01d      	b.n	8000b94 <ILI9486_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <ILI9486_setRotation+0x94>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	701a      	strb	r2, [r3, #0]
			ILI9486_SendCommand(ILI9486_MEMCONTROL);
 8000b5e:	2036      	movs	r0, #54	; 0x36
 8000b60:	f7ff fcae 	bl	80004c0 <ILI9486_SendCommand>
			ILI9486_SendData(ILI9486_MADCTL_MX | ILI9486_MADCTL_BGR);
 8000b64:	2048      	movs	r0, #72	; 0x48
 8000b66:	f7ff fcdf 	bl	8000528 <ILI9486_SendData>
			break;
 8000b6a:	e013      	b.n	8000b94 <ILI9486_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <ILI9486_setRotation+0x94>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	701a      	strb	r2, [r3, #0]
			ILI9486_SendCommand(ILI9486_MEMCONTROL);
 8000b72:	2036      	movs	r0, #54	; 0x36
 8000b74:	f7ff fca4 	bl	80004c0 <ILI9486_SendCommand>
			ILI9486_SendData(ILI9486_MADCTL_MX | ILI9486_MADCTL_MY | ILI9486_MADCTL_MV | ILI9486_MADCTL_BGR);
 8000b78:	20e8      	movs	r0, #232	; 0xe8
 8000b7a:	f7ff fcd5 	bl	8000528 <ILI9486_SendData>
			break;
 8000b7e:	e009      	b.n	8000b94 <ILI9486_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <ILI9486_setRotation+0x94>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
			ILI9486_SendCommand(ILI9486_MEMCONTROL);
 8000b86:	2036      	movs	r0, #54	; 0x36
 8000b88:	f7ff fc9a 	bl	80004c0 <ILI9486_SendCommand>
			ILI9486_SendData(ILI9486_MADCTL_MY | ILI9486_MADCTL_BGR);
 8000b8c:	2088      	movs	r0, #136	; 0x88
 8000b8e:	f7ff fccb 	bl	8000528 <ILI9486_SendData>
			break;
 8000b92:	bf00      	nop
	}
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f000 fcbd 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f84b 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bae:	f000 f97d 	bl	8000eac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb2:	f000 f8b1 	bl	8000d18 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000bb6:	f000 f8dd 	bl	8000d74 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bba:	f000 f90b 	bl	8000dd4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000bbe:	f007 fa3f 	bl	8008040 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 8000bc2:	f000 f93d 	bl	8000e40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  ILI9486_Init(&hspi2,
 8000bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <main+0x94>)
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <main+0x94>)
 8000bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bdc:	4916      	ldr	r1, [pc, #88]	; (8000c38 <main+0x98>)
 8000bde:	4817      	ldr	r0, [pc, #92]	; (8000c3c <main+0x9c>)
 8000be0:	f7ff fd22 	bl	8000628 <ILI9486_Init>
		  LCD_CS_GPIO_Port, LCD_CS_Pin,
		  LCD_DC_GPIO_Port, LCD_DC_Pin,
		  LCD_RST_GPIO_Port, LCD_RST_Pin);
  ILI9486_setRotation(2);
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff ff8f 	bl	8000b08 <ILI9486_setRotation>
//  ILI9486_Fill(COLOR_WHITE);
  ILI9486_printText("8", 1, 1, COLOR_BLACK, COLOR_WHITE, 1);
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <main+0xa0>)
 8000bfc:	f7ff ff42 	bl	8000a84 <ILI9486_printText>
  ILI9486_printText("8", 1, 10, COLOR_BLACK, COLOR_WHITE, 2);
 8000c00:	2302      	movs	r3, #2
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	2101      	movs	r1, #1
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <main+0xa0>)
 8000c12:	f7ff ff37 	bl	8000a84 <ILI9486_printText>
  ILI9486_printText("8", 1, 20, COLOR_BLACK, COLOR_WHITE, 3);
 8000c16:	2303      	movs	r3, #3
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2300      	movs	r3, #0
 8000c22:	2214      	movs	r2, #20
 8000c24:	2101      	movs	r1, #1
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <main+0xa0>)
 8000c28:	f7ff ff2c 	bl	8000a84 <ILI9486_printText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c2c:	f007 fa2e 	bl	800808c <MX_USB_HOST_Process>
 8000c30:	e7fc      	b.n	8000c2c <main+0x8c>
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	20000134 	.word	0x20000134
 8000c40:	08008898 	.word	0x08008898

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f007 fd44 	bl	80086e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fadc 	bl	8004288 <HAL_RCC_OscConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cd6:	f000 fa0b 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	230f      	movs	r3, #15
 8000cdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fd3d 	bl	8004778 <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d04:	f000 f9f4 	bl	80010f0 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3750      	adds	r7, #80	; 0x50
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MX_I2C1_Init+0x54>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_I2C1_Init+0x58>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_I2C1_Init+0x50>)
 8000d56:	f002 fcb3 	bl	80036c0 <HAL_I2C_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d60:	f000 f9c6 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000018c 	.word	0x2000018c
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	000186a0 	.word	0x000186a0

08000d74 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <MX_I2S3_Init+0x58>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <MX_I2S3_Init+0x5c>)
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000db4:	f002 fdc8 	bl	8003948 <HAL_I2S_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dbe:	f000 f997 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000238 	.word	0x20000238
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	00017700 	.word	0x00017700

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dda:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <MX_SPI1_Init+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e20:	220a      	movs	r2, #10
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000e26:	f003 ffcf 	bl	8004dc8 <HAL_SPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e30:	f000 f95e 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001e0 	.word	0x200001e0
 8000e3c:	40013000 	.word	0x40013000

08000e40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e46:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <MX_SPI2_Init+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e74:	2228      	movs	r2, #40	; 0x28
 8000e76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e8c:	220a      	movs	r2, #10
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_SPI2_Init+0x64>)
 8000e92:	f003 ff99 	bl	8004dc8 <HAL_SPI_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e9c:	f000 f928 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000134 	.word	0x20000134
 8000ea8:	40003800 	.word	0x40003800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b84      	ldr	r3, [pc, #528]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a83      	ldr	r2, [pc, #524]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b81      	ldr	r3, [pc, #516]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	4b7d      	ldr	r3, [pc, #500]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a7c      	ldr	r2, [pc, #496]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b7a      	ldr	r3, [pc, #488]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b76      	ldr	r3, [pc, #472]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a75      	ldr	r2, [pc, #468]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b73      	ldr	r3, [pc, #460]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a6e      	ldr	r2, [pc, #440]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b6c      	ldr	r3, [pc, #432]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a60      	ldr	r2, [pc, #384]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <MX_GPIO_Init+0x22c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f24a 0108 	movw	r1, #40968	; 0xa008
 8000f70:	485a      	ldr	r0, [pc, #360]	; (80010dc <MX_GPIO_Init+0x230>)
 8000f72:	f000 fe1b 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4859      	ldr	r0, [pc, #356]	; (80010e0 <MX_GPIO_Init+0x234>)
 8000f7c:	f000 fe16 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000f86:	4857      	ldr	r0, [pc, #348]	; (80010e4 <MX_GPIO_Init+0x238>)
 8000f88:	f000 fe10 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f92:	4855      	ldr	r0, [pc, #340]	; (80010e8 <MX_GPIO_Init+0x23c>)
 8000f94:	f000 fe0a 	bl	8001bac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8000f98:	f24a 0308 	movw	r3, #40968	; 0xa008
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	484a      	ldr	r0, [pc, #296]	; (80010dc <MX_GPIO_Init+0x230>)
 8000fb2:	f000 fc5f 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4844      	ldr	r0, [pc, #272]	; (80010e0 <MX_GPIO_Init+0x234>)
 8000fce:	f000 fc51 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	483c      	ldr	r0, [pc, #240]	; (80010e0 <MX_GPIO_Init+0x234>)
 8000fee:	f000 fc41 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4839      	ldr	r0, [pc, #228]	; (80010ec <MX_GPIO_Init+0x240>)
 8001008:	f000 fc34 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800100c:	2304      	movs	r3, #4
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4831      	ldr	r0, [pc, #196]	; (80010e4 <MX_GPIO_Init+0x238>)
 8001020:	f000 fc28 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001024:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800102a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <MX_GPIO_Init+0x230>)
 800103c:	f000 fc1a 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001052:	2305      	movs	r3, #5
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <MX_GPIO_Init+0x238>)
 800105e:	f000 fc09 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|LCD_CS_Pin;
 8001062:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_GPIO_Init+0x238>)
 800107c:	f000 fbfa 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001080:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001084:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <MX_GPIO_Init+0x23c>)
 800109a:	f000 fbeb 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800109e:	2320      	movs	r3, #32
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x23c>)
 80010b2:	f000 fbdf 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0x230>)
 80010cc:	f000 fbd2 	bl	8001874 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40020000 	.word	0x40020000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_MspInit+0x4c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800113a:	2007      	movs	r0, #7
 800113c:	f000 fb58 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_I2C_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800118a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119c:	2304      	movs	r3, #4
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <HAL_I2C_MspInit+0x8c>)
 80011a8:	f000 fb64 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 80011b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_I2C_MspInit+0x88>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400

080011dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a31      	ldr	r2, [pc, #196]	; (80012cc <HAL_I2S_MspInit+0xf0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d15a      	bne.n	80012c2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001210:	23c0      	movs	r3, #192	; 0xc0
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fc93 	bl	8004b48 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001228:	f7ff ff62 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 8001236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_I2S_MspInit+0xf4>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001280:	2310      	movs	r3, #16
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001290:	2306      	movs	r3, #6
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <HAL_I2S_MspInit+0xf8>)
 800129c:	f000 faea 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012a0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b2:	2306      	movs	r3, #6
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <HAL_I2S_MspInit+0xfc>)
 80012be:	f000 fad9 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3738      	adds	r7, #56	; 0x38
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40003c00 	.word	0x40003c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020800 	.word	0x40020800

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <HAL_SPI_MspInit+0xe8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12c      	bne.n	8001358 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001336:	23e0      	movs	r3, #224	; 0xe0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001346:	2305      	movs	r3, #5
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	481e      	ldr	r0, [pc, #120]	; (80013cc <HAL_SPI_MspInit+0xf0>)
 8001352:	f000 fa8f 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001356:	e031      	b.n	80013bc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_SPI_MspInit+0xf4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_SPI_MspInit+0xec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800139a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ac:	2305      	movs	r3, #5
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_SPI_MspInit+0xf8>)
 80013b8:	f000 fa5c 	bl	8001874 <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40013000 	.word	0x40013000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40003800 	.word	0x40003800
 80013d4:	40020400 	.word	0x40020400

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f8d0 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <OTG_FS_IRQHandler+0x10>)
 8001432:	f000 fe3f 	bl	80020b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000065c 	.word	0x2000065c

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f007 f8ee 	bl	8008650 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20020000 	.word	0x20020000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000124 	.word	0x20000124
 80014a8:	20000970 	.word	0x20000970

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ffd7 	bl	80014ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f007 f8ad 	bl	800865c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fb4d 	bl	8000ba0 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001514:	08008e18 	.word	0x08008e18
  ldr r2, =_sbss
 8001518:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800151c:	20000970 	.word	0x20000970

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f94f 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fdd0 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f967 	bl	800185a <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a4:	f000 f92f 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000004 	.word	0x20000004
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000280 	.word	0x20000280

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000280 	.word	0x20000280

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e16b      	b.n	8001b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 815a 	bne.w	8001b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80b4 	beq.w	8001b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x314>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02b      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HAL_GPIO_Init+0x318>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d025      	beq.n	8001a96 <HAL_GPIO_Init+0x222>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_GPIO_Init+0x31c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01f      	beq.n	8001a92 <HAL_GPIO_Init+0x21e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_GPIO_Init+0x320>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_GPIO_Init+0x328>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x20a>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00e      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a7e:	2308      	movs	r3, #8
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae90 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be0:	b08f      	sub	sp, #60	; 0x3c
 8001be2:	af0a      	add	r7, sp, #40	; 0x28
 8001be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e054      	b.n	8001c9a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f006 fa76 	bl	80080fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fbcc 	bl	80053cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	687e      	ldr	r6, [r7, #4]
 8001c3c:	466d      	mov	r5, sp
 8001c3e:	f106 0410 	add.w	r4, r6, #16
 8001c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c52:	1d33      	adds	r3, r6, #4
 8001c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f003 fb46 	bl	80052e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fbc3 	bl	80053ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	687e      	ldr	r6, [r7, #4]
 8001c70:	466d      	mov	r5, sp
 8001c72:	f106 0410 	add.w	r4, r6, #16
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c86:	1d33      	adds	r3, r6, #4
 8001c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f003 fd2a 	bl	80056e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b089      	sub	sp, #36	; 0x24
 8001ca6:	af04      	add	r7, sp, #16
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	70fb      	strb	r3, [r7, #3]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70bb      	strb	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_HCD_HC_Init+0x28>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e076      	b.n	8001db8 <HAL_HCD_HC_Init+0x116>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	333d      	adds	r3, #61	; 0x3d
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3338      	adds	r3, #56	; 0x38
 8001cf2:	787a      	ldrb	r2, [r7, #1]
 8001cf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3340      	adds	r3, #64	; 0x40
 8001d04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d06:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3339      	adds	r3, #57	; 0x39
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	333f      	adds	r3, #63	; 0x3f
 8001d28:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	78ba      	ldrb	r2, [r7, #2]
 8001d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d36:	b2d0      	uxtb	r0, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	333a      	adds	r3, #58	; 0x3a
 8001d44:	4602      	mov	r2, r0
 8001d46:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da09      	bge.n	8001d64 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	333b      	adds	r3, #59	; 0x3b
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e008      	b.n	8001d76 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	333b      	adds	r3, #59	; 0x3b
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	333c      	adds	r3, #60	; 0x3c
 8001d84:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d88:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	787c      	ldrb	r4, [r7, #1]
 8001d90:	78ba      	ldrb	r2, [r7, #2]
 8001d92:	78f9      	ldrb	r1, [r7, #3]
 8001d94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4623      	mov	r3, r4
 8001da6:	f003 fe17 	bl	80059d8 <USB_HC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}

08001dc0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_HCD_HC_Halt+0x1e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e00f      	b.n	8001dfe <HAL_HCD_HC_Halt+0x3e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f853 	bl	8005e9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	70fb      	strb	r3, [r7, #3]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70bb      	strb	r3, [r7, #2]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	333b      	adds	r3, #59	; 0x3b
 8001e30:	78ba      	ldrb	r2, [r7, #2]
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	333f      	adds	r3, #63	; 0x3f
 8001e42:	787a      	ldrb	r2, [r7, #1]
 8001e44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e46:	7c3b      	ldrb	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3342      	adds	r3, #66	; 0x42
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	333d      	adds	r3, #61	; 0x3d
 8001e6c:	7f3a      	ldrb	r2, [r7, #28]
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e008      	b.n	8001e84 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	2202      	movs	r2, #2
 8001e82:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	f200 80c6 	bhi.w	8002018 <HAL_HCD_HC_SubmitRequest+0x210>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08002005 	.word	0x08002005
 8001e9c:	08001f09 	.word	0x08001f09
 8001ea0:	08001f87 	.word	0x08001f87
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ea4:	7c3b      	ldrb	r3, [r7, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 80b8 	bne.w	800201c <HAL_HCD_HC_SubmitRequest+0x214>
 8001eac:	78bb      	ldrb	r3, [r7, #2]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80b4 	bne.w	800201c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001eb4:	8b3b      	ldrh	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3355      	adds	r3, #85	; 0x55
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3355      	adds	r3, #85	; 0x55
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3342      	adds	r3, #66	; 0x42
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ef2:	e093      	b.n	800201c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	3342      	adds	r3, #66	; 0x42
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
      break;
 8001f06:	e089      	b.n	800201c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11d      	bne.n	8001f4a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3355      	adds	r3, #85	; 0x55
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3342      	adds	r3, #66	; 0x42
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f34:	e073      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3342      	adds	r3, #66	; 0x42
 8001f44:	2202      	movs	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]
      break;
 8001f48:	e069      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3354      	adds	r3, #84	; 0x54
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3342      	adds	r3, #66	; 0x42
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
      break;
 8001f70:	e055      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3342      	adds	r3, #66	; 0x42
 8001f80:	2202      	movs	r2, #2
 8001f82:	701a      	strb	r2, [r3, #0]
      break;
 8001f84:	e04b      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f86:	78bb      	ldrb	r3, [r7, #2]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11d      	bne.n	8001fc8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3355      	adds	r3, #85	; 0x55
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3342      	adds	r3, #66	; 0x42
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fb2:	e034      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
      break;
 8001fc6:	e02a      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3354      	adds	r3, #84	; 0x54
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3342      	adds	r3, #66	; 0x42
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
      break;
 8001fee:	e016      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3342      	adds	r3, #66	; 0x42
 8001ffe:	2202      	movs	r2, #2
 8002000:	701a      	strb	r2, [r3, #0]
      break;
 8002002:	e00c      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	3342      	adds	r3, #66	; 0x42
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
      break;
 8002016:	e002      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800201c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3344      	adds	r3, #68	; 0x44
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	8b3a      	ldrh	r2, [r7, #24]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	202c      	movs	r0, #44	; 0x2c
 8002038:	fb00 f303 	mul.w	r3, r0, r3
 800203c:	440b      	add	r3, r1
 800203e:	334c      	adds	r3, #76	; 0x4c
 8002040:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3360      	adds	r3, #96	; 0x60
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3350      	adds	r3, #80	; 0x50
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3339      	adds	r3, #57	; 0x39
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	222c      	movs	r2, #44	; 0x2c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	18d1      	adds	r1, r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	f003 fda6 	bl	8005bf4 <USB_HC_StartXfer>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop

080020b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fac9 	bl	8005662 <USB_GetMode>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 80f6 	bne.w	80022c4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 faad 	bl	800563c <USB_ReadInterrupts>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80ec 	beq.w	80022c2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 faa4 	bl	800563c <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020fe:	d104      	bne.n	800210a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002108:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fa94 	bl	800563c <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800211e:	d104      	bne.n	800212a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002128:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa84 	bl	800563c <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800213a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213e:	d104      	bne.n	800214a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fa74 	bl	800563c <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d103      	bne.n	8002166 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2202      	movs	r2, #2
 8002164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fa66 	bl	800563c <USB_ReadInterrupts>
 8002170:	4603      	mov	r3, r0
 8002172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800217a:	d11c      	bne.n	80021b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002184:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002196:	2110      	movs	r1, #16
 8002198:	6938      	ldr	r0, [r7, #16]
 800219a:	f003 f975 	bl	8005488 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800219e:	6938      	ldr	r0, [r7, #16]
 80021a0:	f003 f996 	bl	80054d0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fb4e 	bl	800584c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f006 f821 	bl	80081f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fa3e 	bl	800563c <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ca:	d102      	bne.n	80021d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f001 fa03 	bl	80035d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fa30 	bl	800563c <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d106      	bne.n	80021f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f005 ffea 	bl	80081c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fa1f 	bl	800563c <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b10      	cmp	r3, #16
 8002206:	d101      	bne.n	800220c <HAL_HCD_IRQHandler+0x158>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_HCD_IRQHandler+0x15a>
 800220c:	2300      	movs	r3, #0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0210 	bic.w	r2, r2, #16
 8002220:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f001 f906 	bl	8003434 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0210 	orr.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f9fd 	bl	800563c <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800224c:	d13a      	bne.n	80022c4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fe10 	bl	8005e78 <USB_HC_ReadInterrupt>
 8002258:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e025      	b.n	80022ac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228a:	d106      	bne.n	800229a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8ab 	bl	80023ee <HCD_HC_IN_IRQHandler>
 8002298:	e005      	b.n	80022a6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fcc6 	bl	8002c32 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3d4      	bcc.n	8002260 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	e000      	b.n	80022c4 <HAL_HCD_IRQHandler+0x210>
      return;
 80022c2:	bf00      	nop
    }
  }
}
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_HCD_Start+0x16>
 80022dc:	2302      	movs	r3, #2
 80022de:	e013      	b.n	8002308 <HAL_HCD_Start+0x3e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fb10 	bl	8005914 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 f856 	bl	80053aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_HCD_Stop+0x16>
 8002322:	2302      	movs	r3, #2
 8002324:	e00d      	b.n	8002342 <HAL_HCD_Stop+0x32>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 ff0a 	bl	800614c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fab2 	bl	80058c0 <USB_ResetPort>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	781b      	ldrb	r3, [r3, #0]
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3350      	adds	r3, #80	; 0x50
 80023a8:	681b      	ldr	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 faf6 	bl	80059b4 <USB_GetCurrentFrame>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fad1 	bl	8005986 <USB_GetHostSpeed>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d119      	bne.n	8002452 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	461a      	mov	r2, r3
 800242c:	2304      	movs	r3, #4
 800242e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	0151      	lsls	r1, r2, #5
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	440a      	add	r2, r1
 8002446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	60d3      	str	r3, [r2, #12]
 8002450:	e101      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d12b      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	461a      	mov	r2, r3
 8002478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3361      	adds	r3, #97	; 0x61
 800248c:	2207      	movs	r2, #7
 800248e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	0151      	lsls	r1, r2, #5
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	440a      	add	r2, r1
 80024a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fced 	bl	8005e9a <USB_HC_Halt>
 80024c0:	e0c9      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d109      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2320      	movs	r3, #32
 80024e8:	6093      	str	r3, [r2, #8]
 80024ea:	e0b4      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d133      	bne.n	800256a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	0151      	lsls	r1, r2, #5
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	440a      	add	r2, r1
 8002518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	3361      	adds	r3, #97	; 0x61
 8002530:	2205      	movs	r2, #5
 8002532:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2310      	movs	r3, #16
 8002544:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	2308      	movs	r3, #8
 8002556:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fc99 	bl	8005e9a <USB_HC_Halt>
 8002568:	e075      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002580:	d134      	bne.n	80025ec <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3361      	adds	r3, #97	; 0x61
 80025b0:	2208      	movs	r2, #8
 80025b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	461a      	mov	r2, r3
 80025c2:	2310      	movs	r3, #16
 80025c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fc58 	bl	8005e9a <USB_HC_Halt>
 80025ea:	e034      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d129      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	0151      	lsls	r1, r2, #5
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	440a      	add	r2, r1
 8002618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3361      	adds	r3, #97	; 0x61
 8002630:	2206      	movs	r2, #6
 8002632:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fc2b 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266c:	d122      	bne.n	80026b4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	440a      	add	r2, r1
 8002684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 fbfe 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	461a      	mov	r2, r3
 80026ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026b2:	e2ba      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	f040 811b 	bne.w	8002902 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d019      	beq.n	8002708 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3348      	adds	r3, #72	; 0x48
 80026e2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0159      	lsls	r1, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026f6:	1ad2      	subs	r2, r2, r3
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	202c      	movs	r0, #44	; 0x2c
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	440b      	add	r3, r1
 8002704:	3350      	adds	r3, #80	; 0x50
 8002706:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3361      	adds	r3, #97	; 0x61
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	2301      	movs	r3, #1
 800273c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333f      	adds	r3, #63	; 0x3f
 8002760:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002762:	2b02      	cmp	r3, #2
 8002764:	d121      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	0151      	lsls	r1, r2, #5
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	440a      	add	r2, r1
 800277c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fb82 	bl	8005e9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	2310      	movs	r3, #16
 80027a6:	6093      	str	r3, [r2, #8]
 80027a8:	e066      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333f      	adds	r3, #63	; 0x3f
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d127      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	0151      	lsls	r1, r2, #5
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	440a      	add	r2, r1
 80027d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3360      	adds	r3, #96	; 0x60
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	b2d9      	uxtb	r1, r3
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	202c      	movs	r0, #44	; 0x2c
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3360      	adds	r3, #96	; 0x60
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f005 fd04 	bl	8008214 <HAL_HCD_HC_NotifyURBChange_Callback>
 800280c:	e034      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	333f      	adds	r3, #63	; 0x3f
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d12a      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f083 0301 	eor.w	r3, r3, #1
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3354      	adds	r3, #84	; 0x54
 8002858:	4602      	mov	r2, r0
 800285a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	b2d9      	uxtb	r1, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	202c      	movs	r0, #44	; 0x2c
 8002866:	fb00 f303 	mul.w	r3, r0, r3
 800286a:	4413      	add	r3, r2
 800286c:	3360      	adds	r3, #96	; 0x60
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f005 fcce 	bl	8008214 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d12b      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3348      	adds	r3, #72	; 0x48
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f202 	mul.w	r2, r0, r2
 800289a:	440a      	add	r2, r1
 800289c:	3240      	adds	r2, #64	; 0x40
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 81be 	beq.w	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3354      	adds	r3, #84	; 0x54
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2d8      	uxtb	r0, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3354      	adds	r3, #84	; 0x54
 80028d2:	4602      	mov	r2, r0
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	e1a8      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3354      	adds	r3, #84	; 0x54
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	f083 0301 	eor.w	r3, r3, #1
 80028ec:	b2d8      	uxtb	r0, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3354      	adds	r3, #84	; 0x54
 80028fc:	4602      	mov	r2, r0
 80028fe:	701a      	strb	r2, [r3, #0]
}
 8002900:	e193      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	f040 8106 	bne.w	8002b26 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	0151      	lsls	r1, r2, #5
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	440a      	add	r2, r1
 8002930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002934:	f023 0302 	bic.w	r3, r3, #2
 8002938:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d109      	bne.n	8002962 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e0c9      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d109      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	2205      	movs	r2, #5
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e0b5      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3361      	adds	r3, #97	; 0x61
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d009      	beq.n	80029b2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3361      	adds	r3, #97	; 0x61
 80029ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d150      	bne.n	8002a54 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	440b      	add	r3, r1
 80029d0:	335c      	adds	r3, #92	; 0x5c
 80029d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	335c      	adds	r3, #92	; 0x5c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d912      	bls.n	8002a0e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	2204      	movs	r2, #4
 8002a0a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a0c:	e073      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a36:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a3e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a52:	e050      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d122      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	; 0x60
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a90:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e023      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b07      	cmp	r3, #7
 8002ac0:	d119      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	335c      	adds	r3, #92	; 0x5c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	440b      	add	r3, r1
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2204      	movs	r2, #4
 8002af4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	2302      	movs	r3, #2
 8002b06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	b2d9      	uxtb	r1, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	202c      	movs	r0, #44	; 0x2c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f005 fb78 	bl	8008214 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b24:	e081      	b.n	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d176      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	333f      	adds	r3, #63	; 0x3f
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d121      	bne.n	8002b94 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	335c      	adds	r3, #92	; 0x5c
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 f984 	bl	8005e9a <USB_HC_Halt>
 8002b92:	e041      	b.n	8002c18 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	333f      	adds	r3, #63	; 0x3f
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	333f      	adds	r3, #63	; 0x3f
 8002bb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d12d      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d120      	bne.n	8002c18 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3361      	adds	r3, #97	; 0x61
 8002be4:	2203      	movs	r2, #3
 8002be6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	0151      	lsls	r1, r2, #5
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f941 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2310      	movs	r3, #16
 8002c28:	6093      	str	r3, [r2, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b088      	sub	sp, #32
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d119      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2304      	movs	r3, #4
 8002c72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	0151      	lsls	r1, r2, #5
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	440a      	add	r2, r1
 8002c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c94:	e3ca      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d13e      	bne.n	8002d2a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2320      	movs	r3, #32
 8002cbc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	333d      	adds	r3, #61	; 0x3d
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 83ac 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	333d      	adds	r3, #61	; 0x3d
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	0151      	lsls	r1, r2, #5
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 f8b9 	bl	8005e9a <USB_HC_Halt>
}
 8002d28:	e380      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d122      	bne.n	8002d88 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	0151      	lsls	r1, r2, #5
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	440a      	add	r2, r1
 8002d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f894 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d84:	6093      	str	r3, [r2, #8]
}
 8002d86:	e351      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d150      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	335c      	adds	r3, #92	; 0x5c
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d111      	bne.n	8002dea <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333d      	adds	r3, #61	; 0x3d
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	0151      	lsls	r1, r2, #5
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	440a      	add	r2, r1
 8002e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 f840 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	461a      	mov	r2, r3
 8002e28:	2301      	movs	r3, #1
 8002e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3361      	adds	r3, #97	; 0x61
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
}
 8002e3e:	e2f5      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d13c      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3361      	adds	r3, #97	; 0x61
 8002e64:	2204      	movs	r2, #4
 8002e66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	333d      	adds	r3, #61	; 0x3d
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	0151      	lsls	r1, r2, #5
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	440a      	add	r2, r1
 8002ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 ffef 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2340      	movs	r3, #64	; 0x40
 8002ecc:	6093      	str	r3, [r2, #8]
}
 8002ece:	e2ad      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d12a      	bne.n	8002f3c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	0151      	lsls	r1, r2, #5
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 ffb9 	bl	8005e9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	2205      	movs	r2, #5
 8002f38:	701a      	strb	r2, [r3, #0]
}
 8002f3a:	e277      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d150      	bne.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	335c      	adds	r3, #92	; 0x5c
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3361      	adds	r3, #97	; 0x61
 8002f72:	2203      	movs	r2, #3
 8002f74:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	333d      	adds	r3, #61	; 0x3d
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d112      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	333c      	adds	r3, #60	; 0x3c
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333d      	adds	r3, #61	; 0x3d
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 ff5d 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	2310      	movs	r3, #16
 8002ff0:	6093      	str	r3, [r2, #8]
}
 8002ff2:	e21b      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d174      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d121      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3361      	adds	r3, #97	; 0x61
 8003020:	2206      	movs	r2, #6
 8003022:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	440a      	add	r2, r1
 800303a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f002 ff23 	bl	8005e9a <USB_HC_Halt>
 8003054:	e044      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	202c      	movs	r0, #44	; 0x2c
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	440b      	add	r3, r1
 8003074:	335c      	adds	r3, #92	; 0x5c
 8003076:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	335c      	adds	r3, #92	; 0x5c
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d920      	bls.n	80030ce <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	335c      	adds	r3, #92	; 0x5c
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2204      	movs	r2, #4
 80030ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	b2d9      	uxtb	r1, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	202c      	movs	r0, #44	; 0x2c
 80030ba:	fb00 f303 	mul.w	r3, r0, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f005 f8a4 	bl	8008214 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030cc:	e008      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	6093      	str	r3, [r2, #8]
}
 80030f2:	e19b      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d134      	bne.n	8003176 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	0151      	lsls	r1, r2, #5
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	440a      	add	r2, r1
 8003122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f002 feaf 	bl	8005e9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2310      	movs	r3, #16
 800314c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003160:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3361      	adds	r3, #97	; 0x61
 8003170:	2208      	movs	r2, #8
 8003172:	701a      	strb	r2, [r3, #0]
}
 8003174:	e15a      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	f040 814f 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	0151      	lsls	r1, r2, #5
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	440a      	add	r2, r1
 80031a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3361      	adds	r3, #97	; 0x61
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d17d      	bne.n	80032be <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3360      	adds	r3, #96	; 0x60
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	333f      	adds	r3, #63	; 0x3f
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d00a      	beq.n	80031fe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	333f      	adds	r3, #63	; 0x3f
 80031f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	f040 8100 	bne.w	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d113      	bne.n	800322e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3355      	adds	r3, #85	; 0x55
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	f083 0301 	eor.w	r3, r3, #1
 800321a:	b2d8      	uxtb	r0, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3355      	adds	r3, #85	; 0x55
 800322a:	4602      	mov	r2, r0
 800322c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b01      	cmp	r3, #1
 8003234:	f040 80e3 	bne.w	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	334c      	adds	r3, #76	; 0x4c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80d8 	beq.w	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	334c      	adds	r3, #76	; 0x4c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	202c      	movs	r0, #44	; 0x2c
 8003264:	fb00 f202 	mul.w	r2, r0, r2
 8003268:	440a      	add	r2, r1
 800326a:	3240      	adds	r2, #64	; 0x40
 800326c:	8812      	ldrh	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	3b01      	subs	r3, #1
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	202c      	movs	r0, #44	; 0x2c
 8003278:	fb00 f202 	mul.w	r2, r0, r2
 800327c:	440a      	add	r2, r1
 800327e:	3240      	adds	r2, #64	; 0x40
 8003280:	8812      	ldrh	r2, [r2, #0]
 8003282:	fbb3 f3f2 	udiv	r3, r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80b5 	beq.w	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3355      	adds	r3, #85	; 0x55
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2d8      	uxtb	r0, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3355      	adds	r3, #85	; 0x55
 80032b8:	4602      	mov	r2, r0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e09f      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3361      	adds	r3, #97	; 0x61
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d109      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3360      	adds	r3, #96	; 0x60
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e08b      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3361      	adds	r3, #97	; 0x61
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d109      	bne.n	800330e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3360      	adds	r3, #96	; 0x60
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e077      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3361      	adds	r3, #97	; 0x61
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d109      	bne.n	8003336 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	3360      	adds	r3, #96	; 0x60
 8003330:	2205      	movs	r2, #5
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e063      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3361      	adds	r3, #97	; 0x61
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b06      	cmp	r3, #6
 8003348:	d009      	beq.n	800335e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3361      	adds	r3, #97	; 0x61
 8003358:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800335a:	2b08      	cmp	r3, #8
 800335c:	d14f      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	335c      	adds	r3, #92	; 0x5c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	202c      	movs	r0, #44	; 0x2c
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	440b      	add	r3, r1
 800337c:	335c      	adds	r3, #92	; 0x5c
 800337e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	335c      	adds	r3, #92	; 0x5c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d912      	bls.n	80033ba <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	335c      	adds	r3, #92	; 0x5c
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3360      	adds	r3, #96	; 0x60
 80033b4:	2204      	movs	r2, #4
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e021      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3360      	adds	r3, #96	; 0x60
 80033c8:	2202      	movs	r2, #2
 80033ca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033e2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033ea:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	461a      	mov	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	2302      	movs	r3, #2
 800340e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	b2d9      	uxtb	r1, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	202c      	movs	r0, #44	; 0x2c
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	4413      	add	r3, r2
 8003420:	3360      	adds	r3, #96	; 0x60
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f004 fef4 	bl	8008214 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800342c:	bf00      	nop
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	0c5b      	lsrs	r3, r3, #17
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003468:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d004      	beq.n	800347a <HCD_RXQLVL_IRQHandler+0x46>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b05      	cmp	r3, #5
 8003474:	f000 80a9 	beq.w	80035ca <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003478:	e0aa      	b.n	80035d0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80a6 	beq.w	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3344      	adds	r3, #68	; 0x44
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 809b 	beq.w	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3350      	adds	r3, #80	; 0x50
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	441a      	add	r2, r3
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	202c      	movs	r0, #44	; 0x2c
 80034b2:	fb00 f303 	mul.w	r3, r0, r3
 80034b6:	440b      	add	r3, r1
 80034b8:	334c      	adds	r3, #76	; 0x4c
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d87a      	bhi.n	80035b6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3344      	adds	r3, #68	; 0x44
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f002 f857 	bl	800558c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3344      	adds	r3, #68	; 0x44
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	441a      	add	r2, r3
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	202c      	movs	r0, #44	; 0x2c
 80034f8:	fb00 f303 	mul.w	r3, r0, r3
 80034fc:	440b      	add	r3, r1
 80034fe:	3344      	adds	r3, #68	; 0x44
 8003500:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3350      	adds	r3, #80	; 0x50
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	441a      	add	r2, r3
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	202c      	movs	r0, #44	; 0x2c
 800351c:	fb00 f303 	mul.w	r3, r0, r3
 8003520:	440b      	add	r3, r1
 8003522:	3350      	adds	r3, #80	; 0x50
 8003524:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	0cdb      	lsrs	r3, r3, #19
 8003536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800353a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4293      	cmp	r3, r2
 8003552:	d13c      	bne.n	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d039      	beq.n	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003570:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003578:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3354      	adds	r3, #84	; 0x54
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2d8      	uxtb	r0, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3354      	adds	r3, #84	; 0x54
 80035b0:	4602      	mov	r2, r0
 80035b2:	701a      	strb	r2, [r3, #0]
      break;
 80035b4:	e00b      	b.n	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3360      	adds	r3, #96	; 0x60
 80035c4:	2204      	movs	r2, #4
 80035c6:	701a      	strb	r2, [r3, #0]
      break;
 80035c8:	e001      	b.n	80035ce <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035ce:	bf00      	nop
  }
}
 80035d0:	bf00      	nop
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003604:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d10b      	bne.n	8003628 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f004 fdde 	bl	80081dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d132      	bne.n	8003698 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d126      	bne.n	8003692 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d113      	bne.n	8003674 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003656:	d106      	bne.n	8003666 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2102      	movs	r1, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f002 f8f4 	bl	800584c <USB_InitFSLSPClkSel>
 8003664:	e011      	b.n	800368a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f002 f8ed 	bl	800584c <USB_InitFSLSPClkSel>
 8003672:	e00a      	b.n	800368a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003682:	461a      	mov	r2, r3
 8003684:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003688:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f004 fdd0 	bl	8008230 <HAL_HCD_PortEnabled_Callback>
 8003690:	e002      	b.n	8003698 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f004 fdda 	bl	800824c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d103      	bne.n	80036aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f043 0320 	orr.w	r3, r3, #32
 80036a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6013      	str	r3, [r2, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fd30 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f001 f9fc 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	; (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	; (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	; (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e128      	b.n	8003bac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <HAL_I2S_Init+0x26c>)
 8003972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fc31 	bl	80011dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d060      	beq.n	8003a68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ae:	2310      	movs	r3, #16
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e001      	b.n	80039b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d802      	bhi.n	80039c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f001 f9a0 	bl	8004d0c <HAL_RCCEx_GetPeriphCLKFreq>
 80039cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d125      	bne.n	8003a24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	461a      	mov	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	3305      	adds	r3, #5
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e01f      	b.n	8003a42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	3305      	adds	r3, #5
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e00e      	b.n	8003a42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	3305      	adds	r3, #5
 8003a40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_I2S_Init+0x270>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	08db      	lsrs	r3, r3, #3
 8003a4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e003      	b.n	8003a70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d902      	bls.n	8003a7c <HAL_I2S_Init+0x134>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2bff      	cmp	r3, #255	; 0xff
 8003a7a:	d907      	bls.n	8003a8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f043 0210 	orr.w	r2, r3, #16
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e08f      	b.n	8003bac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	ea42 0103 	orr.w	r1, r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6851      	ldr	r1, [r2, #4]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68d2      	ldr	r2, [r2, #12]
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6992      	ldr	r2, [r2, #24]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d161      	bne.n	8003b9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <HAL_I2S_Init+0x274>)
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_I2S_Init+0x1a4>
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003aea:	e001      	b.n	8003af0 <HAL_I2S_Init+0x1a8>
 8003aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4932      	ldr	r1, [pc, #200]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003af8:	428a      	cmp	r2, r1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2S_Init+0x1b8>
 8003afc:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2S_Init+0x1bc>
 8003b00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b08:	f023 030f 	bic.w	r3, r3, #15
 8003b0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_I2S_Init+0x1d4>
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b1a:	e001      	b.n	8003b20 <HAL_I2S_Init+0x1d8>
 8003b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b20:	2202      	movs	r2, #2
 8003b22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2S_Init+0x1ea>
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b30:	e001      	b.n	8003b36 <HAL_I2S_Init+0x1ee>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b42:	d003      	beq.n	8003b4c <HAL_I2S_Init+0x204>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b62:	4313      	orrs	r3, r2
 8003b64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2S_Init+0x24c>
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2S_Init+0x250>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	897a      	ldrh	r2, [r7, #10]
 8003b9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	08003cbf 	.word	0x08003cbf
 8003bb8:	cccccccd 	.word	0xcccccccd
 8003bbc:	08003dd5 	.word	0x08003dd5
 8003bc0:	40003800 	.word	0x40003800
 8003bc4:	40003400 	.word	0x40003400

08003bc8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffb8 	bl	8003bc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	b292      	uxth	r2, r2
 8003c74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff93 	bl	8003bdc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d13a      	bne.n	8003d50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d109      	bne.n	8003cf8 <I2S_IRQHandler+0x3a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d102      	bne.n	8003cf8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffb4 	bl	8003c60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d126      	bne.n	8003d50 <I2S_IRQHandler+0x92>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d11f      	bne.n	8003d50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff50 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d136      	bne.n	8003dca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d109      	bne.n	8003d7a <I2S_IRQHandler+0xbc>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d102      	bne.n	8003d7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff45 	bl	8003c04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d122      	bne.n	8003dca <I2S_IRQHandler+0x10c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d11b      	bne.n	8003dca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff13 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4aa2      	ldr	r2, [pc, #648]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dee:	4ba2      	ldr	r3, [pc, #648]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a9b      	ldr	r2, [pc, #620]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e0c:	4b9a      	ldr	r3, [pc, #616]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d004      	beq.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 8099 	bne.w	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d107      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f925 	bl	8004090 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9c8 	bl	80041f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d13a      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d035      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7e      	ldr	r2, [pc, #504]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e7e:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e80:	e001      	b.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4979      	ldr	r1, [pc, #484]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8e:	428b      	cmp	r3, r1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e92:	4b79      	ldr	r3, [pc, #484]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fe88 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	f040 80be 	bne.w	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80b8 	beq.w	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a59      	ldr	r2, [pc, #356]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4954      	ldr	r1, [pc, #336]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f22:	428b      	cmp	r3, r1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f26:	4b54      	ldr	r3, [pc, #336]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f28:	e001      	b.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fe4a 	bl	8003bf0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f5c:	e084      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d107      	bne.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8be 	bl	80040f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d107      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8fd 	bl	800418c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d12f      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02a      	beq.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fc0:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fc2:	e001      	b.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4929      	ldr	r1, [pc, #164]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fdfa 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d131      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02c      	beq.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4912      	ldr	r1, [pc, #72]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800402a:	428b      	cmp	r3, r1
 800402c:	d101      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004030:	e001      	b.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004036:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800403a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800404a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0204 	orr.w	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fdc5 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004066:	e000      	b.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004068:	bf00      	nop
}
 800406a:	bf00      	nop
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40003800 	.word	0x40003800
 8004078:	40003400 	.word	0x40003400

0800407c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c99      	adds	r1, r3, #2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6251      	str	r1, [r2, #36]	; 0x24
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d113      	bne.n	80040ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffc9 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c99      	adds	r1, r3, #2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6251      	str	r1, [r2, #36]	; 0x24
 8004106:	8819      	ldrh	r1, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <I2SEx_TxISR_I2SExt+0x22>
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004114:	e001      	b.n	800411a <I2SEx_TxISR_I2SExt+0x26>
 8004116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411a:	460a      	mov	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d121      	bne.n	800417a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <I2SEx_TxISR_I2SExt+0x50>
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004142:	e001      	b.n	8004148 <I2SEx_TxISR_I2SExt+0x54>
 8004144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 8004150:	428b      	cmp	r3, r1
 8004152:	d101      	bne.n	8004158 <I2SEx_TxISR_I2SExt+0x64>
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004156:	e001      	b.n	800415c <I2SEx_TxISR_I2SExt+0x68>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004160:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff81 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40003800 	.word	0x40003800
 8004188:	40003400 	.word	0x40003400

0800418c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d8      	ldr	r0, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	1c99      	adds	r1, r3, #2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041a4:	b282      	uxth	r2, r0
 80041a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ff4a 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <I2SEx_RxISR_I2SExt+0x16>
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 8004204:	e001      	b.n	800420a <I2SEx_RxISR_I2SExt+0x1a>
 8004206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420a:	68d8      	ldr	r0, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	1c99      	adds	r1, r3, #2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004216:	b282      	uxth	r2, r0
 8004218:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <I2SEx_RxISR_I2SExt+0x50>
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 800423e:	e001      	b.n	8004244 <I2SEx_RxISR_I2SExt+0x54>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	490d      	ldr	r1, [pc, #52]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d101      	bne.n	8004254 <I2SEx_RxISR_I2SExt+0x64>
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 8004252:	e001      	b.n	8004258 <I2SEx_RxISR_I2SExt+0x68>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004258:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800425c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff03 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40003800 	.word	0x40003800
 8004284:	40003400 	.word	0x40003400

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e264      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	4ba3      	ldr	r3, [pc, #652]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4ba0      	ldr	r3, [pc, #640]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b99      	ldr	r3, [pc, #612]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e23f      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a90      	ldr	r2, [pc, #576]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b8b      	ldr	r3, [pc, #556]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a8a      	ldr	r2, [pc, #552]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a87      	ldr	r2, [pc, #540]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b84      	ldr	r3, [pc, #528]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a83      	ldr	r2, [pc, #524]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd f956 	bl	80015f0 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fd f952 	bl	80015f0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e204      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd f942 	bl	80015f0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd f93e 	bl	80015f0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1f0      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c4      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4952      	ldr	r1, [pc, #328]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fd f8f7 	bl	80015f0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004406:	f7fd f8f3 	bl	80015f0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a5      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4940      	ldr	r1, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd f8d6 	bl	80015f0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd f8d2 	bl	80015f0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e184      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d030      	beq.n	80044d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd f8b6 	bl	80015f0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd f8b2 	bl	80015f0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e164      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e015      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fd f89f 	bl	80015f0 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd f89b 	bl	80015f0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e14d      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80a0 	beq.w	8004622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d121      	bne.n	8004562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fd f861 	bl	80015f0 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e011      	b.n	8004556 <HAL_RCC_OscConfig+0x2ce>
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
 8004540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fd f854 	bl	80015f0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e106      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x2f0>
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	e01c      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0x312>
 8004580:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a7a      	ldr	r2, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	4b78      	ldr	r3, [pc, #480]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a77      	ldr	r2, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	e00b      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 800459a:	4b75      	ldr	r3, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a74      	ldr	r2, [pc, #464]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	4b72      	ldr	r3, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a71      	ldr	r2, [pc, #452]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd f819 	bl	80015f0 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f815 	bl	80015f0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0c5      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ee      	beq.n	80045c2 <HAL_RCC_OscConfig+0x33a>
 80045e4:	e014      	b.n	8004610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fd f803 	bl	80015f0 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fc ffff 	bl	80015f0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0af      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004604:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ee      	bne.n	80045ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 809b 	beq.w	8004762 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462c:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d05c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d141      	bne.n	80046c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <HAL_RCC_OscConfig+0x4ec>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fc ffd3 	bl	80015f0 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fc ffcf 	bl	80015f0 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e081      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	019b      	lsls	r3, r3, #6
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004696:	4b37      	ldr	r3, [pc, #220]	; (8004774 <HAL_RCC_OscConfig+0x4ec>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fc ffa8 	bl	80015f0 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fc ffa4 	bl	80015f0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e056      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x41c>
 80046c2:	e04e      	b.n	8004762 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_RCC_OscConfig+0x4ec>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc ff91 	bl	80015f0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fc ff8d 	bl	80015f0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e03f      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e4:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x44a>
 80046f0:	e037      	b.n	8004762 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e032      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046fe:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d028      	beq.n	800475e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d121      	bne.n	800475e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d11a      	bne.n	800475e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004734:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004736:	4293      	cmp	r3, r2
 8004738:	d111      	bne.n	800475e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d107      	bne.n	800475e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40007000 	.word	0x40007000
 8004770:	40023800 	.word	0x40023800
 8004774:	42470060 	.word	0x42470060

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fc fec2 	bl	80015f0 <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fc febe 	bl	80015f0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fe22 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	08008df0 	.word	0x08008df0
 800493c:	20000004 	.word	0x20000004
 8004940:	20000008 	.word	0x20000008

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495c:	4b67      	ldr	r3, [pc, #412]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d00d      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x40>
 8004968:	2b08      	cmp	r3, #8
 800496a:	f200 80bd 	bhi.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x34>
 8004972:	2b04      	cmp	r3, #4
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x3a>
 8004976:	e0b7      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800497a:	60bb      	str	r3, [r7, #8]
       break;
 800497c:	e0b7      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497e:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004980:	60bb      	str	r3, [r7, #8]
      break;
 8004982:	e0b4      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004984:	4b5d      	ldr	r3, [pc, #372]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800498c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498e:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04d      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	ea02 0800 	and.w	r8, r2, r0
 80049b2:	ea03 0901 	and.w	r9, r3, r1
 80049b6:	4640      	mov	r0, r8
 80049b8:	4649      	mov	r1, r9
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	014b      	lsls	r3, r1, #5
 80049c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049c8:	0142      	lsls	r2, r0, #5
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	ebb0 0008 	subs.w	r0, r0, r8
 80049d2:	eb61 0109 	sbc.w	r1, r1, r9
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049e4:	0182      	lsls	r2, r0, #6
 80049e6:	1a12      	subs	r2, r2, r0
 80049e8:	eb63 0301 	sbc.w	r3, r3, r1
 80049ec:	f04f 0000 	mov.w	r0, #0
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	00d9      	lsls	r1, r3, #3
 80049f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049fa:	00d0      	lsls	r0, r2, #3
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	eb12 0208 	adds.w	r2, r2, r8
 8004a04:	eb43 0309 	adc.w	r3, r3, r9
 8004a08:	f04f 0000 	mov.w	r0, #0
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	0259      	lsls	r1, r3, #9
 8004a12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a16:	0250      	lsls	r0, r2, #9
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	f7fb fbce 	bl	80001c8 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e04a      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	ea02 0400 	and.w	r4, r2, r0
 8004a4e:	ea03 0501 	and.w	r5, r3, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	014b      	lsls	r3, r1, #5
 8004a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a64:	0142      	lsls	r2, r0, #5
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	1b00      	subs	r0, r0, r4
 8004a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	018b      	lsls	r3, r1, #6
 8004a7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a7e:	0182      	lsls	r2, r0, #6
 8004a80:	1a12      	subs	r2, r2, r0
 8004a82:	eb63 0301 	sbc.w	r3, r3, r1
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	00d9      	lsls	r1, r3, #3
 8004a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a94:	00d0      	lsls	r0, r2, #3
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	1912      	adds	r2, r2, r4
 8004a9c:	eb45 0303 	adc.w	r3, r5, r3
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0299      	lsls	r1, r3, #10
 8004aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aae:	0290      	lsls	r0, r2, #10
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f7fb fb82 	bl	80001c8 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	60bb      	str	r3, [r7, #8]
      break;
 8004ae6:	e002      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aea:	60bb      	str	r3, [r7, #8]
      break;
 8004aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aee:	68bb      	ldr	r3, [r7, #8]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	00f42400 	.word	0x00f42400
 8004b04:	007a1200 	.word	0x007a1200

08004b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b24:	f7ff fff0 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0a9b      	lsrs	r3, r3, #10
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	08008e00 	.word	0x08008e00

08004b48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d035      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b70:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b76:	f7fc fd3b 	bl	80015f0 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b7e:	f7fc fd37 	bl	80015f0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0b0      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	019a      	lsls	r2, r3, #6
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	071b      	lsls	r3, r3, #28
 8004ba8:	4955      	ldr	r1, [pc, #340]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb0:	4b52      	ldr	r3, [pc, #328]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb6:	f7fc fd1b 	bl	80015f0 <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bbe:	f7fc fd17 	bl	80015f0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e090      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd0:	4b4b      	ldr	r3, [pc, #300]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8083 	beq.w	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a43      	ldr	r2, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b41      	ldr	r3, [pc, #260]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c12:	f7fc fced 	bl	80015f0 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c1a:	f7fc fce9 	bl	80015f0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e062      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c2c:	4b35      	ldr	r3, [pc, #212]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c38:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02f      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c60:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c66:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c6c:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d114      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fcb7 	bl	80015f0 <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fc fcb3 	bl	80015f0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e02a      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ee      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	490d      	ldr	r1, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
 8004cd0:	e005      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cea:	4905      	ldr	r1, [pc, #20]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	42470068 	.word	0x42470068
 8004d00:	40023800 	.word	0x40023800
 8004d04:	40007000 	.word	0x40007000
 8004d08:	42470e40 	.word	0x42470e40

08004d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d13e      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d12f      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d42:	617b      	str	r3, [r7, #20]
          break;
 8004d44:	e02f      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d108      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	e007      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d90:	0f1b      	lsrs	r3, r3, #28
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
          break;
 8004d9e:	e002      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
          break;
 8004da4:	bf00      	nop
        }
      }
      break;
 8004da6:	bf00      	nop
    }
  }
  return frequency;
 8004da8:	697b      	ldr	r3, [r7, #20]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00bb8000 	.word	0x00bb8000
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	00f42400 	.word	0x00f42400

08004dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07b      	b.n	8004ed2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d009      	beq.n	8004e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	61da      	str	r2, [r3, #28]
 8004df2:	e005      	b.n	8004e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fa5e 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	ea42 0103 	orr.w	r1, r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0104 	and.w	r1, r3, #4
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f003 0210 	and.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b088      	sub	sp, #32
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_SPI_Transmit+0x22>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e126      	b.n	800514a <HAL_SPI_Transmit+0x270>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f04:	f7fc fb74 	bl	80015f0 <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d002      	beq.n	8004f20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f1e:	e10b      	b.n	8005138 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Transmit+0x52>
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f30:	e102      	b.n	8005138 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2203      	movs	r2, #3
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	d10f      	bne.n	8004f9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d007      	beq.n	8004fb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc0:	d14b      	bne.n	800505a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_SPI_Transmit+0xf6>
 8004fca:	8afb      	ldrh	r3, [r7, #22]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d13e      	bne.n	800504e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	881a      	ldrh	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ff4:	e02b      	b.n	800504e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d112      	bne.n	800502a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	86da      	strh	r2, [r3, #54]	; 0x36
 8005028:	e011      	b.n	800504e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502a:	f7fc fae1 	bl	80015f0 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d803      	bhi.n	8005042 <HAL_SPI_Transmit+0x168>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005040:	d102      	bne.n	8005048 <HAL_SPI_Transmit+0x16e>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800504c:	e074      	b.n	8005138 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ce      	bne.n	8004ff6 <HAL_SPI_Transmit+0x11c>
 8005058:	e04c      	b.n	80050f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_SPI_Transmit+0x18e>
 8005062:	8afb      	ldrh	r3, [r7, #22]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d140      	bne.n	80050ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800508e:	e02c      	b.n	80050ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d113      	bne.n	80050c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050c4:	e011      	b.n	80050ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c6:	f7fc fa93 	bl	80015f0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d803      	bhi.n	80050de <HAL_SPI_Transmit+0x204>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050dc:	d102      	bne.n	80050e4 <HAL_SPI_Transmit+0x20a>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050e8:	e026      	b.n	8005138 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cd      	bne.n	8005090 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f8b3 	bl	8005264 <SPI_EndRxTxTransaction>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e000      	b.n	8005138 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005148:	7ffb      	ldrb	r3, [r7, #31]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005164:	f7fc fa44 	bl	80015f0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005174:	f7fc fa3c 	bl	80015f0 <HAL_GetTick>
 8005178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	e054      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005192:	d050      	beq.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005194:	f7fc fa2c 	bl	80015f0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c2:	d111      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	d004      	beq.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d107      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f0:	d10f      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e017      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d19b      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000004 	.word	0x20000004

08005264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <SPI_EndRxTxTransaction+0x7c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <SPI_EndRxTxTransaction+0x80>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	0d5b      	lsrs	r3, r3, #21
 800527c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005280:	fb02 f303 	mul.w	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528e:	d112      	bne.n	80052b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff ff5a 	bl	8005154 <SPI_WaitFlagStateUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3b01      	subs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d0f2      	beq.n	80052b6 <SPI_EndRxTxTransaction+0x52>
 80052d0:	e000      	b.n	80052d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80052d2:	bf00      	nop
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000004 	.word	0x20000004
 80052e4:	165e9f81 	.word	0x165e9f81

080052e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e8:	b084      	sub	sp, #16
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	f107 001c 	add.w	r0, r7, #28
 80052f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d122      	bne.n	8005346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9a0 	bl	8005680 <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e01a      	b.n	800537c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f994 	bl	8005680 <USB_CoreReset>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
 800536e:	e005      	b.n	800537c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10b      	bne.n	800539a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f043 0206 	orr.w	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a6:	b004      	add	sp, #16
 80053a8:	4770      	bx	lr

080053aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 0201 	bic.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d115      	bne.n	800543c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541c:	2001      	movs	r0, #1
 800541e:	f7fc f8f3 	bl	8001608 <HAL_Delay>
      ms++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f91a 	bl	8005662 <USB_GetMode>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d01e      	beq.n	8005472 <USB_SetCurrentMode+0x84>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b31      	cmp	r3, #49	; 0x31
 8005438:	d9f0      	bls.n	800541c <USB_SetCurrentMode+0x2e>
 800543a:	e01a      	b.n	8005472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d115      	bne.n	800546e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800544e:	2001      	movs	r0, #1
 8005450:	f7fc f8da 	bl	8001608 <HAL_Delay>
      ms++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f901 	bl	8005662 <USB_GetMode>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <USB_SetCurrentMode+0x84>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b31      	cmp	r3, #49	; 0x31
 800546a:	d9f0      	bls.n	800544e <USB_SetCurrentMode+0x60>
 800546c:	e001      	b.n	8005472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e005      	b.n	800547e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b32      	cmp	r3, #50	; 0x32
 8005476:	d101      	bne.n	800547c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	019b      	lsls	r3, r3, #6
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	4a08      	ldr	r2, [pc, #32]	; (80054cc <USB_FlushTxFifo+0x44>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e006      	b.n	80054c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d0f1      	beq.n	80054a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2210      	movs	r2, #16
 80054e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	4a08      	ldr	r2, [pc, #32]	; (800550c <USB_FlushRxFifo+0x3c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e006      	b.n	8005500 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d0f1      	beq.n	80054e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	00030d40 	.word	0x00030d40

08005510 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	460b      	mov	r3, r1
 8005520:	71fb      	strb	r3, [r7, #7]
 8005522:	4613      	mov	r3, r2
 8005524:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800552e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d123      	bne.n	800557e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005536:	88bb      	ldrh	r3, [r7, #4]
 8005538:	3303      	adds	r3, #3
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e018      	b.n	8005576 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	031a      	lsls	r2, r3, #12
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005550:	461a      	mov	r2, r3
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3301      	adds	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	3301      	adds	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d3e2      	bcc.n	8005544 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3724      	adds	r7, #36	; 0x24
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800558c:	b480      	push	{r7}
 800558e:	b08b      	sub	sp, #44	; 0x2c
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	e014      	b.n	80055e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	3301      	adds	r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	3301      	adds	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	3301      	adds	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	3301      	adds	r3, #1
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3e6      	bcc.n	80055b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055ea:	8bfb      	ldrh	r3, [r7, #30]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	461a      	mov	r2, r3
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	b2da      	uxtb	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	701a      	strb	r2, [r3, #0]
      i++;
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	3301      	adds	r3, #1
 800561a:	623b      	str	r3, [r7, #32]
      pDest++;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	3b01      	subs	r3, #1
 8005626:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005628:	8bfb      	ldrh	r3, [r7, #30]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ea      	bne.n	8005604 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005630:	4618      	mov	r0, r3
 8005632:	372c      	adds	r7, #44	; 0x2c
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0301 	and.w	r3, r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <USB_CoreReset+0x60>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e01a      	b.n	80056d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	daf3      	bge.n	800568c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f043 0201 	orr.w	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <USB_CoreReset+0x60>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d0f1      	beq.n	80056b4 <USB_CoreReset+0x34>

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	00030d40 	.word	0x00030d40

080056e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e4:	b084      	sub	sp, #16
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	f107 001c 	add.w	r0, r7, #28
 80056f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005700:	461a      	mov	r2, r3
 8005702:	2300      	movs	r3, #0
 8005704:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10a      	bne.n	8005752 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e014      	b.n	800577c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e009      	b.n	800577c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800577c:	2110      	movs	r1, #16
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fe82 	bl	8005488 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fea3 	bl	80054d0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e015      	b.n	80057bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3e5      	bcc.n	8005790 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_HostInit+0x154>)
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <USB_HostInit+0x158>)
 80057f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057f4:	e009      	b.n	800580a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a10      	ldr	r2, [pc, #64]	; (8005840 <USB_HostInit+0x15c>)
 8005800:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a0f      	ldr	r2, [pc, #60]	; (8005844 <USB_HostInit+0x160>)
 8005806:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f043 0210 	orr.w	r2, r3, #16
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <USB_HostInit+0x164>)
 8005822:	4313      	orrs	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005834:	b004      	add	sp, #16
 8005836:	4770      	bx	lr
 8005838:	01000200 	.word	0x01000200
 800583c:	00e00300 	.word	0x00e00300
 8005840:	00600080 	.word	0x00600080
 8005844:	004000e0 	.word	0x004000e0
 8005848:	a3200008 	.word	0xa3200008

0800584c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005894:	461a      	mov	r2, r3
 8005896:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800589a:	6053      	str	r3, [r2, #4]
 800589c:	e009      	b.n	80058b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d106      	bne.n	80058b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	461a      	mov	r2, r3
 80058ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80058b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058f0:	2064      	movs	r0, #100	; 0x64
 80058f2:	f7fb fe89 	bl	8001608 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005902:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005904:	200a      	movs	r0, #10
 8005906:	f7fb fe7f 	bl	8001608 <HAL_Delay>

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005938:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <USB_DriveVbus+0x44>
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d106      	bne.n	8005958 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005956:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d109      	bne.n	8005978 <USB_DriveVbus+0x64>
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005976:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	0c5b      	lsrs	r3, r3, #17
 80059a4:	f003 0303 	and.w	r3, r3, #3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	b29b      	uxth	r3, r3
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	70fb      	strb	r3, [r7, #3]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70bb      	strb	r3, [r7, #2]
 80059ee:	4613      	mov	r3, r2
 80059f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	461a      	mov	r2, r3
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d87e      	bhi.n	8005b14 <USB_HC_Init+0x13c>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <USB_HC_Init+0x44>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005ad7 	.word	0x08005ad7
 8005a24:	08005a2d 	.word	0x08005a2d
 8005a28:	08005a99 	.word	0x08005a99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da10      	bge.n	8005a6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a66:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a68:	e057      	b.n	8005b1a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d051      	beq.n	8005b1a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a94:	60d3      	str	r3, [r2, #12]
      break;
 8005a96:	e040      	b.n	8005b1a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005aaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	da34      	bge.n	8005b1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ad4:	e023      	b.n	8005b1e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f240 2325 	movw	r3, #549	; 0x225
 8005ae8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da17      	bge.n	8005b22 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b12:	e006      	b.n	8005b22 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77fb      	strb	r3, [r7, #31]
      break;
 8005b18:	e004      	b.n	8005b24 <USB_HC_Init+0x14c>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <USB_HC_Init+0x14c>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <USB_HC_Init+0x14c>
      break;
 8005b22:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	2101      	movs	r1, #1
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	6939      	ldr	r1, [r7, #16]
 8005b3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da03      	bge.n	8005b5e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	e001      	b.n	8005b62 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff0f 	bl	8005986 <USB_GetHostSpeed>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d106      	bne.n	8005b80 <USB_HC_Init+0x1a8>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d003      	beq.n	8005b80 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e001      	b.n	8005b84 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b84:	787b      	ldrb	r3, [r7, #1]
 8005b86:	059b      	lsls	r3, r3, #22
 8005b88:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b8c:	78bb      	ldrb	r3, [r7, #2]
 8005b8e:	02db      	lsls	r3, r3, #11
 8005b90:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b94:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b9a:	049b      	lsls	r3, r3, #18
 8005b9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ba0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ba2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ba8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d10f      	bne.n	8005bea <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c10:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02d      	beq.n	8005c7a <USB_HC_StartXfer+0x86>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	791b      	ldrb	r3, [r3, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d129      	bne.n	8005c7a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d117      	bne.n	8005c5c <USB_HC_StartXfer+0x68>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	79db      	ldrb	r3, [r3, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <USB_HC_StartXfer+0x48>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	79db      	ldrb	r3, [r3, #7]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d10f      	bne.n	8005c5c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <USB_HC_StartXfer+0x86>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	795b      	ldrb	r3, [r3, #5]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d107      	bne.n	8005c7a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fa2f 	bl	80060d4 <USB_DoPing>
      return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e0f8      	b.n	8005e6c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	8912      	ldrh	r2, [r2, #8]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	8912      	ldrh	r2, [r2, #8]
 8005c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c96:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c9a:	8b7b      	ldrh	r3, [r7, #26]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d90b      	bls.n	8005cb8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005ca0:	8b7b      	ldrh	r3, [r7, #26]
 8005ca2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	8912      	ldrh	r2, [r2, #8]
 8005caa:	fb02 f203 	mul.w	r2, r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	611a      	str	r2, [r3, #16]
 8005cb2:	e001      	b.n	8005cb8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	fb02 f203 	mul.w	r2, r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	e003      	b.n	8005cd8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ce2:	04d9      	lsls	r1, r3, #19
 8005ce4:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <USB_HC_StartXfer+0x280>)
 8005ce6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ce8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	7a9b      	ldrb	r3, [r3, #10]
 8005cee:	075b      	lsls	r3, r3, #29
 8005cf0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	0148      	lsls	r0, r1, #5
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	4401      	add	r1, r0
 8005cfc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d00:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d02:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68d9      	ldr	r1, [r3, #12]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d54:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	7e7b      	ldrb	r3, [r7, #25]
 8005d66:	075b      	lsls	r3, r3, #29
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d8e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	e003      	b.n	8005daa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005da8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e04e      	b.n	8005e6c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d149      	bne.n	8005e6a <USB_HC_StartXfer+0x276>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d045      	beq.n	8005e6a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	79db      	ldrb	r3, [r3, #7]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d830      	bhi.n	8005e48 <USB_HC_StartXfer+0x254>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USB_HC_StartXfer+0x1f8>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e21 	.word	0x08005e21
 8005df4:	08005dfd 	.word	0x08005dfd
 8005df8:	08005e21 	.word	0x08005e21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	3303      	adds	r3, #3
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e06:	8afa      	ldrh	r2, [r7, #22]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d91c      	bls.n	8005e4c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e1e:	e015      	b.n	8005e4c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	3303      	adds	r3, #3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e2a:	8afa      	ldrh	r2, [r7, #22]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d90a      	bls.n	8005e50 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e46:	e003      	b.n	8005e50 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <USB_HC_StartXfer+0x25e>
        break;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <USB_HC_StartXfer+0x25e>
        break;
 8005e50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	68d9      	ldr	r1, [r3, #12]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785a      	ldrb	r2, [r3, #1]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2000      	movs	r0, #0
 8005e62:	9000      	str	r0, [sp, #0]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fb53 	bl	8005510 <USB_WritePacket>
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	1ff80000 	.word	0x1ff80000

08005e78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	b29b      	uxth	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b089      	sub	sp, #36	; 0x24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	0c9b      	lsrs	r3, r3, #18
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	0fdb      	lsrs	r3, r3, #31
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d104      	bne.n	8005ef4 <USB_HC_Halt+0x5a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e0e8      	b.n	80060c6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <USB_HC_Halt+0x66>
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d173      	bne.n	8005fe8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 80cb 	bne.w	80060c4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d143      	bne.n	8005fc2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f98:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa6:	d81d      	bhi.n	8005fe4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbe:	d0ec      	beq.n	8005f9a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fc0:	e080      	b.n	80060c4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe2:	e06f      	b.n	80060c4 <USB_HC_Halt+0x22a>
            break;
 8005fe4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe6:	e06d      	b.n	80060c4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006006:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d143      	bne.n	80060a0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	440a      	add	r2, r1
 800602e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006036:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	440a      	add	r2, r1
 800604e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006056:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	440a      	add	r2, r1
 800606e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006072:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006076:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006084:	d81d      	bhi.n	80060c2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609c:	d0ec      	beq.n	8006078 <USB_HC_Halt+0x1de>
 800609e:	e011      	b.n	80060c4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	e000      	b.n	80060c4 <USB_HC_Halt+0x22a>
          break;
 80060c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3724      	adds	r7, #36	; 0x24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060e8:	2301      	movs	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	04da      	lsls	r2, r3, #19
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <USB_DoPing+0x74>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006104:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800611c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006124:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	1ff80000 	.word	0x1ff80000

0800614c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff f935 	bl	80053cc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006162:	2110      	movs	r1, #16
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff f98f 	bl	8005488 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff f9b0 	bl	80054d0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e01f      	b.n	80061b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800618c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006194:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800619c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	3301      	adds	r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	d9dc      	bls.n	8006176 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e034      	b.n	800622c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3301      	adds	r3, #1
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006208:	d80c      	bhi.n	8006224 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006220:	d0ec      	beq.n	80061fc <USB_StopHost+0xb0>
 8006222:	e000      	b.n	8006226 <USB_StopHost+0xda>
        break;
 8006224:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d9c7      	bls.n	80061c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800623e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006246:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff f8ae 	bl	80053aa <USB_EnableGlobalInt>

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b089      	sub	sp, #36	; 0x24
 800625c:	af04      	add	r7, sp, #16
 800625e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006260:	2301      	movs	r3, #1
 8006262:	2202      	movs	r2, #2
 8006264:	2102      	movs	r1, #2
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fc66 	bl	8006b38 <USBH_FindInterface>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2bff      	cmp	r3, #255	; 0xff
 8006274:	d002      	beq.n	800627c <USBH_CDC_InterfaceInit+0x24>
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d901      	bls.n	8006280 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800627c:	2302      	movs	r3, #2
 800627e:	e13d      	b.n	80064fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc3b 	bl	8006b00 <USBH_SelectInterface>
 800628a:	4603      	mov	r3, r0
 800628c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006294:	2302      	movs	r3, #2
 8006296:	e131      	b.n	80064fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800629e:	2050      	movs	r0, #80	; 0x50
 80062a0:	f002 fa00 	bl	80086a4 <malloc>
 80062a4:	4603      	mov	r3, r0
 80062a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e11f      	b.n	80064fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062bc:	2250      	movs	r2, #80	; 0x50
 80062be:	2100      	movs	r1, #0
 80062c0:	68b8      	ldr	r0, [r7, #8]
 80062c2:	f002 fa0d 	bl	80086e0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	211a      	movs	r1, #26
 80062cc:	fb01 f303 	mul.w	r3, r1, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da15      	bge.n	800630a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	211a      	movs	r1, #26
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ee:	781a      	ldrb	r2, [r3, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	211a      	movs	r1, #26
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fe32 	bl	8007f7a <USBH_AllocPipe>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	7819      	ldrb	r1, [r3, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	7858      	ldrb	r0, [r3, #1]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	8952      	ldrh	r2, [r2, #10]
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	2203      	movs	r2, #3
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4623      	mov	r3, r4
 8006340:	4602      	mov	r2, r0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 fdea 	bl	8007f1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2200      	movs	r2, #0
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 f8f9 	bl	8008548 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006356:	2300      	movs	r3, #0
 8006358:	2200      	movs	r2, #0
 800635a:	210a      	movs	r1, #10
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fbeb 	bl	8006b38 <USBH_FindInterface>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d002      	beq.n	8006372 <USBH_CDC_InterfaceInit+0x11a>
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d901      	bls.n	8006376 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006372:	2302      	movs	r3, #2
 8006374:	e0c2      	b.n	80064fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	211a      	movs	r1, #26
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	4413      	add	r3, r2
 8006382:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b25b      	sxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	da16      	bge.n	80063bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	211a      	movs	r1, #26
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	211a      	movs	r1, #26
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	835a      	strh	r2, [r3, #26]
 80063ba:	e015      	b.n	80063e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	211a      	movs	r1, #26
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063cc:	781a      	ldrb	r2, [r3, #0]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	211a      	movs	r1, #26
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	4413      	add	r3, r2
 80063de:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	211a      	movs	r1, #26
 80063ee:	fb01 f303 	mul.w	r3, r1, r3
 80063f2:	4413      	add	r3, r2
 80063f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da16      	bge.n	800642e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	211a      	movs	r1, #26
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006410:	781a      	ldrb	r2, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	211a      	movs	r1, #26
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	4413      	add	r3, r2
 8006422:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	835a      	strh	r2, [r3, #26]
 800642c:	e015      	b.n	800645a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	211a      	movs	r1, #26
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	7b9b      	ldrb	r3, [r3, #14]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fd8a 	bl	8007f7a <USBH_AllocPipe>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	7bdb      	ldrb	r3, [r3, #15]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fd80 	bl	8007f7a <USBH_AllocPipe>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7b59      	ldrb	r1, [r3, #13]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	7b98      	ldrb	r0, [r3, #14]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	8b12      	ldrh	r2, [r2, #24]
 800649a:	9202      	str	r2, [sp, #8]
 800649c:	2202      	movs	r2, #2
 800649e:	9201      	str	r2, [sp, #4]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4623      	mov	r3, r4
 80064a4:	4602      	mov	r2, r0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fd38 	bl	8007f1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	7b19      	ldrb	r1, [r3, #12]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	7bd8      	ldrb	r0, [r3, #15]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	8b52      	ldrh	r2, [r2, #26]
 80064c4:	9202      	str	r2, [sp, #8]
 80064c6:	2202      	movs	r2, #2
 80064c8:	9201      	str	r2, [sp, #4]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4623      	mov	r3, r4
 80064ce:	4602      	mov	r2, r0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fd23 	bl	8007f1c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	7b5b      	ldrb	r3, [r3, #13]
 80064e2:	2200      	movs	r2, #0
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 f82e 	bl	8008548 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f002 f827 	bl	8008548 <USBH_LL_SetToggle>

  return USBH_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bd90      	pop	{r4, r7, pc}

08006504 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fd18 	bl	8007f5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fd43 	bl	8007fbc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00e      	beq.n	8006562 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b1b      	ldrb	r3, [r3, #12]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fd05 	bl	8007f5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7b1b      	ldrb	r3, [r3, #12]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fd30 	bl	8007fbc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	7b5b      	ldrb	r3, [r3, #13]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fcf2 	bl	8007f5a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	7b5b      	ldrb	r3, [r3, #13]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fd1d 	bl	8007fbc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4618      	mov	r0, r3
 800659e:	f002 f889 	bl	80086b4 <free>
    phost->pActiveClass->pData = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a8:	2200      	movs	r2, #0
 80065aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3340      	adds	r3, #64	; 0x40
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8b1 	bl	8006736 <GetLineCoding>
 80065d4:	4603      	mov	r3, r0
 80065d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065d8:	7afb      	ldrb	r3, [r7, #11]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d105      	bne.n	80065ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065e4:	2102      	movs	r1, #2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065ea:	7afb      	ldrb	r3, [r7, #11]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006614:	2b04      	cmp	r3, #4
 8006616:	d877      	bhi.n	8006708 <USBH_CDC_Process+0x114>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <USBH_CDC_Process+0x2c>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006635 	.word	0x08006635
 8006624:	0800663b 	.word	0x0800663b
 8006628:	0800666b 	.word	0x0800666b
 800662c:	080066df 	.word	0x080066df
 8006630:	080066ed 	.word	0x080066ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e06d      	b.n	8006716 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f897 	bl	8006774 <SetLineCoding>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006658:	e058      	b.n	800670c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d055      	beq.n	800670c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2204      	movs	r2, #4
 8006664:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006668:	e050      	b.n	800670c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3340      	adds	r3, #64	; 0x40
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f860 	bl	8006736 <GetLineCoding>
 8006676:	4603      	mov	r3, r0
 8006678:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d126      	bne.n	80066ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	791b      	ldrb	r3, [r3, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d13b      	bne.n	8006710 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d133      	bne.n	8006710 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d12b      	bne.n	8006710 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d124      	bne.n	8006710 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f958 	bl	800697c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066cc:	e020      	b.n	8006710 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d01d      	beq.n	8006710 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2204      	movs	r2, #4
 80066d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066dc:	e018      	b.n	8006710 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f867 	bl	80067b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8da 	bl	800689e <CDC_ProcessReception>
      break;
 80066ea:	e014      	b.n	8006716 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066ec:	2100      	movs	r1, #0
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 ffe3 	bl	80076ba <USBH_ClrFeature>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006706:	e005      	b.n	8006714 <USBH_CDC_Process+0x120>

    default:
      break;
 8006708:	bf00      	nop
 800670a:	e004      	b.n	8006716 <USBH_CDC_Process+0x122>
      break;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <USBH_CDC_Process+0x122>
      break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <USBH_CDC_Process+0x122>
      break;
 8006714:	bf00      	nop

  }

  return status;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	22a1      	movs	r2, #161	; 0xa1
 8006744:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2221      	movs	r2, #33	; 0x21
 800674a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2207      	movs	r2, #7
 800675c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2207      	movs	r2, #7
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f988 	bl	8007a7a <USBH_CtlReq>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2221      	movs	r2, #33	; 0x21
 8006782:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2207      	movs	r2, #7
 800679a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2207      	movs	r2, #7
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f969 	bl	8007a7a <USBH_CtlReq>
 80067a8:	4603      	mov	r3, r0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af02      	add	r7, sp, #8
 80067b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d002      	beq.n	80067d8 <CDC_ProcessTransmission+0x26>
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d023      	beq.n	800681e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067d6:	e05e      	b.n	8006896 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	8b12      	ldrh	r2, [r2, #24]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d90b      	bls.n	80067fc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	69d9      	ldr	r1, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8b1a      	ldrh	r2, [r3, #24]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	7b5b      	ldrb	r3, [r3, #13]
 80067f0:	2001      	movs	r0, #1
 80067f2:	9000      	str	r0, [sp, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fb4e 	bl	8007e96 <USBH_BulkSendData>
 80067fa:	e00b      	b.n	8006814 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	7b5b      	ldrb	r3, [r3, #13]
 800680a:	2001      	movs	r0, #1
 800680c:	9000      	str	r0, [sp, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fb41 	bl	8007e96 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800681c:	e03b      	b.n	8006896 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	7b5b      	ldrb	r3, [r3, #13]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fe65 	bl	80084f4 <USBH_LL_GetURBState>
 800682a:	4603      	mov	r3, r0
 800682c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d128      	bne.n	8006886 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8b12      	ldrh	r2, [r2, #24]
 800683c:	4293      	cmp	r3, r2
 800683e:	d90e      	bls.n	800685e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	8b12      	ldrh	r2, [r2, #24]
 8006848:	1a9a      	subs	r2, r3, r2
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	8b12      	ldrh	r2, [r2, #24]
 8006856:	441a      	add	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	61da      	str	r2, [r3, #28]
 800685c:	e002      	b.n	8006864 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d004      	beq.n	8006876 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006874:	e00e      	b.n	8006894 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f868 	bl	8006954 <USBH_CDC_TransmitCallback>
      break;
 8006884:	e006      	b.n	8006894 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006886:	7afb      	ldrb	r3, [r7, #11]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d103      	bne.n	8006894 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006894:	bf00      	nop
  }
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d002      	beq.n	80068c4 <CDC_ProcessReception+0x26>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00e      	beq.n	80068e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068c2:	e043      	b.n	800694c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	6a19      	ldr	r1, [r3, #32]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	8b5a      	ldrh	r2, [r3, #26]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	7b1b      	ldrb	r3, [r3, #12]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fb05 	bl	8007ee0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2204      	movs	r2, #4
 80068da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068de:	e035      	b.n	800694c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	7b1b      	ldrb	r3, [r3, #12]
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fe04 	bl	80084f4 <USBH_LL_GetURBState>
 80068ec:	4603      	mov	r3, r0
 80068ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068f0:	7cfb      	ldrb	r3, [r7, #19]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d129      	bne.n	800694a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	7b1b      	ldrb	r3, [r3, #12]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fd67 	bl	80083d0 <USBH_LL_GetLastXferSize>
 8006902:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	429a      	cmp	r2, r3
 800690c:	d016      	beq.n	800693c <CDC_ProcessReception+0x9e>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	8b5b      	ldrh	r3, [r3, #26]
 8006912:	461a      	mov	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4293      	cmp	r3, r2
 8006918:	d910      	bls.n	800693c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	441a      	add	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2203      	movs	r2, #3
 8006936:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800693a:	e006      	b.n	800694a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f80f 	bl	8006968 <USBH_CDC_ReceiveCallback>
      break;
 800694a:	bf00      	nop
  }
}
 800694c:	bf00      	nop
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e029      	b.n	80069fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	79fa      	ldrb	r2, [r7, #7]
 80069ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f81f 	bl	8006a04 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f001 fc37 	bl	8008268 <USBH_LL_Init>

  return USBH_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e009      	b.n	8006a2a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	33e0      	adds	r3, #224	; 0xe0
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b0e      	cmp	r3, #14
 8006a2e:	d9f2      	bls.n	8006a16 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e009      	b.n	8006a4a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a50:	d3f1      	bcc.n	8006a36 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d016      	beq.n	8006aee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10e      	bne.n	8006ae8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ad0:	1c59      	adds	r1, r3, #1
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	33de      	adds	r3, #222	; 0xde
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e004      	b.n	8006af2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e001      	b.n	8006af2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d204      	bcs.n	8006b26 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b24:	e001      	b.n	8006b2a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b26:	2302      	movs	r3, #2
 8006b28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	70fb      	strb	r3, [r7, #3]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70bb      	strb	r3, [r7, #2]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b60:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b62:	e025      	b.n	8006bb0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	221a      	movs	r2, #26
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	3302      	adds	r3, #2
 8006b74:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	795b      	ldrb	r3, [r3, #5]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d002      	beq.n	8006b86 <USBH_FindInterface+0x4e>
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	2bff      	cmp	r3, #255	; 0xff
 8006b84:	d111      	bne.n	8006baa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b8a:	78ba      	ldrb	r2, [r7, #2]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d002      	beq.n	8006b96 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b90:	78bb      	ldrb	r3, [r7, #2]
 8006b92:	2bff      	cmp	r3, #255	; 0xff
 8006b94:	d109      	bne.n	8006baa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b9a:	787a      	ldrb	r2, [r7, #1]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d002      	beq.n	8006ba6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ba0:	787b      	ldrb	r3, [r7, #1]
 8006ba2:	2bff      	cmp	r3, #255	; 0xff
 8006ba4:	d101      	bne.n	8006baa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	e006      	b.n	8006bb8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	3301      	adds	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d9d6      	bls.n	8006b64 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bb6:	23ff      	movs	r3, #255	; 0xff
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	371c      	adds	r7, #28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fb87 	bl	80082e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fca0 	bl	800851a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af04      	add	r7, sp, #16
 8006bea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2203      	movs	r2, #3
 8006c04:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b0b      	cmp	r3, #11
 8006c0e:	f200 81b3 	bhi.w	8006f78 <USBH_Process+0x394>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <USBH_Process+0x34>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c49 	.word	0x08006c49
 8006c1c:	08006c7b 	.word	0x08006c7b
 8006c20:	08006ce3 	.word	0x08006ce3
 8006c24:	08006f13 	.word	0x08006f13
 8006c28:	08006f79 	.word	0x08006f79
 8006c2c:	08006d87 	.word	0x08006d87
 8006c30:	08006eb9 	.word	0x08006eb9
 8006c34:	08006dbd 	.word	0x08006dbd
 8006c38:	08006ddd 	.word	0x08006ddd
 8006c3c:	08006dfd 	.word	0x08006dfd
 8006c40:	08006e2b 	.word	0x08006e2b
 8006c44:	08006efb 	.word	0x08006efb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8193 	beq.w	8006f7c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c5c:	20c8      	movs	r0, #200	; 0xc8
 8006c5e:	f001 fca3 	bl	80085a8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fb99 	bl	800839a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006c78:	e180      	b.n	8006f7c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d107      	bne.n	8006c94 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c92:	e182      	b.n	8006f9a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c9e:	d914      	bls.n	8006cca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d903      	bls.n	8006cc2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	220d      	movs	r2, #13
 8006cbe:	701a      	strb	r2, [r3, #0]
      break;
 8006cc0:	e16b      	b.n	8006f9a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e167      	b.n	8006f9a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cd0:	f103 020a 	add.w	r2, r3, #10
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cda:	200a      	movs	r0, #10
 8006cdc:	f001 fc64 	bl	80085a8 <USBH_Delay>
      break;
 8006ce0:	e15b      	b.n	8006f9a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cf2:	2104      	movs	r1, #4
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cf8:	2064      	movs	r0, #100	; 0x64
 8006cfa:	f001 fc55 	bl	80085a8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fb24 	bl	800834c <USBH_LL_GetSpeed>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2205      	movs	r2, #5
 8006d12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 f92f 	bl	8007f7a <USBH_AllocPipe>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 f927 	bl	8007f7a <USBH_AllocPipe>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7919      	ldrb	r1, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d48:	b292      	uxth	r2, r2
 8006d4a:	9202      	str	r2, [sp, #8]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	9201      	str	r2, [sp, #4]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4603      	mov	r3, r0
 8006d54:	2280      	movs	r2, #128	; 0x80
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f8e0 	bl	8007f1c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	7959      	ldrb	r1, [r3, #5]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d70:	b292      	uxth	r2, r2
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	9201      	str	r2, [sp, #4]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f8cc 	bl	8007f1c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d84:	e109      	b.n	8006f9a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f90c 	bl	8006fa4 <USBH_HandleEnum>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f040 80f3 	bne.w	8006f80 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d103      	bne.n	8006db4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2208      	movs	r2, #8
 8006db0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006db2:	e0e5      	b.n	8006f80 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2207      	movs	r2, #7
 8006db8:	701a      	strb	r2, [r3, #0]
      break;
 8006dba:	e0e1      	b.n	8006f80 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80de 	beq.w	8006f84 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dce:	2101      	movs	r1, #1
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006dda:	e0d3      	b.n	8006f84 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc20 	bl	800762c <USBH_SetCfg>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 80ca 	bne.w	8006f88 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2209      	movs	r2, #9
 8006df8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006dfa:	e0c5      	b.n	8006f88 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc30 	bl	8007672 <USBH_SetFeature>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 80b9 	bne.w	8006f8c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e20:	e0b4      	b.n	8006f8c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220a      	movs	r2, #10
 8006e26:	701a      	strb	r2, [r3, #0]
      break;
 8006e28:	e0b0      	b.n	8006f8c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80ad 	beq.w	8006f90 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
 8006e42:	e016      	b.n	8006e72 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32de      	adds	r2, #222	; 0xde
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	791a      	ldrb	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d108      	bne.n	8006e6c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	32de      	adds	r2, #222	; 0xde
 8006e60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e6a:	e005      	b.n	8006e78 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0e5      	beq.n	8006e44 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d016      	beq.n	8006eb0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2206      	movs	r2, #6
 8006e98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea0:	2103      	movs	r1, #3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ea6:	e073      	b.n	8006f90 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	220d      	movs	r2, #13
 8006eac:	701a      	strb	r2, [r3, #0]
      break;
 8006eae:	e06f      	b.n	8006f90 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	220d      	movs	r2, #13
 8006eb4:	701a      	strb	r2, [r3, #0]
      break;
 8006eb6:	e06b      	b.n	8006f90 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d017      	beq.n	8006ef2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220b      	movs	r2, #11
 8006ede:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ee0:	e058      	b.n	8006f94 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d154      	bne.n	8006f94 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220d      	movs	r2, #13
 8006eee:	701a      	strb	r2, [r3, #0]
      break;
 8006ef0:	e050      	b.n	8006f94 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	220d      	movs	r2, #13
 8006ef6:	701a      	strb	r2, [r3, #0]
      break;
 8006ef8:	e04c      	b.n	8006f94 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d049      	beq.n	8006f98 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      }
      break;
 8006f10:	e042      	b.n	8006f98 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fd72 	bl	8006a04 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4e:	2105      	movs	r1, #5
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d107      	bne.n	8006f70 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fe2b 	bl	8006bc4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f6e:	e014      	b.n	8006f9a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f9b5 	bl	80082e0 <USBH_LL_Start>
      break;
 8006f76:	e010      	b.n	8006f9a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f78:	bf00      	nop
 8006f7a:	e00e      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e00c      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f80:	bf00      	nop
 8006f82:	e00a      	b.n	8006f9a <USBH_Process+0x3b6>
    break;
 8006f84:	bf00      	nop
 8006f86:	e008      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f88:	bf00      	nop
 8006f8a:	e006      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f8c:	bf00      	nop
 8006f8e:	e004      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f90:	bf00      	nop
 8006f92:	e002      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <USBH_Process+0x3b6>
      break;
 8006f98:	bf00      	nop
  }
  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	f200 81c1 	bhi.w	8007340 <USBH_HandleEnum+0x39c>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <USBH_HandleEnum+0x20>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe5 	.word	0x08006fe5
 8006fc8:	080070a3 	.word	0x080070a3
 8006fcc:	0800710d 	.word	0x0800710d
 8006fd0:	0800719b 	.word	0x0800719b
 8006fd4:	08007205 	.word	0x08007205
 8006fd8:	08007275 	.word	0x08007275
 8006fdc:	080072bb 	.word	0x080072bb
 8006fe0:	08007301 	.word	0x08007301
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fe4:	2108      	movs	r1, #8
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa50 	bl	800748c <USBH_Get_DevDesc>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d130      	bne.n	8007058 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7919      	ldrb	r1, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800701a:	b292      	uxth	r2, r2
 800701c:	9202      	str	r2, [sp, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	9201      	str	r2, [sp, #4]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4603      	mov	r3, r0
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 ff77 	bl	8007f1c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7959      	ldrb	r1, [r3, #5]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007042:	b292      	uxth	r2, r2
 8007044:	9202      	str	r2, [sp, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4603      	mov	r3, r0
 800704e:	2200      	movs	r2, #0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 ff63 	bl	8007f1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007056:	e175      	b.n	8007344 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b03      	cmp	r3, #3
 800705c:	f040 8172 	bne.w	8007344 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007076:	2b03      	cmp	r3, #3
 8007078:	d903      	bls.n	8007082 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220d      	movs	r2, #13
 800707e:	701a      	strb	r2, [r3, #0]
      break;
 8007080:	e160      	b.n	8007344 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 ff97 	bl	8007fbc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	791b      	ldrb	r3, [r3, #4]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 ff91 	bl	8007fbc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
      break;
 80070a0:	e150      	b.n	8007344 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070a2:	2112      	movs	r1, #18
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9f1 	bl	800748c <USBH_Get_DevDesc>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ba:	e145      	b.n	8007348 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	f040 8142 	bne.w	8007348 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ca:	3301      	adds	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d903      	bls.n	80070e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	220d      	movs	r2, #13
 80070e2:	701a      	strb	r2, [r3, #0]
      break;
 80070e4:	e130      	b.n	8007348 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	795b      	ldrb	r3, [r3, #5]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 ff65 	bl	8007fbc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 ff5f 	bl	8007fbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
      break;
 800710a:	e11d      	b.n	8007348 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa68 	bl	80075e4 <USBH_SetAddress>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d132      	bne.n	8007184 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800711e:	2002      	movs	r0, #2
 8007120:	f001 fa42 	bl	80085a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7919      	ldrb	r1, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007146:	b292      	uxth	r2, r2
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	9201      	str	r2, [sp, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	2280      	movs	r2, #128	; 0x80
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fee1 	bl	8007f1c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7959      	ldrb	r1, [r3, #5]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800716e:	b292      	uxth	r2, r2
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	2200      	movs	r2, #0
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fecd 	bl	8007f1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007182:	e0e3      	b.n	800734c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b03      	cmp	r3, #3
 8007188:	f040 80e0 	bne.w	800734c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	220d      	movs	r2, #13
 8007190:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	705a      	strb	r2, [r3, #1]
      break;
 8007198:	e0d8      	b.n	800734c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800719a:	2109      	movs	r1, #9
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f99d 	bl	80074dc <USBH_Get_CfgDesc>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071b2:	e0cd      	b.n	8007350 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f040 80ca 	bne.w	8007350 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c2:	3301      	adds	r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d903      	bls.n	80071de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220d      	movs	r2, #13
 80071da:	701a      	strb	r2, [r3, #0]
      break;
 80071dc:	e0b8      	b.n	8007350 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	795b      	ldrb	r3, [r3, #5]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fee9 	bl	8007fbc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fee3 	bl	8007fbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
      break;
 8007202:	e0a5      	b.n	8007350 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f965 	bl	80074dc <USBH_Get_CfgDesc>
 8007212:	4603      	mov	r3, r0
 8007214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2205      	movs	r2, #5
 8007220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007222:	e097      	b.n	8007354 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 8094 	bne.w	8007354 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007232:	3301      	adds	r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007242:	2b03      	cmp	r3, #3
 8007244:	d903      	bls.n	800724e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220d      	movs	r2, #13
 800724a:	701a      	strb	r2, [r3, #0]
      break;
 800724c:	e082      	b.n	8007354 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	795b      	ldrb	r3, [r3, #5]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 feb1 	bl	8007fbc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 feab 	bl	8007fbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e06f      	b.n	8007354 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800727a:	2b00      	cmp	r3, #0
 800727c:	d019      	beq.n	80072b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f949 	bl	8007524 <USBH_Get_StringDesc>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2206      	movs	r2, #6
 80072a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072a2:	e059      	b.n	8007358 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d156      	bne.n	8007358 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2206      	movs	r2, #6
 80072ae:	705a      	strb	r2, [r3, #1]
      break;
 80072b0:	e052      	b.n	8007358 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2206      	movs	r2, #6
 80072b6:	705a      	strb	r2, [r3, #1]
      break;
 80072b8:	e04e      	b.n	8007358 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d0:	23ff      	movs	r3, #255	; 0xff
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f926 	bl	8007524 <USBH_Get_StringDesc>
 80072d8:	4603      	mov	r3, r0
 80072da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2207      	movs	r2, #7
 80072e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072e8:	e038      	b.n	800735c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d135      	bne.n	800735c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2207      	movs	r2, #7
 80072f4:	705a      	strb	r2, [r3, #1]
      break;
 80072f6:	e031      	b.n	800735c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2207      	movs	r2, #7
 80072fc:	705a      	strb	r2, [r3, #1]
      break;
 80072fe:	e02d      	b.n	800735c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007316:	23ff      	movs	r3, #255	; 0xff
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f903 	bl	8007524 <USBH_Get_StringDesc>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800732c:	e018      	b.n	8007360 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b03      	cmp	r3, #3
 8007332:	d115      	bne.n	8007360 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e012      	b.n	8007360 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
      break;
 800733e:	e00f      	b.n	8007360 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007340:	bf00      	nop
 8007342:	e00e      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007344:	bf00      	nop
 8007346:	e00c      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007348:	bf00      	nop
 800734a:	e00a      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 800734c:	bf00      	nop
 800734e:	e008      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007350:	bf00      	nop
 8007352:	e006      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007354:	bf00      	nop
 8007356:	e004      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
 800735a:	e002      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 800735c:	bf00      	nop
 800735e:	e000      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007360:	bf00      	nop
  }
  return Status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f804 	bl	80073ae <USBH_HandleSof>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b0b      	cmp	r3, #11
 80073be:	d10a      	bne.n	80073d6 <USBH_HandleSof+0x28>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
  }
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80073ee:	bf00      	nop
}
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800740a:	bf00      	nop
}
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 ff56 	bl	8008316 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fda3 	bl	8007fbc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd9d 	bl	8007fbc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f864 	bl	800757a <USBH_GetDescriptor>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	b292      	uxth	r2, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	f000 f918 	bl	8007702 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	331c      	adds	r3, #28
 80074ec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074ee:	887b      	ldrh	r3, [r7, #2]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f8:	2100      	movs	r1, #0
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f83d 	bl	800757a <USBH_GetDescriptor>
 8007500:	4603      	mov	r3, r0
 8007502:	72fb      	strb	r3, [r7, #11]
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 f964 	bl	80077e2 <USBH_ParseCfgDesc>
  }

  return status;
 800751a:	7afb      	ldrb	r3, [r7, #11]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	461a      	mov	r2, r3
 8007530:	460b      	mov	r3, r1
 8007532:	72fb      	strb	r3, [r7, #11]
 8007534:	4613      	mov	r3, r2
 8007536:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007540:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007548:	893b      	ldrh	r3, [r7, #8]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f812 	bl	800757a <USBH_GetDescriptor>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d107      	bne.n	8007570 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007566:	893a      	ldrh	r2, [r7, #8]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fa37 	bl	80079de <USBH_ParseStringDesc>
  }

  return status;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	4613      	mov	r3, r2
 800758a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	789b      	ldrb	r3, [r3, #2]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d11c      	bne.n	80075ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800759a:	b2da      	uxtb	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2206      	movs	r2, #6
 80075a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	893a      	ldrh	r2, [r7, #8]
 80075aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b6:	d104      	bne.n	80075c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f240 4209 	movw	r2, #1033	; 0x409
 80075be:	829a      	strh	r2, [r3, #20]
 80075c0:	e002      	b.n	80075c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8b3a      	ldrh	r2, [r7, #24]
 80075cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075ce:	8b3b      	ldrh	r3, [r7, #24]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fa50 	bl	8007a7a <USBH_CtlReq>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	789b      	ldrb	r3, [r3, #2]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10f      	bne.n	8007618 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2205      	movs	r2, #5
 8007602:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa2c 	bl	8007a7a <USBH_CtlReq>
 8007622:	4603      	mov	r3, r0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	789b      	ldrb	r3, [r3, #2]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10e      	bne.n	800765e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2209      	movs	r2, #9
 800764a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	887a      	ldrh	r2, [r7, #2]
 8007650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa09 	bl	8007a7a <USBH_CtlReq>
 8007668:	4603      	mov	r3, r0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	789b      	ldrb	r3, [r3, #2]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10f      	bne.n	80076a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2203      	movs	r2, #3
 8007690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	b29a      	uxth	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9e5 	bl	8007a7a <USBH_CtlReq>
 80076b0:	4603      	mov	r3, r0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	789b      	ldrb	r3, [r3, #2]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d10f      	bne.n	80076ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9c1 	bl	8007a7a <USBH_CtlReq>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	785a      	ldrb	r2, [r3, #1]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3302      	adds	r3, #2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3303      	adds	r3, #3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	b29b      	uxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	791a      	ldrb	r2, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	795a      	ldrb	r2, [r3, #5]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	799a      	ldrb	r2, [r3, #6]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	79da      	ldrb	r2, [r3, #7]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2b08      	cmp	r3, #8
 8007760:	d939      	bls.n	80077d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3308      	adds	r3, #8
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b29a      	uxth	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3309      	adds	r3, #9
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	330a      	adds	r3, #10
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29a      	uxth	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	330b      	adds	r3, #11
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	330c      	adds	r3, #12
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	330d      	adds	r3, #13
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	7b9a      	ldrb	r2, [r3, #14]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	7bda      	ldrb	r2, [r3, #15]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7c1a      	ldrb	r2, [r3, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	7c5a      	ldrb	r2, [r3, #17]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	745a      	strb	r2, [r3, #17]
  }
}
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b08a      	sub	sp, #40	; 0x28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	785a      	ldrb	r2, [r3, #1]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3302      	adds	r3, #2
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b29a      	uxth	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	3303      	adds	r3, #3
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	b29b      	uxth	r3, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	791a      	ldrb	r2, [r3, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	795a      	ldrb	r2, [r3, #5]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	799a      	ldrb	r2, [r3, #6]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	79da      	ldrb	r2, [r3, #7]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	7a1a      	ldrb	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2b09      	cmp	r3, #9
 800785c:	d95f      	bls.n	800791e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800785e:	2309      	movs	r3, #9
 8007860:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007866:	e051      	b.n	800790c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007868:	f107 0316 	add.w	r3, r7, #22
 800786c:	4619      	mov	r1, r3
 800786e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007870:	f000 f8e8 	bl	8007a44 <USBH_GetNextDesc>
 8007874:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b04      	cmp	r3, #4
 800787c:	d146      	bne.n	800790c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800787e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007882:	221a      	movs	r2, #26
 8007884:	fb02 f303 	mul.w	r3, r2, r3
 8007888:	3308      	adds	r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	3302      	adds	r3, #2
 8007890:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007894:	69f8      	ldr	r0, [r7, #28]
 8007896:	f000 f846 	bl	8007926 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078a4:	e022      	b.n	80078ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078a6:	f107 0316 	add.w	r3, r7, #22
 80078aa:	4619      	mov	r1, r3
 80078ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ae:	f000 f8c9 	bl	8007a44 <USBH_GetNextDesc>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d117      	bne.n	80078ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078c4:	3201      	adds	r2, #1
 80078c6:	00d2      	lsls	r2, r2, #3
 80078c8:	211a      	movs	r1, #26
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	3308      	adds	r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	3304      	adds	r3, #4
 80078d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80078da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078dc:	69b8      	ldr	r0, [r7, #24]
 80078de:	f000 f851 	bl	8007984 <USBH_ParseEPDesc>
            ep_ix++;
 80078e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078e6:	3301      	adds	r3, #1
 80078e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d204      	bcs.n	8007902 <USBH_ParseCfgDesc+0x120>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	885a      	ldrh	r2, [r3, #2]
 80078fc:	8afb      	ldrh	r3, [r7, #22]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d8d1      	bhi.n	80078a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007906:	3301      	adds	r3, #1
 8007908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800790c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007910:	2b01      	cmp	r3, #1
 8007912:	d804      	bhi.n	800791e <USBH_ParseCfgDesc+0x13c>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	885a      	ldrh	r2, [r3, #2]
 8007918:	8afb      	ldrh	r3, [r7, #22]
 800791a:	429a      	cmp	r2, r3
 800791c:	d8a4      	bhi.n	8007868 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800791e:	bf00      	nop
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781a      	ldrb	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785a      	ldrb	r2, [r3, #1]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	789a      	ldrb	r2, [r3, #2]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	78da      	ldrb	r2, [r3, #3]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	791a      	ldrb	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	795a      	ldrb	r2, [r3, #5]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	799a      	ldrb	r2, [r3, #6]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	79da      	ldrb	r2, [r3, #7]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	7a1a      	ldrb	r2, [r3, #8]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	721a      	strb	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785a      	ldrb	r2, [r3, #1]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	789a      	ldrb	r2, [r3, #2]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	78da      	ldrb	r2, [r3, #3]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	3304      	adds	r3, #4
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3305      	adds	r3, #5
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	799a      	ldrb	r2, [r3, #6]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	719a      	strb	r2, [r3, #6]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80079de:	b480      	push	{r7}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	4613      	mov	r3, r2
 80079ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d120      	bne.n	8007a38 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	1e9a      	subs	r2, r3, #2
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bf28      	it	cs
 8007a02:	4613      	movcs	r3, r2
 8007a04:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3302      	adds	r3, #2
 8007a0a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	82fb      	strh	r3, [r7, #22]
 8007a10:	e00b      	b.n	8007a2a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a12:	8afb      	ldrh	r3, [r7, #22]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a24:	8afb      	ldrh	r3, [r7, #22]
 8007a26:	3302      	adds	r3, #2
 8007a28:	82fb      	strh	r3, [r7, #22]
 8007a2a:	8afa      	ldrh	r2, [r7, #22]
 8007a2c:	8abb      	ldrh	r3, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3ef      	bcc.n	8007a12 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
  }
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	881a      	ldrh	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	4613      	mov	r3, r2
 8007a86:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	789b      	ldrb	r3, [r3, #2]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <USBH_CtlReq+0x20>
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d00f      	beq.n	8007ab8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a98:	e027      	b.n	8007aea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab6:	e018      	b.n	8007aea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f81b 	bl	8007af4 <USBH_HandleControl>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <USBH_CtlReq+0x54>
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d106      	bne.n	8007adc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	761a      	strb	r2, [r3, #24]
      break;
 8007ada:	e005      	b.n	8007ae8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d102      	bne.n	8007ae8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	709a      	strb	r2, [r3, #2]
      break;
 8007ae8:	bf00      	nop
  }
  return status;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007afc:	2301      	movs	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7e1b      	ldrb	r3, [r3, #24]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	2b0a      	cmp	r3, #10
 8007b0c:	f200 8156 	bhi.w	8007dbc <USBH_HandleControl+0x2c8>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <USBH_HandleControl+0x24>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b45 	.word	0x08007b45
 8007b1c:	08007b5f 	.word	0x08007b5f
 8007b20:	08007bc9 	.word	0x08007bc9
 8007b24:	08007bef 	.word	0x08007bef
 8007b28:	08007c27 	.word	0x08007c27
 8007b2c:	08007c51 	.word	0x08007c51
 8007b30:	08007ca3 	.word	0x08007ca3
 8007b34:	08007cc5 	.word	0x08007cc5
 8007b38:	08007d01 	.word	0x08007d01
 8007b3c:	08007d27 	.word	0x08007d27
 8007b40:	08007d65 	.word	0x08007d65
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f103 0110 	add.w	r1, r3, #16
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f943 	bl	8007ddc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	761a      	strb	r2, [r3, #24]
      break;
 8007b5c:	e139      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	795b      	ldrb	r3, [r3, #5]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fcc5 	bl	80084f4 <USBH_LL_GetURBState>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d11e      	bne.n	8007bb2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8adb      	ldrh	r3, [r3, #22]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b86:	7b7b      	ldrb	r3, [r7, #13]
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d103      	bne.n	8007b94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b92:	e115      	b.n	8007dc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2205      	movs	r2, #5
 8007b98:	761a      	strb	r2, [r3, #24]
      break;
 8007b9a:	e111      	b.n	8007dc0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b9c:	7b7b      	ldrb	r3, [r7, #13]
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d103      	bne.n	8007baa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2209      	movs	r2, #9
 8007ba6:	761a      	strb	r2, [r3, #24]
      break;
 8007ba8:	e10a      	b.n	8007dc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2207      	movs	r2, #7
 8007bae:	761a      	strb	r2, [r3, #24]
      break;
 8007bb0:	e106      	b.n	8007dc0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d003      	beq.n	8007bc0 <USBH_HandleControl+0xcc>
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	f040 8100 	bne.w	8007dc0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	220b      	movs	r2, #11
 8007bc4:	761a      	strb	r2, [r3, #24]
      break;
 8007bc6:	e0fb      	b.n	8007dc0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6899      	ldr	r1, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	899a      	ldrh	r2, [r3, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	791b      	ldrb	r3, [r3, #4]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f93a 	bl	8007e5a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2204      	movs	r2, #4
 8007bea:	761a      	strb	r2, [r3, #24]
      break;
 8007bec:	e0f1      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	791b      	ldrb	r3, [r3, #4]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fc7d 	bl	80084f4 <USBH_LL_GetURBState>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2209      	movs	r2, #9
 8007c08:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d102      	bne.n	8007c16 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c10:	2303      	movs	r3, #3
 8007c12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c14:	e0d6      	b.n	8007dc4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	f040 80d3 	bne.w	8007dc4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	220b      	movs	r2, #11
 8007c22:	761a      	strb	r2, [r3, #24]
      break;
 8007c24:	e0ce      	b.n	8007dc4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6899      	ldr	r1, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	899a      	ldrh	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	795b      	ldrb	r3, [r3, #5]
 8007c32:	2001      	movs	r0, #1
 8007c34:	9000      	str	r0, [sp, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f8ea 	bl	8007e10 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2206      	movs	r2, #6
 8007c4c:	761a      	strb	r2, [r3, #24]
      break;
 8007c4e:	e0c0      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	795b      	ldrb	r3, [r3, #5]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fc4c 	bl	80084f4 <USBH_LL_GetURBState>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d103      	bne.n	8007c6e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2207      	movs	r2, #7
 8007c6a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c6c:	e0ac      	b.n	8007dc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b05      	cmp	r3, #5
 8007c72:	d105      	bne.n	8007c80 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	220c      	movs	r2, #12
 8007c78:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7e:	e0a3      	b.n	8007dc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d103      	bne.n	8007c8e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2205      	movs	r2, #5
 8007c8a:	761a      	strb	r2, [r3, #24]
      break;
 8007c8c:	e09c      	b.n	8007dc8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	f040 8099 	bne.w	8007dc8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	220b      	movs	r2, #11
 8007c9a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e092      	b.n	8007dc8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f8d5 	bl	8007e5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	761a      	strb	r2, [r3, #24]

      break;
 8007cc2:	e086      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	791b      	ldrb	r3, [r3, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fc12 	bl	80084f4 <USBH_LL_GetURBState>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d105      	bne.n	8007ce6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	220d      	movs	r2, #13
 8007cde:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ce4:	e072      	b.n	8007dcc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d103      	bne.n	8007cf4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	220b      	movs	r2, #11
 8007cf0:	761a      	strb	r2, [r3, #24]
      break;
 8007cf2:	e06b      	b.n	8007dcc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d168      	bne.n	8007dcc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfe:	e065      	b.n	8007dcc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	795b      	ldrb	r3, [r3, #5]
 8007d04:	2201      	movs	r2, #1
 8007d06:	9200      	str	r2, [sp, #0]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f87f 	bl	8007e10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	220a      	movs	r2, #10
 8007d22:	761a      	strb	r2, [r3, #24]
      break;
 8007d24:	e055      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	795b      	ldrb	r3, [r3, #5]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fbe1 	bl	80084f4 <USBH_LL_GetURBState>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	220d      	movs	r2, #13
 8007d44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d46:	e043      	b.n	8007dd0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d103      	bne.n	8007d56 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2209      	movs	r2, #9
 8007d52:	761a      	strb	r2, [r3, #24]
      break;
 8007d54:	e03c      	b.n	8007dd0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d139      	bne.n	8007dd0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220b      	movs	r2, #11
 8007d60:	761a      	strb	r2, [r3, #24]
      break;
 8007d62:	e035      	b.n	8007dd0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	7e5b      	ldrb	r3, [r3, #25]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	765a      	strb	r2, [r3, #25]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	7e5b      	ldrb	r3, [r3, #25]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d806      	bhi.n	8007d86 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d84:	e025      	b.n	8007dd2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d8c:	2106      	movs	r1, #6
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	795b      	ldrb	r3, [r3, #5]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f90c 	bl	8007fbc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	791b      	ldrb	r3, [r3, #4]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f906 	bl	8007fbc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007db6:	2302      	movs	r3, #2
 8007db8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dba:	e00a      	b.n	8007dd2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e008      	b.n	8007dd2 <USBH_HandleControl+0x2de>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e006      	b.n	8007dd2 <USBH_HandleControl+0x2de>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e004      	b.n	8007dd2 <USBH_HandleControl+0x2de>
      break;
 8007dc8:	bf00      	nop
 8007dca:	e002      	b.n	8007dd2 <USBH_HandleControl+0x2de>
      break;
 8007dcc:	bf00      	nop
 8007dce:	e000      	b.n	8007dd2 <USBH_HandleControl+0x2de>
      break;
 8007dd0:	bf00      	nop
  }

  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007dea:	79f9      	ldrb	r1, [r7, #7]
 8007dec:	2300      	movs	r3, #0
 8007dee:	9303      	str	r3, [sp, #12]
 8007df0:	2308      	movs	r3, #8
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fb46 	bl	8008492 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af04      	add	r7, sp, #16
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	460b      	mov	r3, r1
 8007e20:	80fb      	strh	r3, [r7, #6]
 8007e22:	4613      	mov	r3, r2
 8007e24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e34:	7979      	ldrb	r1, [r7, #5]
 8007e36:	7e3b      	ldrb	r3, [r7, #24]
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	9302      	str	r3, [sp, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	2301      	movs	r3, #1
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	2300      	movs	r3, #0
 8007e48:	2200      	movs	r2, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fb21 	bl	8008492 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af04      	add	r7, sp, #16
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	4611      	mov	r1, r2
 8007e66:	461a      	mov	r2, r3
 8007e68:	460b      	mov	r3, r1
 8007e6a:	80fb      	strh	r3, [r7, #6]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e70:	7979      	ldrb	r1, [r7, #5]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	2201      	movs	r2, #1
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fb03 	bl	8008492 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e8c:	2300      	movs	r3, #0

}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b088      	sub	sp, #32
 8007e9a:	af04      	add	r7, sp, #16
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	80fb      	strh	r3, [r7, #6]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eba:	7979      	ldrb	r1, [r7, #5]
 8007ebc:	7e3b      	ldrb	r3, [r7, #24]
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	9302      	str	r3, [sp, #8]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	2301      	movs	r3, #1
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fade 	bl	8008492 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	460b      	mov	r3, r1
 8007ef0:	80fb      	strh	r3, [r7, #6]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ef6:	7979      	ldrb	r1, [r7, #5]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	2301      	movs	r3, #1
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fac0 	bl	8008492 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af04      	add	r7, sp, #16
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	4608      	mov	r0, r1
 8007f26:	4611      	mov	r1, r2
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	70fb      	strb	r3, [r7, #3]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70bb      	strb	r3, [r7, #2]
 8007f32:	4613      	mov	r3, r2
 8007f34:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f36:	7878      	ldrb	r0, [r7, #1]
 8007f38:	78ba      	ldrb	r2, [r7, #2]
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	8b3b      	ldrh	r3, [r7, #24]
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	7d3b      	ldrb	r3, [r7, #20]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	7c3b      	ldrb	r3, [r7, #16]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa53 	bl	80083f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa72 	bl	8008454 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f836 	bl	8007ff8 <USBH_GetFreePipe>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00a      	beq.n	8007fb0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	89fb      	ldrh	r3, [r7, #14]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	33e0      	adds	r3, #224	; 0xe0
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
 8007fb2:	b2db      	uxtb	r3, r3
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	2b0a      	cmp	r3, #10
 8007fcc:	d80d      	bhi.n	8007fea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	33e0      	adds	r3, #224	; 0xe0
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	33e0      	adds	r3, #224	; 0xe0
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	e00f      	b.n	800802a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	33e0      	adds	r3, #224	; 0xe0
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	b29b      	uxth	r3, r3
 8008022:	e007      	b.n	8008034 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	3301      	adds	r3, #1
 8008028:	73fb      	strb	r3, [r7, #15]
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b0a      	cmp	r3, #10
 800802e:	d9ec      	bls.n	800800a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008030:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008044:	2201      	movs	r2, #1
 8008046:	490e      	ldr	r1, [pc, #56]	; (8008080 <MX_USB_HOST_Init+0x40>)
 8008048:	480e      	ldr	r0, [pc, #56]	; (8008084 <MX_USB_HOST_Init+0x44>)
 800804a:	f7fe fca1 	bl	8006990 <USBH_Init>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008054:	f7f9 f84c 	bl	80010f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008058:	490b      	ldr	r1, [pc, #44]	; (8008088 <MX_USB_HOST_Init+0x48>)
 800805a:	480a      	ldr	r0, [pc, #40]	; (8008084 <MX_USB_HOST_Init+0x44>)
 800805c:	f7fe fd26 	bl	8006aac <USBH_RegisterClass>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008066:	f7f9 f843 	bl	80010f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800806a:	4806      	ldr	r0, [pc, #24]	; (8008084 <MX_USB_HOST_Init+0x44>)
 800806c:	f7fe fdaa 	bl	8006bc4 <USBH_Start>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008076:	f7f9 f83b 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800807a:	bf00      	nop
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	080080a1 	.word	0x080080a1
 8008084:	20000284 	.word	0x20000284
 8008088:	20000010 	.word	0x20000010

0800808c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008090:	4802      	ldr	r0, [pc, #8]	; (800809c <MX_USB_HOST_Process+0x10>)
 8008092:	f7fe fda7 	bl	8006be4 <USBH_Process>
}
 8008096:	bf00      	nop
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000284 	.word	0x20000284

080080a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d819      	bhi.n	80080e8 <USBH_UserProcess+0x48>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <USBH_UserProcess+0x1c>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080d1 	.word	0x080080d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <USBH_UserProcess+0x58>)
 80080d2:	2203      	movs	r2, #3
 80080d4:	701a      	strb	r2, [r3, #0]
  break;
 80080d6:	e008      	b.n	80080ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <USBH_UserProcess+0x58>)
 80080da:	2202      	movs	r2, #2
 80080dc:	701a      	strb	r2, [r3, #0]
  break;
 80080de:	e004      	b.n	80080ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <USBH_UserProcess+0x58>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
  break;
 80080e6:	e000      	b.n	80080ea <USBH_UserProcess+0x4a>

  default:
  break;
 80080e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20000128 	.word	0x20000128

080080fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	605a      	str	r2, [r3, #4]
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800811c:	d147      	bne.n	80081ae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	4a24      	ldr	r2, [pc, #144]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	6313      	str	r3, [r2, #48]	; 0x30
 800812e:	4b22      	ldr	r3, [pc, #136]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800813a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800813e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008140:	2300      	movs	r3, #0
 8008142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	4619      	mov	r1, r3
 800814e:	481b      	ldr	r0, [pc, #108]	; (80081bc <HAL_HCD_MspInit+0xc0>)
 8008150:	f7f9 fb90 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008154:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815a:	2302      	movs	r3, #2
 800815c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815e:	2300      	movs	r3, #0
 8008160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008162:	2300      	movs	r3, #0
 8008164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008166:	230a      	movs	r3, #10
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800816a:	f107 0314 	add.w	r3, r7, #20
 800816e:	4619      	mov	r1, r3
 8008170:	4812      	ldr	r0, [pc, #72]	; (80081bc <HAL_HCD_MspInit+0xc0>)
 8008172:	f7f9 fb7f 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	4a0f      	ldr	r2, [pc, #60]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 800817c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008180:	6353      	str	r3, [r2, #52]	; 0x34
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818a:	4a0b      	ldr	r2, [pc, #44]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 800818c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008190:	6453      	str	r3, [r2, #68]	; 0x44
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <HAL_HCD_MspInit+0xbc>)
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	2043      	movs	r0, #67	; 0x43
 80081a4:	f7f9 fb2f 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081a8:	2043      	movs	r0, #67	; 0x43
 80081aa:	f7f9 fb48 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081ae:	bf00      	nop
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40023800 	.word	0x40023800
 80081bc:	40020000 	.word	0x40020000

080081c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f8db 	bl	800738a <USBH_LL_IncTimer>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff f913 	bl	8007416 <USBH_LL_Connect>
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff f91c 	bl	8007444 <USBH_LL_Disconnect>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
 8008220:	4613      	mov	r3, r2
 8008222:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff f8cd 	bl	80073de <USBH_LL_PortEnabled>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff f8cd 	bl	80073fa <USBH_LL_PortDisabled>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008276:	2b01      	cmp	r3, #1
 8008278:	d12a      	bne.n	80082d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800827a:	4a18      	ldr	r2, [pc, #96]	; (80082dc <USBH_LL_Init+0x74>)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a15      	ldr	r2, [pc, #84]	; (80082dc <USBH_LL_Init+0x74>)
 8008286:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <USBH_LL_Init+0x74>)
 800828c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008290:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <USBH_LL_Init+0x74>)
 8008294:	2208      	movs	r2, #8
 8008296:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008298:	4b10      	ldr	r3, [pc, #64]	; (80082dc <USBH_LL_Init+0x74>)
 800829a:	2201      	movs	r2, #1
 800829c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <USBH_LL_Init+0x74>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80082a4:	4b0d      	ldr	r3, [pc, #52]	; (80082dc <USBH_LL_Init+0x74>)
 80082a6:	2202      	movs	r2, #2
 80082a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082aa:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <USBH_LL_Init+0x74>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80082b0:	480a      	ldr	r0, [pc, #40]	; (80082dc <USBH_LL_Init+0x74>)
 80082b2:	f7f9 fc94 	bl	8001bde <HAL_HCD_Init>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80082bc:	f7f8 ff18 	bl	80010f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80082c0:	4806      	ldr	r0, [pc, #24]	; (80082dc <USBH_LL_Init+0x74>)
 80082c2:	f7fa f878 	bl	80023b6 <HAL_HCD_GetCurrentFrame>
 80082c6:	4603      	mov	r3, r0
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff f84e 	bl	800736c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	2000065c 	.word	0x2000065c

080082e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7f9 ffe7 	bl	80022ca <HAL_HCD_Start>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 f95c 	bl	80085c0 <USBH_Get_USB_Status>
 8008308:	4603      	mov	r3, r0
 800830a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800830c:	7bbb      	ldrb	r3, [r7, #14]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800832c:	4618      	mov	r0, r3
 800832e:	f7f9 ffef 	bl	8002310 <HAL_HCD_Stop>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 f941 	bl	80085c0 <USBH_Get_USB_Status>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008342:	7bbb      	ldrb	r3, [r7, #14]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800835e:	4618      	mov	r0, r3
 8008360:	f7fa f837 	bl	80023d2 <HAL_HCD_GetCurrentSpeed>
 8008364:	4603      	mov	r3, r0
 8008366:	2b02      	cmp	r3, #2
 8008368:	d00c      	beq.n	8008384 <USBH_LL_GetSpeed+0x38>
 800836a:	2b02      	cmp	r3, #2
 800836c:	d80d      	bhi.n	800838a <USBH_LL_GetSpeed+0x3e>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <USBH_LL_GetSpeed+0x2c>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d003      	beq.n	800837e <USBH_LL_GetSpeed+0x32>
 8008376:	e008      	b.n	800838a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
    break;
 800837c:	e008      	b.n	8008390 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
    break;
 8008382:	e005      	b.n	8008390 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008384:	2302      	movs	r3, #2
 8008386:	73fb      	strb	r3, [r7, #15]
    break;
 8008388:	e002      	b.n	8008390 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800838a:	2301      	movs	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
    break;
 800838e:	bf00      	nop
  }
  return  speed;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f9 ffca 	bl	800234a <HAL_HCD_ResetPort>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f8ff 	bl	80085c0 <USBH_Get_USB_Status>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	4611      	mov	r1, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7f9 ffd1 	bl	800238e <HAL_HCD_HC_GetXferCount>
 80083ec:	4603      	mov	r3, r0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083f6:	b590      	push	{r4, r7, lr}
 80083f8:	b089      	sub	sp, #36	; 0x24
 80083fa:	af04      	add	r7, sp, #16
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	461a      	mov	r2, r3
 8008404:	4603      	mov	r3, r0
 8008406:	70fb      	strb	r3, [r7, #3]
 8008408:	460b      	mov	r3, r1
 800840a:	70bb      	strb	r3, [r7, #2]
 800840c:	4613      	mov	r3, r2
 800840e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800841e:	787c      	ldrb	r4, [r7, #1]
 8008420:	78ba      	ldrb	r2, [r7, #2]
 8008422:	78f9      	ldrb	r1, [r7, #3]
 8008424:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4623      	mov	r3, r4
 8008436:	f7f9 fc34 	bl	8001ca2 <HAL_HCD_HC_Init>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f8bd 	bl	80085c0 <USBH_Get_USB_Status>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844a:	7bbb      	ldrb	r3, [r7, #14]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	bd90      	pop	{r4, r7, pc}

08008454 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f7f9 fca4 	bl	8001dc0 <HAL_HCD_HC_Halt>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f89e 	bl	80085c0 <USBH_Get_USB_Status>
 8008484:	4603      	mov	r3, r0
 8008486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008488:	7bbb      	ldrb	r3, [r7, #14]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008492:	b590      	push	{r4, r7, lr}
 8008494:	b089      	sub	sp, #36	; 0x24
 8008496:	af04      	add	r7, sp, #16
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	461a      	mov	r2, r3
 80084a0:	4603      	mov	r3, r0
 80084a2:	70fb      	strb	r3, [r7, #3]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70bb      	strb	r3, [r7, #2]
 80084a8:	4613      	mov	r3, r2
 80084aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084ba:	787c      	ldrb	r4, [r7, #1]
 80084bc:	78ba      	ldrb	r2, [r7, #2]
 80084be:	78f9      	ldrb	r1, [r7, #3]
 80084c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084c4:	9303      	str	r3, [sp, #12]
 80084c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084c8:	9302      	str	r3, [sp, #8]
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	9301      	str	r3, [sp, #4]
 80084ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	4623      	mov	r3, r4
 80084d6:	f7f9 fc97 	bl	8001e08 <HAL_HCD_HC_SubmitRequest>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f86d 	bl	80085c0 <USBH_Get_USB_Status>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd90      	pop	{r4, r7, pc}

080084f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 ff2b 	bl	8002366 <HAL_HCD_HC_GetURBState>
 8008510:	4603      	mov	r3, r0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800852c:	2b01      	cmp	r3, #1
 800852e:	d103      	bne.n	8008538 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f870 	bl	8008618 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008538:	20c8      	movs	r0, #200	; 0xc8
 800853a:	f7f9 f865 	bl	8001608 <HAL_Delay>
  return USBH_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
 8008554:	4613      	mov	r3, r2
 8008556:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800855e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	212c      	movs	r1, #44	; 0x2c
 8008566:	fb01 f303 	mul.w	r3, r1, r3
 800856a:	4413      	add	r3, r2
 800856c:	333b      	adds	r3, #59	; 0x3b
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	212c      	movs	r1, #44	; 0x2c
 800857a:	fb01 f303 	mul.w	r3, r1, r3
 800857e:	4413      	add	r3, r2
 8008580:	3354      	adds	r3, #84	; 0x54
 8008582:	78ba      	ldrb	r2, [r7, #2]
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	e008      	b.n	800859a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	212c      	movs	r1, #44	; 0x2c
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	3355      	adds	r3, #85	; 0x55
 8008596:	78ba      	ldrb	r2, [r7, #2]
 8008598:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7f9 f829 	bl	8001608 <HAL_Delay>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d817      	bhi.n	8008604 <USBH_Get_USB_Status+0x44>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <USBH_Get_USB_Status+0x1c>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	080085ed 	.word	0x080085ed
 80085e0:	080085f3 	.word	0x080085f3
 80085e4:	080085f9 	.word	0x080085f9
 80085e8:	080085ff 	.word	0x080085ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
    break;
 80085f0:	e00b      	b.n	800860a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085f2:	2302      	movs	r3, #2
 80085f4:	73fb      	strb	r3, [r7, #15]
    break;
 80085f6:	e008      	b.n	800860a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
    break;
 80085fc:	e005      	b.n	800860a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085fe:	2302      	movs	r3, #2
 8008600:	73fb      	strb	r3, [r7, #15]
    break;
 8008602:	e002      	b.n	800860a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008604:	2302      	movs	r3, #2
 8008606:	73fb      	strb	r3, [r7, #15]
    break;
 8008608:	bf00      	nop
  }
  return usb_status;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	e001      	b.n	8008636 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	461a      	mov	r2, r3
 800863a:	2101      	movs	r1, #1
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <MX_DriverVbusFS+0x34>)
 800863e:	f7f9 fab5 	bl	8001bac <HAL_GPIO_WritePin>
}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40020800 	.word	0x40020800

08008650 <__errno>:
 8008650:	4b01      	ldr	r3, [pc, #4]	; (8008658 <__errno+0x8>)
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	20000030 	.word	0x20000030

0800865c <__libc_init_array>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4d0d      	ldr	r5, [pc, #52]	; (8008694 <__libc_init_array+0x38>)
 8008660:	4c0d      	ldr	r4, [pc, #52]	; (8008698 <__libc_init_array+0x3c>)
 8008662:	1b64      	subs	r4, r4, r5
 8008664:	10a4      	asrs	r4, r4, #2
 8008666:	2600      	movs	r6, #0
 8008668:	42a6      	cmp	r6, r4
 800866a:	d109      	bne.n	8008680 <__libc_init_array+0x24>
 800866c:	4d0b      	ldr	r5, [pc, #44]	; (800869c <__libc_init_array+0x40>)
 800866e:	4c0c      	ldr	r4, [pc, #48]	; (80086a0 <__libc_init_array+0x44>)
 8008670:	f000 f906 	bl	8008880 <_init>
 8008674:	1b64      	subs	r4, r4, r5
 8008676:	10a4      	asrs	r4, r4, #2
 8008678:	2600      	movs	r6, #0
 800867a:	42a6      	cmp	r6, r4
 800867c:	d105      	bne.n	800868a <__libc_init_array+0x2e>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	f855 3b04 	ldr.w	r3, [r5], #4
 8008684:	4798      	blx	r3
 8008686:	3601      	adds	r6, #1
 8008688:	e7ee      	b.n	8008668 <__libc_init_array+0xc>
 800868a:	f855 3b04 	ldr.w	r3, [r5], #4
 800868e:	4798      	blx	r3
 8008690:	3601      	adds	r6, #1
 8008692:	e7f2      	b.n	800867a <__libc_init_array+0x1e>
 8008694:	08008e10 	.word	0x08008e10
 8008698:	08008e10 	.word	0x08008e10
 800869c:	08008e10 	.word	0x08008e10
 80086a0:	08008e14 	.word	0x08008e14

080086a4 <malloc>:
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <malloc+0xc>)
 80086a6:	4601      	mov	r1, r0
 80086a8:	6818      	ldr	r0, [r3, #0]
 80086aa:	f000 b871 	b.w	8008790 <_malloc_r>
 80086ae:	bf00      	nop
 80086b0:	20000030 	.word	0x20000030

080086b4 <free>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <free+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b819 	b.w	80086f0 <_free_r>
 80086be:	bf00      	nop
 80086c0:	20000030 	.word	0x20000030

080086c4 <memcpy>:
 80086c4:	440a      	add	r2, r1
 80086c6:	4291      	cmp	r1, r2
 80086c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086cc:	d100      	bne.n	80086d0 <memcpy+0xc>
 80086ce:	4770      	bx	lr
 80086d0:	b510      	push	{r4, lr}
 80086d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086da:	4291      	cmp	r1, r2
 80086dc:	d1f9      	bne.n	80086d2 <memcpy+0xe>
 80086de:	bd10      	pop	{r4, pc}

080086e0 <memset>:
 80086e0:	4402      	add	r2, r0
 80086e2:	4603      	mov	r3, r0
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d100      	bne.n	80086ea <memset+0xa>
 80086e8:	4770      	bx	lr
 80086ea:	f803 1b01 	strb.w	r1, [r3], #1
 80086ee:	e7f9      	b.n	80086e4 <memset+0x4>

080086f0 <_free_r>:
 80086f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086f2:	2900      	cmp	r1, #0
 80086f4:	d048      	beq.n	8008788 <_free_r+0x98>
 80086f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fa:	9001      	str	r0, [sp, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008702:	bfb8      	it	lt
 8008704:	18e4      	addlt	r4, r4, r3
 8008706:	f000 f8ad 	bl	8008864 <__malloc_lock>
 800870a:	4a20      	ldr	r2, [pc, #128]	; (800878c <_free_r+0x9c>)
 800870c:	9801      	ldr	r0, [sp, #4]
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	4615      	mov	r5, r2
 8008712:	b933      	cbnz	r3, 8008722 <_free_r+0x32>
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6014      	str	r4, [r2, #0]
 8008718:	b003      	add	sp, #12
 800871a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800871e:	f000 b8a7 	b.w	8008870 <__malloc_unlock>
 8008722:	42a3      	cmp	r3, r4
 8008724:	d90b      	bls.n	800873e <_free_r+0x4e>
 8008726:	6821      	ldr	r1, [r4, #0]
 8008728:	1862      	adds	r2, r4, r1
 800872a:	4293      	cmp	r3, r2
 800872c:	bf04      	itt	eq
 800872e:	681a      	ldreq	r2, [r3, #0]
 8008730:	685b      	ldreq	r3, [r3, #4]
 8008732:	6063      	str	r3, [r4, #4]
 8008734:	bf04      	itt	eq
 8008736:	1852      	addeq	r2, r2, r1
 8008738:	6022      	streq	r2, [r4, #0]
 800873a:	602c      	str	r4, [r5, #0]
 800873c:	e7ec      	b.n	8008718 <_free_r+0x28>
 800873e:	461a      	mov	r2, r3
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	b10b      	cbz	r3, 8008748 <_free_r+0x58>
 8008744:	42a3      	cmp	r3, r4
 8008746:	d9fa      	bls.n	800873e <_free_r+0x4e>
 8008748:	6811      	ldr	r1, [r2, #0]
 800874a:	1855      	adds	r5, r2, r1
 800874c:	42a5      	cmp	r5, r4
 800874e:	d10b      	bne.n	8008768 <_free_r+0x78>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	4421      	add	r1, r4
 8008754:	1854      	adds	r4, r2, r1
 8008756:	42a3      	cmp	r3, r4
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	d1dd      	bne.n	8008718 <_free_r+0x28>
 800875c:	681c      	ldr	r4, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	6053      	str	r3, [r2, #4]
 8008762:	4421      	add	r1, r4
 8008764:	6011      	str	r1, [r2, #0]
 8008766:	e7d7      	b.n	8008718 <_free_r+0x28>
 8008768:	d902      	bls.n	8008770 <_free_r+0x80>
 800876a:	230c      	movs	r3, #12
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	e7d3      	b.n	8008718 <_free_r+0x28>
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	1961      	adds	r1, r4, r5
 8008774:	428b      	cmp	r3, r1
 8008776:	bf04      	itt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	bf04      	itt	eq
 8008780:	1949      	addeq	r1, r1, r5
 8008782:	6021      	streq	r1, [r4, #0]
 8008784:	6054      	str	r4, [r2, #4]
 8008786:	e7c7      	b.n	8008718 <_free_r+0x28>
 8008788:	b003      	add	sp, #12
 800878a:	bd30      	pop	{r4, r5, pc}
 800878c:	2000012c 	.word	0x2000012c

08008790 <_malloc_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	1ccd      	adds	r5, r1, #3
 8008794:	f025 0503 	bic.w	r5, r5, #3
 8008798:	3508      	adds	r5, #8
 800879a:	2d0c      	cmp	r5, #12
 800879c:	bf38      	it	cc
 800879e:	250c      	movcc	r5, #12
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	db01      	blt.n	80087aa <_malloc_r+0x1a>
 80087a6:	42a9      	cmp	r1, r5
 80087a8:	d903      	bls.n	80087b2 <_malloc_r+0x22>
 80087aa:	230c      	movs	r3, #12
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	2000      	movs	r0, #0
 80087b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b2:	f000 f857 	bl	8008864 <__malloc_lock>
 80087b6:	4921      	ldr	r1, [pc, #132]	; (800883c <_malloc_r+0xac>)
 80087b8:	680a      	ldr	r2, [r1, #0]
 80087ba:	4614      	mov	r4, r2
 80087bc:	b99c      	cbnz	r4, 80087e6 <_malloc_r+0x56>
 80087be:	4f20      	ldr	r7, [pc, #128]	; (8008840 <_malloc_r+0xb0>)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	b923      	cbnz	r3, 80087ce <_malloc_r+0x3e>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f83c 	bl	8008844 <_sbrk_r>
 80087cc:	6038      	str	r0, [r7, #0]
 80087ce:	4629      	mov	r1, r5
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f837 	bl	8008844 <_sbrk_r>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d123      	bne.n	8008822 <_malloc_r+0x92>
 80087da:	230c      	movs	r3, #12
 80087dc:	6033      	str	r3, [r6, #0]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f846 	bl	8008870 <__malloc_unlock>
 80087e4:	e7e3      	b.n	80087ae <_malloc_r+0x1e>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	1b5b      	subs	r3, r3, r5
 80087ea:	d417      	bmi.n	800881c <_malloc_r+0x8c>
 80087ec:	2b0b      	cmp	r3, #11
 80087ee:	d903      	bls.n	80087f8 <_malloc_r+0x68>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	441c      	add	r4, r3
 80087f4:	6025      	str	r5, [r4, #0]
 80087f6:	e004      	b.n	8008802 <_malloc_r+0x72>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	42a2      	cmp	r2, r4
 80087fc:	bf0c      	ite	eq
 80087fe:	600b      	streq	r3, [r1, #0]
 8008800:	6053      	strne	r3, [r2, #4]
 8008802:	4630      	mov	r0, r6
 8008804:	f000 f834 	bl	8008870 <__malloc_unlock>
 8008808:	f104 000b 	add.w	r0, r4, #11
 800880c:	1d23      	adds	r3, r4, #4
 800880e:	f020 0007 	bic.w	r0, r0, #7
 8008812:	1ac2      	subs	r2, r0, r3
 8008814:	d0cc      	beq.n	80087b0 <_malloc_r+0x20>
 8008816:	1a1b      	subs	r3, r3, r0
 8008818:	50a3      	str	r3, [r4, r2]
 800881a:	e7c9      	b.n	80087b0 <_malloc_r+0x20>
 800881c:	4622      	mov	r2, r4
 800881e:	6864      	ldr	r4, [r4, #4]
 8008820:	e7cc      	b.n	80087bc <_malloc_r+0x2c>
 8008822:	1cc4      	adds	r4, r0, #3
 8008824:	f024 0403 	bic.w	r4, r4, #3
 8008828:	42a0      	cmp	r0, r4
 800882a:	d0e3      	beq.n	80087f4 <_malloc_r+0x64>
 800882c:	1a21      	subs	r1, r4, r0
 800882e:	4630      	mov	r0, r6
 8008830:	f000 f808 	bl	8008844 <_sbrk_r>
 8008834:	3001      	adds	r0, #1
 8008836:	d1dd      	bne.n	80087f4 <_malloc_r+0x64>
 8008838:	e7cf      	b.n	80087da <_malloc_r+0x4a>
 800883a:	bf00      	nop
 800883c:	2000012c 	.word	0x2000012c
 8008840:	20000130 	.word	0x20000130

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	; (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f8 fdf6 	bl	8001440 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000960 	.word	0x20000960

08008864 <__malloc_lock>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__malloc_lock+0x8>)
 8008866:	f000 b809 	b.w	800887c <__retarget_lock_acquire_recursive>
 800886a:	bf00      	nop
 800886c:	20000968 	.word	0x20000968

08008870 <__malloc_unlock>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__malloc_unlock+0x8>)
 8008872:	f000 b804 	b.w	800887e <__retarget_lock_release_recursive>
 8008876:	bf00      	nop
 8008878:	20000968 	.word	0x20000968

0800887c <__retarget_lock_acquire_recursive>:
 800887c:	4770      	bx	lr

0800887e <__retarget_lock_release_recursive>:
 800887e:	4770      	bx	lr

08008880 <_init>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr

0800888c <_fini>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr
